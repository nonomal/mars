syntax = "proto3";

package auth;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "openapi/v3/annotations.proto";

option go_package = "github.com/duc-cnzj/mars/api/v5/auth;auth";

option (openapi.v3.document) = {
  security: {
    additional_properties: [
      {
        name: "BearerAuth";
        value: {};
      }
    ]
  },
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
              bearer_format: "JWT";
            }
          }
        }
      ]
    }
  }
};

message LoginRequest {
  string username = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string password = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}

message LoginResponse {
  string token      = 1;
  int64  expires_in = 2;
}

message ExchangeRequest {
  string code = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}

message ExchangeResponse {
  string token      = 1;
  int64  expires_in = 2;
}

message InfoRequest {}

message InfoResponse {
  int32           id         = 1;
  string          avatar     = 2;
  string          name       = 3;
  string          email      = 4;
  string          logout_url = 5;
  repeated string roles      = 6;
}

message SettingsRequest {}

message SettingsResponse {
  message OidcSetting {
    bool   enabled              = 1;
    string name                 = 2;
    string url                  = 3;
    string end_session_endpoint = 4;
    string state                = 5;
  }

  repeated OidcSetting items = 1;
}

service Auth {
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http)      = {
      post: "/api/auth/login",
      body: "*"
    };

    option (openapi.v3.operation) = {
      summary: "登录接口",
      security: {};
    };
  }

  rpc Info(InfoRequest) returns (InfoResponse) {
    option (google.api.http)      = {
      get: "/api/auth/info"
    };

    option (openapi.v3.operation) = {
      summary: "获取当前登录的用户信息",
    };
  }

  rpc Settings(SettingsRequest) returns (SettingsResponse) {
    option (google.api.http)      = {
      get: "/api/auth/settings"
    };

    option (openapi.v3.operation) = {
      summary: "获取 sso 配置以及跳转 url",
      security: {};
    };
  }

  rpc Exchange(ExchangeRequest) returns (ExchangeResponse) {
    option (google.api.http)      = {
      post: "/api/auth/exchange",
      body: "*"
    };

    option (openapi.v3.operation) = {
      summary: "sso code 换取 token",
      security: {};
    };
  }
}
