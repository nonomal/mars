// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: project/project.proto

package project

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListResponseMultiError, or
// nil if none found.
func (m *ListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Count

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResponseMultiError(errors)
	}

	return nil
}

// ListResponseMultiError is an error wrapping multiple validation errors
// returned by ListResponse.ValidateAll() if the designated constraints aren't met.
type ListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResponseMultiError) AllErrors() []error { return m }

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}

// Validate checks the field values on ShowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowRequestMultiError, or
// nil if none found.
func (m *ShowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ShowRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShowRequestMultiError(errors)
	}

	return nil
}

// ShowRequestMultiError is an error wrapping multiple validation errors
// returned by ShowRequest.ValidateAll() if the designated constraints aren't met.
type ShowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowRequestMultiError) AllErrors() []error { return m }

// ShowRequestValidationError is the validation error returned by
// ShowRequest.Validate if the designated constraints aren't met.
type ShowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowRequestValidationError) ErrorName() string { return "ShowRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowRequestValidationError{}

// Validate checks the field values on ShowResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowResponseMultiError, or
// nil if none found.
func (m *ShowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowResponseMultiError(errors)
	}

	return nil
}

// ShowResponseMultiError is an error wrapping multiple validation errors
// returned by ShowResponse.ValidateAll() if the designated constraints aren't met.
type ShowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowResponseMultiError) AllErrors() []error { return m }

// ShowResponseValidationError is the validation error returned by
// ShowResponse.Validate if the designated constraints aren't met.
type ShowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowResponseValidationError) ErrorName() string { return "ShowResponseValidationError" }

// Error satisfies the builtin error interface
func (e ShowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on VersionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionRequestMultiError,
// or nil if none found.
func (m *VersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := VersionRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VersionRequestMultiError(errors)
	}

	return nil
}

// VersionRequestMultiError is an error wrapping multiple validation errors
// returned by VersionRequest.ValidateAll() if the designated constraints
// aren't met.
type VersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionRequestMultiError) AllErrors() []error { return m }

// VersionRequestValidationError is the validation error returned by
// VersionRequest.Validate if the designated constraints aren't met.
type VersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionRequestValidationError) ErrorName() string { return "VersionRequestValidationError" }

// Error satisfies the builtin error interface
func (e VersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionRequestValidationError{}

// Validate checks the field values on VersionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VersionResponseMultiError, or nil if none found.
func (m *VersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return VersionResponseMultiError(errors)
	}

	return nil
}

// VersionResponseMultiError is an error wrapping multiple validation errors
// returned by VersionResponse.ValidateAll() if the designated constraints
// aren't met.
type VersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionResponseMultiError) AllErrors() []error { return m }

// VersionResponseValidationError is the validation error returned by
// VersionResponse.Validate if the designated constraints aren't met.
type VersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionResponseValidationError) ErrorName() string { return "VersionResponseValidationError" }

// Error satisfies the builtin error interface
func (e VersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionResponseValidationError{}

// Validate checks the field values on AllContainersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllContainersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllContainersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllContainersRequestMultiError, or nil if none found.
func (m *AllContainersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllContainersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AllContainersRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllContainersRequestMultiError(errors)
	}

	return nil
}

// AllContainersRequestMultiError is an error wrapping multiple validation
// errors returned by AllContainersRequest.ValidateAll() if the designated
// constraints aren't met.
type AllContainersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllContainersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllContainersRequestMultiError) AllErrors() []error { return m }

// AllContainersRequestValidationError is the validation error returned by
// AllContainersRequest.Validate if the designated constraints aren't met.
type AllContainersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllContainersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllContainersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllContainersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllContainersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllContainersRequestValidationError) ErrorName() string {
	return "AllContainersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllContainersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllContainersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllContainersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllContainersRequestValidationError{}

// Validate checks the field values on AllContainersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllContainersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllContainersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllContainersResponseMultiError, or nil if none found.
func (m *AllContainersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllContainersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllContainersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllContainersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllContainersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllContainersResponseMultiError(errors)
	}

	return nil
}

// AllContainersResponseMultiError is an error wrapping multiple validation
// errors returned by AllContainersResponse.ValidateAll() if the designated
// constraints aren't met.
type AllContainersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllContainersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllContainersResponseMultiError) AllErrors() []error { return m }

// AllContainersResponseValidationError is the validation error returned by
// AllContainersResponse.Validate if the designated constraints aren't met.
type AllContainersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllContainersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllContainersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllContainersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllContainersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllContainersResponseValidationError) ErrorName() string {
	return "AllContainersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AllContainersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllContainersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllContainersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllContainersResponseValidationError{}

// Validate checks the field values on ApplyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplyResponseMultiError, or
// nil if none found.
func (m *ApplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplyResponseMultiError(errors)
	}

	return nil
}

// ApplyResponseMultiError is an error wrapping multiple validation errors
// returned by ApplyResponse.ValidateAll() if the designated constraints
// aren't met.
type ApplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyResponseMultiError) AllErrors() []error { return m }

// ApplyResponseValidationError is the validation error returned by
// ApplyResponse.Validate if the designated constraints aren't met.
type ApplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyResponseValidationError) ErrorName() string { return "ApplyResponseValidationError" }

// Error satisfies the builtin error interface
func (e ApplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyResponseValidationError{}

// Validate checks the field values on ApplyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplyRequestMultiError, or
// nil if none found.
func (m *ApplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespaceId() <= 0 {
		err := ApplyRequestValidationError{
			field:  "NamespaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if m.GetRepoId() <= 0 {
		err := ApplyRequestValidationError{
			field:  "RepoId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	// no validation rules for Config

	// no validation rules for Atomic

	// no validation rules for WebsocketSync

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyRequestValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetInstallTimeoutSeconds() < 0 {
		err := ApplyRequestValidationError{
			field:  "InstallTimeoutSeconds",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SendPercent

	if m.Version != nil {

		if m.GetVersion() < 0 {
			err := ApplyRequestValidationError{
				field:  "Version",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ApplyRequestMultiError(errors)
	}

	return nil
}

// ApplyRequestMultiError is an error wrapping multiple validation errors
// returned by ApplyRequest.ValidateAll() if the designated constraints aren't met.
type ApplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyRequestMultiError) AllErrors() []error { return m }

// ApplyRequestValidationError is the validation error returned by
// ApplyRequest.Validate if the designated constraints aren't met.
type ApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyRequestValidationError) ErrorName() string { return "ApplyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyRequestValidationError{}

// Validate checks the field values on WebApplyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WebApplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebApplyRequestMultiError, or nil if none found.
func (m *WebApplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WebApplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespaceId() <= 0 {
		err := WebApplyRequestValidationError{
			field:  "NamespaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if m.GetRepoId() <= 0 {
		err := WebApplyRequestValidationError{
			field:  "RepoId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	// no validation rules for Config

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebApplyRequestValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebApplyRequestValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DryRun

	if m.Version != nil {
		// no validation rules for Version
	}

	if len(errors) > 0 {
		return WebApplyRequestMultiError(errors)
	}

	return nil
}

// WebApplyRequestMultiError is an error wrapping multiple validation errors
// returned by WebApplyRequest.ValidateAll() if the designated constraints
// aren't met.
type WebApplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebApplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebApplyRequestMultiError) AllErrors() []error { return m }

// WebApplyRequestValidationError is the validation error returned by
// WebApplyRequest.Validate if the designated constraints aren't met.
type WebApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebApplyRequestValidationError) ErrorName() string { return "WebApplyRequestValidationError" }

// Error satisfies the builtin error interface
func (e WebApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebApplyRequestValidationError{}

// Validate checks the field values on WebApplyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WebApplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WebApplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WebApplyResponseMultiError, or nil if none found.
func (m *WebApplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WebApplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebApplyResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebApplyResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return WebApplyResponseMultiError(errors)
	}

	return nil
}

// WebApplyResponseMultiError is an error wrapping multiple validation errors
// returned by WebApplyResponse.ValidateAll() if the designated constraints
// aren't met.
type WebApplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebApplyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebApplyResponseMultiError) AllErrors() []error { return m }

// WebApplyResponseValidationError is the validation error returned by
// WebApplyResponse.Validate if the designated constraints aren't met.
type WebApplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebApplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebApplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebApplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebApplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebApplyResponseValidationError) ErrorName() string { return "WebApplyResponseValidationError" }

// Error satisfies the builtin error interface
func (e WebApplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebApplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebApplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebApplyResponseValidationError{}

// Validate checks the field values on MemoryCpuAndEndpointsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemoryCpuAndEndpointsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryCpuAndEndpointsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemoryCpuAndEndpointsRequestMultiError, or nil if none found.
func (m *MemoryCpuAndEndpointsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryCpuAndEndpointsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := MemoryCpuAndEndpointsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MemoryCpuAndEndpointsRequestMultiError(errors)
	}

	return nil
}

// MemoryCpuAndEndpointsRequestMultiError is an error wrapping multiple
// validation errors returned by MemoryCpuAndEndpointsRequest.ValidateAll() if
// the designated constraints aren't met.
type MemoryCpuAndEndpointsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryCpuAndEndpointsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryCpuAndEndpointsRequestMultiError) AllErrors() []error { return m }

// MemoryCpuAndEndpointsRequestValidationError is the validation error returned
// by MemoryCpuAndEndpointsRequest.Validate if the designated constraints
// aren't met.
type MemoryCpuAndEndpointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryCpuAndEndpointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryCpuAndEndpointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryCpuAndEndpointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryCpuAndEndpointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryCpuAndEndpointsRequestValidationError) ErrorName() string {
	return "MemoryCpuAndEndpointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemoryCpuAndEndpointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryCpuAndEndpointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryCpuAndEndpointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryCpuAndEndpointsRequestValidationError{}

// Validate checks the field values on MemoryCpuAndEndpointsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemoryCpuAndEndpointsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryCpuAndEndpointsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MemoryCpuAndEndpointsResponseMultiError, or nil if none found.
func (m *MemoryCpuAndEndpointsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryCpuAndEndpointsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemoryCpuAndEndpointsResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemoryCpuAndEndpointsResponseValidationError{
						field:  fmt.Sprintf("Urls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemoryCpuAndEndpointsResponseValidationError{
					field:  fmt.Sprintf("Urls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cpu

	// no validation rules for Memory

	if len(errors) > 0 {
		return MemoryCpuAndEndpointsResponseMultiError(errors)
	}

	return nil
}

// MemoryCpuAndEndpointsResponseMultiError is an error wrapping multiple
// validation errors returned by MemoryCpuAndEndpointsResponse.ValidateAll()
// if the designated constraints aren't met.
type MemoryCpuAndEndpointsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryCpuAndEndpointsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryCpuAndEndpointsResponseMultiError) AllErrors() []error { return m }

// MemoryCpuAndEndpointsResponseValidationError is the validation error
// returned by MemoryCpuAndEndpointsResponse.Validate if the designated
// constraints aren't met.
type MemoryCpuAndEndpointsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryCpuAndEndpointsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryCpuAndEndpointsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryCpuAndEndpointsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryCpuAndEndpointsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryCpuAndEndpointsResponseValidationError) ErrorName() string {
	return "MemoryCpuAndEndpointsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemoryCpuAndEndpointsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryCpuAndEndpointsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryCpuAndEndpointsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryCpuAndEndpointsResponseValidationError{}
