syntax = "proto3";

package project;

import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "websocket/websocket.proto";
import "validate/validate.proto";
import "openapi/v3/annotations.proto";
import "types/types.proto";

option go_package = "github.com/duc-cnzj/mars/api/v5/project;project";

message ListRequest {
  optional int32 page      = 1;
  optional int32 page_size = 2;
}
message ListResponse {
  int32                       page      = 1;
  int32                       page_size = 2;
  int32                       count     = 3;
  repeated types.ProjectModel items     = 4;
}


message ShowRequest {
  int32 id = 1 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
}
message ShowResponse {
  types.ProjectModel item = 1;
}

message DeleteRequest {
  int32 id = 1 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
}
message DeleteResponse {}

message VersionRequest {
  int32 id = 1 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
}
message VersionResponse {
  int32 version = 1;
}

message AllContainersRequest {
  int32 id = 1 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
}
message AllContainersResponse {
  repeated types.StateContainer items = 1;
}

message ApplyResponse {
  websocket.Metadata metadata = 1;
  types.ProjectModel project  = 2;
}
// ApplyRequest same as ProjectInput
message ApplyRequest {
  int32                         namespace_id            = 1 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
  // name 不传就使用 git 默认的 name
  string                        name                    = 2;
  int32                         repo_id                 = 3 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
  string                        git_branch              = 4;
  //  git_commit 不传就用最新的 commit
  string                        git_commit              = 5;
  string                        config                  = 6;
  bool                          atomic                  = 7;
  bool                          websocket_sync          = 8;
  repeated websocket.ExtraValue extra_values            = 9;
  // 部署超时时间
  int32                         install_timeout_seconds = 10 [(validate.rules).int32.gte = 0, (google.api.field_behavior) = REQUIRED];
  // 发送百分比
  bool                          send_percent            = 11;
  // 版本号, 创建时可以不传
  optional int32                version                 = 12 [(validate.rules).int32.gte = 0, (google.api.field_behavior) = REQUIRED];
}

message  WebApplyRequest {
  int32                         namespace_id = 1 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
  string                        name         = 2;
  int32                         repo_id      = 3 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
  string                        git_branch   = 4;
  //  git_commit 不传就用最新的 commit
  string                        git_commit   = 5;
  string                        config       = 6;
  repeated websocket.ExtraValue extra_values = 7;
  // 版本号, dryRun 时可以不传
  optional int32                version      = 8;
  bool                          dry_run      = 9;
}
message  WebApplyResponse {
  repeated string    yaml_files = 1;
  types.ProjectModel project    = 2;
  bool               dry_run    = 3;
}

message MemoryCpuAndEndpointsRequest {
  int32 id = 1 [(validate.rules).int32.gt = 0, (google.api.field_behavior) = REQUIRED];
}
message MemoryCpuAndEndpointsResponse {
  repeated types.ServiceEndpoint urls   = 1;
  string                         cpu    = 2;
  string                         memory = 3;
}

service Project {
  //  List 获取项目列表
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/projects"
    };
  }

  // Apply grpc 创建/更新项目
  rpc Apply(ApplyRequest) returns (stream ApplyResponse);

  // WebApply 创建/更新/DryRun 项目
  rpc WebApply(WebApplyRequest) returns (WebApplyResponse) {
    option (google.api.http)      = {
      post: "/api/projects/apply"
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "WebApply 创建/更新/DryRun 项目",
    };
  }

  // Show 项目详情
  rpc Show(ShowRequest) returns (ShowResponse) {
    option (google.api.http)      = {
      get: "/api/projects/{id}"
    };
    option (openapi.v3.operation) = {
      summary: "项目详情",
    };
  }

  rpc MemoryCpuAndEndpoints(MemoryCpuAndEndpointsRequest) returns (MemoryCpuAndEndpointsResponse) {
    option (google.api.http)      = {
      get: "/api/projects/{id}/memory_cpu_and_endpoints"
    };
    option (openapi.v3.operation) = {
      summary: "项目的cpu/memory/endpoints",
    };
  }

  // Version 版本号, 如果不存在则返回 0
  rpc Version(VersionRequest) returns (VersionResponse) {
    option (google.api.http) = {
      get: "/api/projects/{id}/version"
    };
  }

  // Delete 删除项目
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/api/projects/{id}"
    };
  }

  // AllContainers 获取项目下的所有 pod
  rpc AllContainers(AllContainersRequest) returns (AllContainersResponse) {
    option (google.api.http) = {
      get: "/api/projects/{id}/containers"
    };
  }
}