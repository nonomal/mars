// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: types/types.proto

package types

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Pod with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodMultiError, or nil if none found.
func (m *Pod) ValidateAll() error {
	return m.validate(true)
}

func (m *Pod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Pod

	if len(errors) > 0 {
		return PodMultiError(errors)
	}

	return nil
}

// PodMultiError is an error wrapping multiple validation errors returned by
// Pod.ValidateAll() if the designated constraints aren't met.
type PodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodMultiError) AllErrors() []error { return m }

// PodValidationError is the validation error returned by Pod.Validate if the
// designated constraints aren't met.
type PodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodValidationError) ErrorName() string { return "PodValidationError" }

// Error satisfies the builtin error interface
func (e PodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodValidationError{}

// Validate checks the field values on StateContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StateContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StateContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StateContainerMultiError,
// or nil if none found.
func (m *StateContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *StateContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	// no validation rules for IsOld

	// no validation rules for Terminating

	// no validation rules for Pending

	// no validation rules for Ready

	if len(errors) > 0 {
		return StateContainerMultiError(errors)
	}

	return nil
}

// StateContainerMultiError is an error wrapping multiple validation errors
// returned by StateContainer.ValidateAll() if the designated constraints
// aren't met.
type StateContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateContainerMultiError) AllErrors() []error { return m }

// StateContainerValidationError is the validation error returned by
// StateContainer.Validate if the designated constraints aren't met.
type StateContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateContainerValidationError) ErrorName() string { return "StateContainerValidationError" }

// Error satisfies the builtin error interface
func (e StateContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStateContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateContainerValidationError{}

// Validate checks the field values on ServiceEndpoint with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceEndpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceEndpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceEndpointMultiError, or nil if none found.
func (m *ServiceEndpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceEndpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for PortName

	if len(errors) > 0 {
		return ServiceEndpointMultiError(errors)
	}

	return nil
}

// ServiceEndpointMultiError is an error wrapping multiple validation errors
// returned by ServiceEndpoint.ValidateAll() if the designated constraints
// aren't met.
type ServiceEndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceEndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceEndpointMultiError) AllErrors() []error { return m }

// ServiceEndpointValidationError is the validation error returned by
// ServiceEndpoint.Validate if the designated constraints aren't met.
type ServiceEndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceEndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceEndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceEndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceEndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceEndpointValidationError) ErrorName() string { return "ServiceEndpointValidationError" }

// Error satisfies the builtin error interface
func (e ServiceEndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceEndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceEndpointValidationError{}

// Validate checks the field values on ChangelogModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangelogModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangelogModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChangelogModelMultiError,
// or nil if none found.
func (m *ChangelogModel) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangelogModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	// no validation rules for Username

	// no validation rules for Config

	// no validation rules for ConfigChanged

	// no validation rules for ProjectId

	// no validation rules for GitProjectId

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangelogModelValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangelogModelValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangelogModelValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGitProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangelogModelValidationError{
					field:  "GitProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangelogModelValidationError{
					field:  "GitProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGitProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangelogModelValidationError{
				field:  "GitProject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Date

	// no validation rules for ConfigType

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	// no validation rules for DockerImage

	for idx, item := range m.GetEnvValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangelogModelValidationError{
						field:  fmt.Sprintf("EnvValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangelogModelValidationError{
						field:  fmt.Sprintf("EnvValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangelogModelValidationError{
					field:  fmt.Sprintf("EnvValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangelogModelValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangelogModelValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangelogModelValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFinalExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangelogModelValidationError{
						field:  fmt.Sprintf("FinalExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangelogModelValidationError{
						field:  fmt.Sprintf("FinalExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangelogModelValidationError{
					field:  fmt.Sprintf("FinalExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GitCommitWebUrl

	// no validation rules for GitCommitTitle

	// no validation rules for GitCommitAuthor

	// no validation rules for GitCommitDate

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ChangelogModelMultiError(errors)
	}

	return nil
}

// ChangelogModelMultiError is an error wrapping multiple validation errors
// returned by ChangelogModel.ValidateAll() if the designated constraints
// aren't met.
type ChangelogModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangelogModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangelogModelMultiError) AllErrors() []error { return m }

// ChangelogModelValidationError is the validation error returned by
// ChangelogModel.Validate if the designated constraints aren't met.
type ChangelogModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangelogModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangelogModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangelogModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangelogModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangelogModelValidationError) ErrorName() string { return "ChangelogModelValidationError" }

// Error satisfies the builtin error interface
func (e ChangelogModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangelogModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangelogModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangelogModelValidationError{}

// Validate checks the field values on EventModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventModelMultiError, or
// nil if none found.
func (m *EventModel) ValidateAll() error {
	return m.validate(true)
}

func (m *EventModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Action

	// no validation rules for Username

	// no validation rules for Message

	// no validation rules for Old

	// no validation rules for New

	// no validation rules for Duration

	// no validation rules for FileId

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventModelValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventModelValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventModelValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventAt

	// no validation rules for HasDiff

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return EventModelMultiError(errors)
	}

	return nil
}

// EventModelMultiError is an error wrapping multiple validation errors
// returned by EventModel.ValidateAll() if the designated constraints aren't met.
type EventModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventModelMultiError) AllErrors() []error { return m }

// EventModelValidationError is the validation error returned by
// EventModel.Validate if the designated constraints aren't met.
type EventModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventModelValidationError) ErrorName() string { return "EventModelValidationError" }

// Error satisfies the builtin error interface
func (e EventModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventModelValidationError{}

// Validate checks the field values on FileModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileModelMultiError, or nil
// if none found.
func (m *FileModel) ValidateAll() error {
	return m.validate(true)
}

func (m *FileModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Path

	// no validation rules for Size

	// no validation rules for Username

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	// no validation rules for Container_Path

	// no validation rules for HumanizeSize

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return FileModelMultiError(errors)
	}

	return nil
}

// FileModelMultiError is an error wrapping multiple validation errors returned
// by FileModel.ValidateAll() if the designated constraints aren't met.
type FileModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileModelMultiError) AllErrors() []error { return m }

// FileModelValidationError is the validation error returned by
// FileModel.Validate if the designated constraints aren't met.
type FileModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileModelValidationError) ErrorName() string { return "FileModelValidationError" }

// Error satisfies the builtin error interface
func (e FileModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileModelValidationError{}

// Validate checks the field values on GitProjectModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GitProjectModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitProjectModel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitProjectModelMultiError, or nil if none found.
func (m *GitProjectModel) ValidateAll() error {
	return m.validate(true)
}

func (m *GitProjectModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DefaultBranch

	// no validation rules for Name

	// no validation rules for GitProjectId

	// no validation rules for Enabled

	// no validation rules for GlobalEnabled

	if all {
		switch v := interface{}(m.GetGlobalConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitProjectModelValidationError{
					field:  "GlobalConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitProjectModelValidationError{
					field:  "GlobalConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobalConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitProjectModelValidationError{
				field:  "GlobalConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return GitProjectModelMultiError(errors)
	}

	return nil
}

// GitProjectModelMultiError is an error wrapping multiple validation errors
// returned by GitProjectModel.ValidateAll() if the designated constraints
// aren't met.
type GitProjectModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitProjectModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitProjectModelMultiError) AllErrors() []error { return m }

// GitProjectModelValidationError is the validation error returned by
// GitProjectModel.Validate if the designated constraints aren't met.
type GitProjectModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitProjectModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitProjectModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitProjectModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitProjectModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitProjectModelValidationError) ErrorName() string { return "GitProjectModelValidationError" }

// Error satisfies the builtin error interface
func (e GitProjectModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitProjectModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitProjectModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitProjectModelValidationError{}

// Validate checks the field values on ImagePullSecret with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImagePullSecret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImagePullSecret with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImagePullSecretMultiError, or nil if none found.
func (m *ImagePullSecret) ValidateAll() error {
	return m.validate(true)
}

func (m *ImagePullSecret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ImagePullSecretMultiError(errors)
	}

	return nil
}

// ImagePullSecretMultiError is an error wrapping multiple validation errors
// returned by ImagePullSecret.ValidateAll() if the designated constraints
// aren't met.
type ImagePullSecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImagePullSecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImagePullSecretMultiError) AllErrors() []error { return m }

// ImagePullSecretValidationError is the validation error returned by
// ImagePullSecret.Validate if the designated constraints aren't met.
type ImagePullSecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImagePullSecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImagePullSecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImagePullSecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImagePullSecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImagePullSecretValidationError) ErrorName() string { return "ImagePullSecretValidationError" }

// Error satisfies the builtin error interface
func (e ImagePullSecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImagePullSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImagePullSecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImagePullSecretValidationError{}

// Validate checks the field values on MemberModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberModelMultiError, or
// nil if none found.
func (m *MemberModel) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	if len(errors) > 0 {
		return MemberModelMultiError(errors)
	}

	return nil
}

// MemberModelMultiError is an error wrapping multiple validation errors
// returned by MemberModel.ValidateAll() if the designated constraints aren't met.
type MemberModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberModelMultiError) AllErrors() []error { return m }

// MemberModelValidationError is the validation error returned by
// MemberModel.Validate if the designated constraints aren't met.
type MemberModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberModelValidationError) ErrorName() string { return "MemberModelValidationError" }

// Error satisfies the builtin error interface
func (e MemberModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberModelValidationError{}

// Validate checks the field values on NamespaceModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NamespaceModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespaceModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespaceModelMultiError,
// or nil if none found.
func (m *NamespaceModel) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespaceModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NamespaceModelValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NamespaceModelValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespaceModelValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Favorite

	// no validation rules for Description

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NamespaceModelValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NamespaceModelValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespaceModelValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Private

	// no validation rules for CreatorEmail

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return NamespaceModelMultiError(errors)
	}

	return nil
}

// NamespaceModelMultiError is an error wrapping multiple validation errors
// returned by NamespaceModel.ValidateAll() if the designated constraints
// aren't met.
type NamespaceModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceModelMultiError) AllErrors() []error { return m }

// NamespaceModelValidationError is the validation error returned by
// NamespaceModel.Validate if the designated constraints aren't met.
type NamespaceModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceModelValidationError) ErrorName() string { return "NamespaceModelValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceModelValidationError{}

// Validate checks the field values on KeyValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyValueMultiError, or nil
// if none found.
func (m *KeyValue) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return KeyValueMultiError(errors)
	}

	return nil
}

// KeyValueMultiError is an error wrapping multiple validation errors returned
// by KeyValue.ValidateAll() if the designated constraints aren't met.
type KeyValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyValueMultiError) AllErrors() []error { return m }

// KeyValueValidationError is the validation error returned by
// KeyValue.Validate if the designated constraints aren't met.
type KeyValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValueValidationError) ErrorName() string { return "KeyValueValidationError" }

// Error satisfies the builtin error interface
func (e KeyValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValueValidationError{}

// Validate checks the field values on ProjectModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectModelMultiError, or
// nil if none found.
func (m *ProjectModel) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GitProjectId

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	// no validation rules for Config

	// no validation rules for OverrideValues

	// no validation rules for NamespaceId

	// no validation rules for Atomic

	for idx, item := range m.GetEnvValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectModelValidationError{
						field:  fmt.Sprintf("EnvValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectModelValidationError{
						field:  fmt.Sprintf("EnvValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectModelValidationError{
					field:  fmt.Sprintf("EnvValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectModelValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectModelValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectModelValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFinalExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProjectModelValidationError{
						field:  fmt.Sprintf("FinalExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProjectModelValidationError{
						field:  fmt.Sprintf("FinalExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProjectModelValidationError{
					field:  fmt.Sprintf("FinalExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DeployStatus

	// no validation rules for HumanizeCreatedAt

	// no validation rules for HumanizeUpdatedAt

	// no validation rules for ConfigType

	// no validation rules for GitCommitWebUrl

	// no validation rules for GitCommitTitle

	// no validation rules for GitCommitAuthor

	// no validation rules for GitCommitDate

	// no validation rules for Version

	// no validation rules for RepoId

	if all {
		switch v := interface{}(m.GetRepo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectModelValidationError{
					field:  "Repo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectModelValidationError{
					field:  "Repo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectModelValidationError{
				field:  "Repo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNamespace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectModelValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectModelValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNamespace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectModelValidationError{
				field:  "Namespace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ProjectModelMultiError(errors)
	}

	return nil
}

// ProjectModelMultiError is an error wrapping multiple validation errors
// returned by ProjectModel.ValidateAll() if the designated constraints aren't met.
type ProjectModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectModelMultiError) AllErrors() []error { return m }

// ProjectModelValidationError is the validation error returned by
// ProjectModel.Validate if the designated constraints aren't met.
type ProjectModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectModelValidationError) ErrorName() string { return "ProjectModelValidationError" }

// Error satisfies the builtin error interface
func (e ProjectModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectModelValidationError{}

// Validate checks the field values on AccessTokenModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccessTokenModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessTokenModel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessTokenModelMultiError, or nil if none found.
func (m *AccessTokenModel) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessTokenModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Email

	// no validation rules for ExpiredAt

	// no validation rules for Usage

	// no validation rules for LastUsedAt

	// no validation rules for IsDeleted

	// no validation rules for IsExpired

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return AccessTokenModelMultiError(errors)
	}

	return nil
}

// AccessTokenModelMultiError is an error wrapping multiple validation errors
// returned by AccessTokenModel.ValidateAll() if the designated constraints
// aren't met.
type AccessTokenModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessTokenModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessTokenModelMultiError) AllErrors() []error { return m }

// AccessTokenModelValidationError is the validation error returned by
// AccessTokenModel.Validate if the designated constraints aren't met.
type AccessTokenModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessTokenModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessTokenModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessTokenModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessTokenModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessTokenModelValidationError) ErrorName() string { return "AccessTokenModelValidationError" }

// Error satisfies the builtin error interface
func (e AccessTokenModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessTokenModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessTokenModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessTokenModelValidationError{}

// Validate checks the field values on RepoModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepoModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepoModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepoModelMultiError, or nil
// if none found.
func (m *RepoModel) ValidateAll() error {
	return m.validate(true)
}

func (m *RepoModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GitProjectId

	// no validation rules for GitProjectName

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetMarsConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RepoModelValidationError{
					field:  "MarsConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RepoModelValidationError{
					field:  "MarsConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarsConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepoModelValidationError{
				field:  "MarsConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NeedGitRepo

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return RepoModelMultiError(errors)
	}

	return nil
}

// RepoModelMultiError is an error wrapping multiple validation errors returned
// by RepoModel.ValidateAll() if the designated constraints aren't met.
type RepoModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepoModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepoModelMultiError) AllErrors() []error { return m }

// RepoModelValidationError is the validation error returned by
// RepoModel.Validate if the designated constraints aren't met.
type RepoModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepoModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepoModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepoModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepoModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepoModelValidationError) ErrorName() string { return "RepoModelValidationError" }

// Error satisfies the builtin error interface
func (e RepoModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepoModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepoModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepoModelValidationError{}
