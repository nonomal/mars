// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: websocket/websocket.proto

package websocket

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterInfoMultiError, or
// nil if none found.
func (m *ClusterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for FreeMemory

	// no validation rules for FreeCpu

	// no validation rules for FreeRequestMemory

	// no validation rules for FreeRequestCpu

	// no validation rules for TotalMemory

	// no validation rules for TotalCpu

	// no validation rules for UsageMemoryRate

	// no validation rules for UsageCpuRate

	// no validation rules for RequestMemoryRate

	// no validation rules for RequestCpuRate

	if len(errors) > 0 {
		return ClusterInfoMultiError(errors)
	}

	return nil
}

// ClusterInfoMultiError is an error wrapping multiple validation errors
// returned by ClusterInfo.ValidateAll() if the designated constraints aren't met.
type ClusterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterInfoMultiError) AllErrors() []error { return m }

// ClusterInfoValidationError is the validation error returned by
// ClusterInfo.Validate if the designated constraints aren't met.
type ClusterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterInfoValidationError) ErrorName() string { return "ClusterInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClusterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterInfoValidationError{}

// Validate checks the field values on ExtraValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtraValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtraValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtraValueMultiError, or
// nil if none found.
func (m *ExtraValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtraValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Value

	if len(errors) > 0 {
		return ExtraValueMultiError(errors)
	}

	return nil
}

// ExtraValueMultiError is an error wrapping multiple validation errors
// returned by ExtraValue.ValidateAll() if the designated constraints aren't met.
type ExtraValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraValueMultiError) AllErrors() []error { return m }

// ExtraValueValidationError is the validation error returned by
// ExtraValue.Validate if the designated constraints aren't met.
type ExtraValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraValueValidationError) ErrorName() string { return "ExtraValueValidationError" }

// Error satisfies the builtin error interface
func (e ExtraValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraValueValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Pod

	// no validation rules for Container

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on WsRequestMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WsRequestMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsRequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsRequestMetadataMultiError, or nil if none found.
func (m *WsRequestMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *WsRequestMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return WsRequestMetadataMultiError(errors)
	}

	return nil
}

// WsRequestMetadataMultiError is an error wrapping multiple validation errors
// returned by WsRequestMetadata.ValidateAll() if the designated constraints
// aren't met.
type WsRequestMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsRequestMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsRequestMetadataMultiError) AllErrors() []error { return m }

// WsRequestMetadataValidationError is the validation error returned by
// WsRequestMetadata.Validate if the designated constraints aren't met.
type WsRequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsRequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsRequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsRequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsRequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsRequestMetadataValidationError) ErrorName() string {
	return "WsRequestMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e WsRequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsRequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsRequestMetadataValidationError{}

// Validate checks the field values on AuthorizeTokenInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeTokenInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeTokenInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeTokenInputMultiError, or nil if none found.
func (m *AuthorizeTokenInput) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeTokenInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Token

	if len(errors) > 0 {
		return AuthorizeTokenInputMultiError(errors)
	}

	return nil
}

// AuthorizeTokenInputMultiError is an error wrapping multiple validation
// errors returned by AuthorizeTokenInput.ValidateAll() if the designated
// constraints aren't met.
type AuthorizeTokenInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeTokenInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeTokenInputMultiError) AllErrors() []error { return m }

// AuthorizeTokenInputValidationError is the validation error returned by
// AuthorizeTokenInput.Validate if the designated constraints aren't met.
type AuthorizeTokenInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeTokenInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeTokenInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeTokenInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeTokenInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeTokenInputValidationError) ErrorName() string {
	return "AuthorizeTokenInputValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeTokenInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeTokenInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeTokenInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeTokenInputValidationError{}

// Validate checks the field values on TerminalMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TerminalMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminalMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminalMessageMultiError, or nil if none found.
func (m *TerminalMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminalMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Op

	// no validation rules for Data

	// no validation rules for SessionId

	// no validation rules for Height

	// no validation rules for Width

	if len(errors) > 0 {
		return TerminalMessageMultiError(errors)
	}

	return nil
}

// TerminalMessageMultiError is an error wrapping multiple validation errors
// returned by TerminalMessage.ValidateAll() if the designated constraints
// aren't met.
type TerminalMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminalMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminalMessageMultiError) AllErrors() []error { return m }

// TerminalMessageValidationError is the validation error returned by
// TerminalMessage.Validate if the designated constraints aren't met.
type TerminalMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminalMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminalMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminalMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminalMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminalMessageValidationError) ErrorName() string { return "TerminalMessageValidationError" }

// Error satisfies the builtin error interface
func (e TerminalMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminalMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminalMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminalMessageValidationError{}

// Validate checks the field values on ProjectPodEventJoinInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPodEventJoinInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPodEventJoinInput with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPodEventJoinInputMultiError, or nil if none found.
func (m *ProjectPodEventJoinInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPodEventJoinInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Join

	// no validation rules for ProjectId

	// no validation rules for NamespaceId

	if len(errors) > 0 {
		return ProjectPodEventJoinInputMultiError(errors)
	}

	return nil
}

// ProjectPodEventJoinInputMultiError is an error wrapping multiple validation
// errors returned by ProjectPodEventJoinInput.ValidateAll() if the designated
// constraints aren't met.
type ProjectPodEventJoinInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPodEventJoinInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPodEventJoinInputMultiError) AllErrors() []error { return m }

// ProjectPodEventJoinInputValidationError is the validation error returned by
// ProjectPodEventJoinInput.Validate if the designated constraints aren't met.
type ProjectPodEventJoinInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPodEventJoinInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPodEventJoinInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPodEventJoinInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPodEventJoinInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPodEventJoinInputValidationError) ErrorName() string {
	return "ProjectPodEventJoinInputValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPodEventJoinInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPodEventJoinInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPodEventJoinInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPodEventJoinInputValidationError{}

// Validate checks the field values on TerminalMessageInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TerminalMessageInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminalMessageInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminalMessageInputMultiError, or nil if none found.
func (m *TerminalMessageInput) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminalMessageInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TerminalMessageInputValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TerminalMessageInputValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TerminalMessageInputValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TerminalMessageInputMultiError(errors)
	}

	return nil
}

// TerminalMessageInputMultiError is an error wrapping multiple validation
// errors returned by TerminalMessageInput.ValidateAll() if the designated
// constraints aren't met.
type TerminalMessageInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminalMessageInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminalMessageInputMultiError) AllErrors() []error { return m }

// TerminalMessageInputValidationError is the validation error returned by
// TerminalMessageInput.Validate if the designated constraints aren't met.
type TerminalMessageInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminalMessageInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminalMessageInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminalMessageInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminalMessageInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminalMessageInputValidationError) ErrorName() string {
	return "TerminalMessageInputValidationError"
}

// Error satisfies the builtin error interface
func (e TerminalMessageInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminalMessageInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminalMessageInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminalMessageInputValidationError{}

// Validate checks the field values on WsHandleExecShellInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsHandleExecShellInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsHandleExecShellInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsHandleExecShellInputMultiError, or nil if none found.
func (m *WsHandleExecShellInput) ValidateAll() error {
	return m.validate(true)
}

func (m *WsHandleExecShellInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleExecShellInputValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleExecShellInputValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleExecShellInputValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SessionId

	if len(errors) > 0 {
		return WsHandleExecShellInputMultiError(errors)
	}

	return nil
}

// WsHandleExecShellInputMultiError is an error wrapping multiple validation
// errors returned by WsHandleExecShellInput.ValidateAll() if the designated
// constraints aren't met.
type WsHandleExecShellInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsHandleExecShellInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsHandleExecShellInputMultiError) AllErrors() []error { return m }

// WsHandleExecShellInputValidationError is the validation error returned by
// WsHandleExecShellInput.Validate if the designated constraints aren't met.
type WsHandleExecShellInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsHandleExecShellInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsHandleExecShellInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsHandleExecShellInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsHandleExecShellInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsHandleExecShellInputValidationError) ErrorName() string {
	return "WsHandleExecShellInputValidationError"
}

// Error satisfies the builtin error interface
func (e WsHandleExecShellInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsHandleExecShellInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsHandleExecShellInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsHandleExecShellInputValidationError{}

// Validate checks the field values on CancelInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelInputMultiError, or
// nil if none found.
func (m *CancelInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for NamespaceId

	// no validation rules for Name

	if len(errors) > 0 {
		return CancelInputMultiError(errors)
	}

	return nil
}

// CancelInputMultiError is an error wrapping multiple validation errors
// returned by CancelInput.ValidateAll() if the designated constraints aren't met.
type CancelInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelInputMultiError) AllErrors() []error { return m }

// CancelInputValidationError is the validation error returned by
// CancelInput.Validate if the designated constraints aren't met.
type CancelInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelInputValidationError) ErrorName() string { return "CancelInputValidationError" }

// Error satisfies the builtin error interface
func (e CancelInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelInputValidationError{}

// Validate checks the field values on CreateProjectInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectInputMultiError, or nil if none found.
func (m *CreateProjectInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for NamespaceId

	// no validation rules for RepoId

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	// no validation rules for Config

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProjectInputValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProjectInputValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProjectInputValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Atomic != nil {
		// no validation rules for Atomic
	}

	if len(errors) > 0 {
		return CreateProjectInputMultiError(errors)
	}

	return nil
}

// CreateProjectInputMultiError is an error wrapping multiple validation errors
// returned by CreateProjectInput.ValidateAll() if the designated constraints
// aren't met.
type CreateProjectInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectInputMultiError) AllErrors() []error { return m }

// CreateProjectInputValidationError is the validation error returned by
// CreateProjectInput.Validate if the designated constraints aren't met.
type CreateProjectInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectInputValidationError) ErrorName() string {
	return "CreateProjectInputValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectInputValidationError{}

// Validate checks the field values on UpdateProjectInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectInputMultiError, or nil if none found.
func (m *UpdateProjectInput) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for ProjectId

	// no validation rules for GitBranch

	// no validation rules for GitCommit

	// no validation rules for Config

	for idx, item := range m.GetExtraValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateProjectInputValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateProjectInputValidationError{
						field:  fmt.Sprintf("ExtraValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateProjectInputValidationError{
					field:  fmt.Sprintf("ExtraValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if m.Atomic != nil {
		// no validation rules for Atomic
	}

	if len(errors) > 0 {
		return UpdateProjectInputMultiError(errors)
	}

	return nil
}

// UpdateProjectInputMultiError is an error wrapping multiple validation errors
// returned by UpdateProjectInput.ValidateAll() if the designated constraints
// aren't met.
type UpdateProjectInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectInputMultiError) AllErrors() []error { return m }

// UpdateProjectInputValidationError is the validation error returned by
// UpdateProjectInput.Validate if the designated constraints aren't met.
type UpdateProjectInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectInputValidationError) ErrorName() string {
	return "UpdateProjectInputValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectInputValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for Slug

	// no validation rules for Type

	// no validation rules for End

	// no validation rules for Result

	// no validation rules for To

	// no validation rules for Message

	// no validation rules for Percent

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on WsMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsMetadataResponseMultiError, or nil if none found.
func (m *WsMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsMetadataResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsMetadataResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WsMetadataResponseMultiError(errors)
	}

	return nil
}

// WsMetadataResponseMultiError is an error wrapping multiple validation errors
// returned by WsMetadataResponse.ValidateAll() if the designated constraints
// aren't met.
type WsMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsMetadataResponseMultiError) AllErrors() []error { return m }

// WsMetadataResponseValidationError is the validation error returned by
// WsMetadataResponse.Validate if the designated constraints aren't met.
type WsMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsMetadataResponseValidationError) ErrorName() string {
	return "WsMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsMetadataResponseValidationError{}

// Validate checks the field values on WsHandleShellResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsHandleShellResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsHandleShellResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsHandleShellResponseMultiError, or nil if none found.
func (m *WsHandleShellResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsHandleShellResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleShellResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTerminalMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "TerminalMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "TerminalMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTerminalMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleShellResponseValidationError{
				field:  "TerminalMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleShellResponseValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleShellResponseValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WsHandleShellResponseMultiError(errors)
	}

	return nil
}

// WsHandleShellResponseMultiError is an error wrapping multiple validation
// errors returned by WsHandleShellResponse.ValidateAll() if the designated
// constraints aren't met.
type WsHandleShellResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsHandleShellResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsHandleShellResponseMultiError) AllErrors() []error { return m }

// WsHandleShellResponseValidationError is the validation error returned by
// WsHandleShellResponse.Validate if the designated constraints aren't met.
type WsHandleShellResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsHandleShellResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsHandleShellResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsHandleShellResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsHandleShellResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsHandleShellResponseValidationError) ErrorName() string {
	return "WsHandleShellResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsHandleShellResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsHandleShellResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsHandleShellResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsHandleShellResponseValidationError{}

// Validate checks the field values on WsHandleClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsHandleClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsHandleClusterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsHandleClusterResponseMultiError, or nil if none found.
func (m *WsHandleClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsHandleClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleClusterResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleClusterResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleClusterResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsHandleClusterResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsHandleClusterResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsHandleClusterResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WsHandleClusterResponseMultiError(errors)
	}

	return nil
}

// WsHandleClusterResponseMultiError is an error wrapping multiple validation
// errors returned by WsHandleClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type WsHandleClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsHandleClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsHandleClusterResponseMultiError) AllErrors() []error { return m }

// WsHandleClusterResponseValidationError is the validation error returned by
// WsHandleClusterResponse.Validate if the designated constraints aren't met.
type WsHandleClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsHandleClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsHandleClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsHandleClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsHandleClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsHandleClusterResponseValidationError) ErrorName() string {
	return "WsHandleClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsHandleClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsHandleClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsHandleClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsHandleClusterResponseValidationError{}

// Validate checks the field values on WsWithContainerMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsWithContainerMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsWithContainerMessageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WsWithContainerMessageResponseMultiError, or nil if none found.
func (m *WsWithContainerMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsWithContainerMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsWithContainerMessageResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsWithContainerMessageResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsWithContainerMessageResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WsWithContainerMessageResponseValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WsWithContainerMessageResponseValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WsWithContainerMessageResponseValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WsWithContainerMessageResponseMultiError(errors)
	}

	return nil
}

// WsWithContainerMessageResponseMultiError is an error wrapping multiple
// validation errors returned by WsWithContainerMessageResponse.ValidateAll()
// if the designated constraints aren't met.
type WsWithContainerMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsWithContainerMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsWithContainerMessageResponseMultiError) AllErrors() []error { return m }

// WsWithContainerMessageResponseValidationError is the validation error
// returned by WsWithContainerMessageResponse.Validate if the designated
// constraints aren't met.
type WsWithContainerMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsWithContainerMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsWithContainerMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsWithContainerMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsWithContainerMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsWithContainerMessageResponseValidationError) ErrorName() string {
	return "WsWithContainerMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsWithContainerMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsWithContainerMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsWithContainerMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsWithContainerMessageResponseValidationError{}

// Validate checks the field values on WsProjectPodEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsProjectPodEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsProjectPodEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsProjectPodEventResponseMultiError, or nil if none found.
func (m *WsProjectPodEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsProjectPodEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsProjectPodEventResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsProjectPodEventResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsProjectPodEventResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return WsProjectPodEventResponseMultiError(errors)
	}

	return nil
}

// WsProjectPodEventResponseMultiError is an error wrapping multiple validation
// errors returned by WsProjectPodEventResponse.ValidateAll() if the
// designated constraints aren't met.
type WsProjectPodEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsProjectPodEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsProjectPodEventResponseMultiError) AllErrors() []error { return m }

// WsProjectPodEventResponseValidationError is the validation error returned by
// WsProjectPodEventResponse.Validate if the designated constraints aren't met.
type WsProjectPodEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsProjectPodEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsProjectPodEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsProjectPodEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsProjectPodEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsProjectPodEventResponseValidationError) ErrorName() string {
	return "WsProjectPodEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsProjectPodEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsProjectPodEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsProjectPodEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsProjectPodEventResponseValidationError{}

// Validate checks the field values on WsReloadProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WsReloadProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsReloadProjectsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WsReloadProjectsResponseMultiError, or nil if none found.
func (m *WsReloadProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WsReloadProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WsReloadProjectsResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WsReloadProjectsResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WsReloadProjectsResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NamespaceId

	if len(errors) > 0 {
		return WsReloadProjectsResponseMultiError(errors)
	}

	return nil
}

// WsReloadProjectsResponseMultiError is an error wrapping multiple validation
// errors returned by WsReloadProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type WsReloadProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsReloadProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsReloadProjectsResponseMultiError) AllErrors() []error { return m }

// WsReloadProjectsResponseValidationError is the validation error returned by
// WsReloadProjectsResponse.Validate if the designated constraints aren't met.
type WsReloadProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsReloadProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsReloadProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsReloadProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsReloadProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsReloadProjectsResponseValidationError) ErrorName() string {
	return "WsReloadProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WsReloadProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsReloadProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsReloadProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsReloadProjectsResponseValidationError{}
