// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: endpoint/endpoint.proto

package endpoint

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InNamespaceRequestMultiError, or nil if none found.
func (m *InNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespaceId() <= 0 {
		err := InNamespaceRequestValidationError{
			field:  "NamespaceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InNamespaceRequestMultiError(errors)
	}

	return nil
}

// InNamespaceRequestMultiError is an error wrapping multiple validation errors
// returned by InNamespaceRequest.ValidateAll() if the designated constraints
// aren't met.
type InNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InNamespaceRequestMultiError) AllErrors() []error { return m }

// InNamespaceRequestValidationError is the validation error returned by
// InNamespaceRequest.Validate if the designated constraints aren't met.
type InNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InNamespaceRequestValidationError) ErrorName() string {
	return "InNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InNamespaceRequestValidationError{}

// Validate checks the field values on InNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InNamespaceResponseMultiError, or nil if none found.
func (m *InNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InNamespaceResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InNamespaceResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InNamespaceResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InNamespaceResponseMultiError(errors)
	}

	return nil
}

// InNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by InNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type InNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InNamespaceResponseMultiError) AllErrors() []error { return m }

// InNamespaceResponseValidationError is the validation error returned by
// InNamespaceResponse.Validate if the designated constraints aren't met.
type InNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InNamespaceResponseValidationError) ErrorName() string {
	return "InNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InNamespaceResponseValidationError{}

// Validate checks the field values on InProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InProjectRequestMultiError, or nil if none found.
func (m *InProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProjectId() <= 0 {
		err := InProjectRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InProjectRequestMultiError(errors)
	}

	return nil
}

// InProjectRequestMultiError is an error wrapping multiple validation errors
// returned by InProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type InProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InProjectRequestMultiError) AllErrors() []error { return m }

// InProjectRequestValidationError is the validation error returned by
// InProjectRequest.Validate if the designated constraints aren't met.
type InProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InProjectRequestValidationError) ErrorName() string { return "InProjectRequestValidationError" }

// Error satisfies the builtin error interface
func (e InProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InProjectRequestValidationError{}

// Validate checks the field values on InProjectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InProjectResponseMultiError, or nil if none found.
func (m *InProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InProjectResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InProjectResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InProjectResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InProjectResponseMultiError(errors)
	}

	return nil
}

// InProjectResponseMultiError is an error wrapping multiple validation errors
// returned by InProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type InProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InProjectResponseMultiError) AllErrors() []error { return m }

// InProjectResponseValidationError is the validation error returned by
// InProjectResponse.Validate if the designated constraints aren't met.
type InProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InProjectResponseValidationError) ErrorName() string {
	return "InProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InProjectResponseValidationError{}
