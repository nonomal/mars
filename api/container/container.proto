syntax = "proto3";

package container;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "openapi/v3/annotations.proto";

option go_package = "github.com/duc-cnzj/mars/api/v5/container;container";

message CopyToPodRequest {
  int64  file_id   = 1 [(validate.rules).int64.gt = 0, (google.api.field_behavior) = REQUIRED];
  string namespace = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string pod       = 3 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string container = 4 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}
message CopyToPodResponse {
  string pod_file_path = 1;
  string file_name     = 2;
}

message TerminalSize {
  uint32 width  = 1;
  uint32 height = 2;
}

message ExecRequest {
  string          namespace  = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string          pod        = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string          container  = 3;
  repeated string command    = 4;
  bytes           message    = 5;
  // 使用 TerminalSize 修改终端窗口大小
  TerminalSize    size_queue = 6;
}

message ExecOnceRequest {
  string          namespace = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string          pod       = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string          container = 3;
  repeated string command   = 4 [(validate.rules).repeated = {min_items: 1, items: {string: {min_bytes: 1}}}, (google.api.field_behavior) = REQUIRED];
}

message ExecError {
  int64  code    = 1;
  string message = 2;
}

message ExecResponse {
  bytes   message = 1;
  ExecError error   = 2;
}

message StreamCopyToPodRequest {
  string file_name = 1 [(validate.rules).string.min_bytes = 1];
  bytes  data      = 2;
  string namespace = 3  [(validate.rules).string.min_bytes = 1];
  string pod       = 4  [(validate.rules).string.min_bytes = 1];
  string container = 5;
}

message StreamCopyToPodResponse {
  int64  size          = 1;
  string pod_file_path = 2;
  string pod           = 3;
  string namespace     = 4;
  string container     = 5;
  string filename      = 6;
}

message IsPodRunningRequest {
  string namespace = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string pod       = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}

message IsPodRunningResponse {
  bool   running = 1;
  string reason  = 2;
}

message IsPodExistsRequest {
  string namespace = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string pod       = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}

message IsPodExistsResponse {
  bool exists = 1;
}

message LogRequest {
  string namespace   = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string pod         = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string container   = 3 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  bool   show_events = 4;
}

message LogResponse {
  string namespace      = 1;
  string pod_name       = 2;
  string container_name = 3;
  string log            = 4;
}

service Container {
  rpc CopyToPod(CopyToPodRequest) returns (CopyToPodResponse) {
    option (google.api.http)      = {
      post: "/api/containers/copy_to_pod",
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "上传文件到 pod",
    };
  }

  // Exec grpc 执行 pod 命令，交互式, 使用方法见 examples/ 目录
  rpc Exec(stream ExecRequest) returns (stream ExecResponse);

  // ExecOnce grpc 执行一次 pod 命令, 非 tty 模式, 适合一次性脚本, 使用方法见 examples/ 目录
  rpc ExecOnce(ExecOnceRequest) returns (stream ExecResponse);

  // StreamCopyToPod grpc 上传文件到 pod, 使用方法见 examples/ 目录
  rpc StreamCopyToPod(stream StreamCopyToPodRequest) returns (StreamCopyToPodResponse);

  rpc IsPodRunning(IsPodRunningRequest) returns (IsPodRunningResponse) {
    option (google.api.http)      = {
      post: "/api/containers/pod_running_status",
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "pod 是否 running",
    };
  }

  rpc IsPodExists(IsPodExistsRequest) returns (IsPodExistsResponse) {
    option (google.api.http)      = {
      post: "/api/containers/pod_exists",
      body: "*"
    };

    option (openapi.v3.operation) = {
      summary: "pod 是否存在",
    };
  }

  // ContainerLog 查看 pod 日志
  rpc ContainerLog(LogRequest) returns (LogResponse) {
    option (google.api.http)      = {
      get: "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/logs"
    };

    option (openapi.v3.operation) = {
      summary: "查看 pod 日志",
    };
  }

  rpc StreamContainerLog(LogRequest) returns (stream LogResponse) {
    option (google.api.http)      = {
      get: "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/stream_logs"
    };

    option (openapi.v3.operation) = {
      summary: "stream 方式查看 pod 日志",
    };
  }
}