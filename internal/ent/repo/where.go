// Code generated by ent, DO NOT EDIT.

package repo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldName, v))
}

// DefaultBranch applies equality check predicate on the "default_branch" field. It's identical to DefaultBranchEQ.
func DefaultBranch(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDefaultBranch, v))
}

// GitProjectName applies equality check predicate on the "git_project_name" field. It's identical to GitProjectNameEQ.
func GitProjectName(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldGitProjectName, v))
}

// GitProjectID applies equality check predicate on the "git_project_id" field. It's identical to GitProjectIDEQ.
func GitProjectID(v int32) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldGitProjectID, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldEnabled, v))
}

// NeedGitRepo applies equality check predicate on the "need_git_repo" field. It's identical to NeedGitRepoEQ.
func NeedGitRepo(v bool) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldNeedGitRepo, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldName, v))
}

// DefaultBranchEQ applies the EQ predicate on the "default_branch" field.
func DefaultBranchEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDefaultBranch, v))
}

// DefaultBranchNEQ applies the NEQ predicate on the "default_branch" field.
func DefaultBranchNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldDefaultBranch, v))
}

// DefaultBranchIn applies the In predicate on the "default_branch" field.
func DefaultBranchIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldDefaultBranch, vs...))
}

// DefaultBranchNotIn applies the NotIn predicate on the "default_branch" field.
func DefaultBranchNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldDefaultBranch, vs...))
}

// DefaultBranchGT applies the GT predicate on the "default_branch" field.
func DefaultBranchGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldDefaultBranch, v))
}

// DefaultBranchGTE applies the GTE predicate on the "default_branch" field.
func DefaultBranchGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldDefaultBranch, v))
}

// DefaultBranchLT applies the LT predicate on the "default_branch" field.
func DefaultBranchLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldDefaultBranch, v))
}

// DefaultBranchLTE applies the LTE predicate on the "default_branch" field.
func DefaultBranchLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldDefaultBranch, v))
}

// DefaultBranchContains applies the Contains predicate on the "default_branch" field.
func DefaultBranchContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldDefaultBranch, v))
}

// DefaultBranchHasPrefix applies the HasPrefix predicate on the "default_branch" field.
func DefaultBranchHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldDefaultBranch, v))
}

// DefaultBranchHasSuffix applies the HasSuffix predicate on the "default_branch" field.
func DefaultBranchHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldDefaultBranch, v))
}

// DefaultBranchIsNil applies the IsNil predicate on the "default_branch" field.
func DefaultBranchIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldDefaultBranch))
}

// DefaultBranchNotNil applies the NotNil predicate on the "default_branch" field.
func DefaultBranchNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldDefaultBranch))
}

// DefaultBranchEqualFold applies the EqualFold predicate on the "default_branch" field.
func DefaultBranchEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldDefaultBranch, v))
}

// DefaultBranchContainsFold applies the ContainsFold predicate on the "default_branch" field.
func DefaultBranchContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldDefaultBranch, v))
}

// GitProjectNameEQ applies the EQ predicate on the "git_project_name" field.
func GitProjectNameEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldGitProjectName, v))
}

// GitProjectNameNEQ applies the NEQ predicate on the "git_project_name" field.
func GitProjectNameNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldGitProjectName, v))
}

// GitProjectNameIn applies the In predicate on the "git_project_name" field.
func GitProjectNameIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldGitProjectName, vs...))
}

// GitProjectNameNotIn applies the NotIn predicate on the "git_project_name" field.
func GitProjectNameNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldGitProjectName, vs...))
}

// GitProjectNameGT applies the GT predicate on the "git_project_name" field.
func GitProjectNameGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldGitProjectName, v))
}

// GitProjectNameGTE applies the GTE predicate on the "git_project_name" field.
func GitProjectNameGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldGitProjectName, v))
}

// GitProjectNameLT applies the LT predicate on the "git_project_name" field.
func GitProjectNameLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldGitProjectName, v))
}

// GitProjectNameLTE applies the LTE predicate on the "git_project_name" field.
func GitProjectNameLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldGitProjectName, v))
}

// GitProjectNameContains applies the Contains predicate on the "git_project_name" field.
func GitProjectNameContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldGitProjectName, v))
}

// GitProjectNameHasPrefix applies the HasPrefix predicate on the "git_project_name" field.
func GitProjectNameHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldGitProjectName, v))
}

// GitProjectNameHasSuffix applies the HasSuffix predicate on the "git_project_name" field.
func GitProjectNameHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldGitProjectName, v))
}

// GitProjectNameIsNil applies the IsNil predicate on the "git_project_name" field.
func GitProjectNameIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldGitProjectName))
}

// GitProjectNameNotNil applies the NotNil predicate on the "git_project_name" field.
func GitProjectNameNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldGitProjectName))
}

// GitProjectNameEqualFold applies the EqualFold predicate on the "git_project_name" field.
func GitProjectNameEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldGitProjectName, v))
}

// GitProjectNameContainsFold applies the ContainsFold predicate on the "git_project_name" field.
func GitProjectNameContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldGitProjectName, v))
}

// GitProjectIDEQ applies the EQ predicate on the "git_project_id" field.
func GitProjectIDEQ(v int32) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldGitProjectID, v))
}

// GitProjectIDNEQ applies the NEQ predicate on the "git_project_id" field.
func GitProjectIDNEQ(v int32) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldGitProjectID, v))
}

// GitProjectIDIn applies the In predicate on the "git_project_id" field.
func GitProjectIDIn(vs ...int32) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldGitProjectID, vs...))
}

// GitProjectIDNotIn applies the NotIn predicate on the "git_project_id" field.
func GitProjectIDNotIn(vs ...int32) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldGitProjectID, vs...))
}

// GitProjectIDGT applies the GT predicate on the "git_project_id" field.
func GitProjectIDGT(v int32) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldGitProjectID, v))
}

// GitProjectIDGTE applies the GTE predicate on the "git_project_id" field.
func GitProjectIDGTE(v int32) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldGitProjectID, v))
}

// GitProjectIDLT applies the LT predicate on the "git_project_id" field.
func GitProjectIDLT(v int32) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldGitProjectID, v))
}

// GitProjectIDLTE applies the LTE predicate on the "git_project_id" field.
func GitProjectIDLTE(v int32) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldGitProjectID, v))
}

// GitProjectIDIsNil applies the IsNil predicate on the "git_project_id" field.
func GitProjectIDIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldGitProjectID))
}

// GitProjectIDNotNil applies the NotNil predicate on the "git_project_id" field.
func GitProjectIDNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldGitProjectID))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldEnabled, v))
}

// NeedGitRepoEQ applies the EQ predicate on the "need_git_repo" field.
func NeedGitRepoEQ(v bool) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldNeedGitRepo, v))
}

// NeedGitRepoNEQ applies the NEQ predicate on the "need_git_repo" field.
func NeedGitRepoNEQ(v bool) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldNeedGitRepo, v))
}

// MarsConfigIsNil applies the IsNil predicate on the "mars_config" field.
func MarsConfigIsNil() predicate.Repo {
	return predicate.Repo(sql.FieldIsNull(FieldMarsConfig))
}

// MarsConfigNotNil applies the NotNil predicate on the "mars_config" field.
func MarsConfigNotNil() predicate.Repo {
	return predicate.Repo(sql.FieldNotNull(FieldMarsConfig))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Repo {
	return predicate.Repo(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Repo {
	return predicate.Repo(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Repo {
	return predicate.Repo(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Repo {
	return predicate.Repo(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Repo {
	return predicate.Repo(sql.FieldContainsFold(FieldDescription, v))
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.Repo {
	return predicate.Repo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.Project) predicate.Repo {
	return predicate.Repo(func(s *sql.Selector) {
		step := newProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repo) predicate.Repo {
	return predicate.Repo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repo) predicate.Repo {
	return predicate.Repo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repo) predicate.Repo {
	return predicate.Repo(sql.NotPredicates(p))
}
