// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/v5/internal/ent/event"
	"github.com/duc-cnzj/mars/v5/internal/ent/file"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
	"github.com/duc-cnzj/mars/v5/internal/ent/schema/schematype"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FileUpdate) SetDeletedAt(t time.Time) *FileUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDeletedAt(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetDeletedAt(*t)
	}
	return fu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fu *FileUpdate) ClearDeletedAt() *FileUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetUploadType sets the "upload_type" field.
func (fu *FileUpdate) SetUploadType(st schematype.UploadType) *FileUpdate {
	fu.mutation.SetUploadType(st)
	return fu
}

// SetNillableUploadType sets the "upload_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableUploadType(st *schematype.UploadType) *FileUpdate {
	if st != nil {
		fu.SetUploadType(*st)
	}
	return fu
}

// SetPath sets the "path" field.
func (fu *FileUpdate) SetPath(s string) *FileUpdate {
	fu.mutation.SetPath(s)
	return fu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fu *FileUpdate) SetNillablePath(s *string) *FileUpdate {
	if s != nil {
		fu.SetPath(*s)
	}
	return fu
}

// SetSize sets the "size" field.
func (fu *FileUpdate) SetSize(u uint64) *FileUpdate {
	fu.mutation.ResetSize()
	fu.mutation.SetSize(u)
	return fu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSize(u *uint64) *FileUpdate {
	if u != nil {
		fu.SetSize(*u)
	}
	return fu
}

// AddSize adds u to the "size" field.
func (fu *FileUpdate) AddSize(u int64) *FileUpdate {
	fu.mutation.AddSize(u)
	return fu
}

// SetUsername sets the "username" field.
func (fu *FileUpdate) SetUsername(s string) *FileUpdate {
	fu.mutation.SetUsername(s)
	return fu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fu *FileUpdate) SetNillableUsername(s *string) *FileUpdate {
	if s != nil {
		fu.SetUsername(*s)
	}
	return fu
}

// SetNamespace sets the "namespace" field.
func (fu *FileUpdate) SetNamespace(s string) *FileUpdate {
	fu.mutation.SetNamespace(s)
	return fu
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (fu *FileUpdate) SetNillableNamespace(s *string) *FileUpdate {
	if s != nil {
		fu.SetNamespace(*s)
	}
	return fu
}

// SetPod sets the "pod" field.
func (fu *FileUpdate) SetPod(s string) *FileUpdate {
	fu.mutation.SetPod(s)
	return fu
}

// SetNillablePod sets the "pod" field if the given value is not nil.
func (fu *FileUpdate) SetNillablePod(s *string) *FileUpdate {
	if s != nil {
		fu.SetPod(*s)
	}
	return fu
}

// SetContainer sets the "container" field.
func (fu *FileUpdate) SetContainer(s string) *FileUpdate {
	fu.mutation.SetContainer(s)
	return fu
}

// SetNillableContainer sets the "container" field if the given value is not nil.
func (fu *FileUpdate) SetNillableContainer(s *string) *FileUpdate {
	if s != nil {
		fu.SetContainer(*s)
	}
	return fu
}

// SetContainerPath sets the "container_path" field.
func (fu *FileUpdate) SetContainerPath(s string) *FileUpdate {
	fu.mutation.SetContainerPath(s)
	return fu
}

// SetNillableContainerPath sets the "container_path" field if the given value is not nil.
func (fu *FileUpdate) SetNillableContainerPath(s *string) *FileUpdate {
	if s != nil {
		fu.SetContainerPath(*s)
	}
	return fu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (fu *FileUpdate) AddEventIDs(ids ...int) *FileUpdate {
	fu.mutation.AddEventIDs(ids...)
	return fu
}

// AddEvents adds the "events" edges to the Event entity.
func (fu *FileUpdate) AddEvents(e ...*Event) *FileUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddEventIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (fu *FileUpdate) ClearEvents() *FileUpdate {
	fu.mutation.ClearEvents()
	return fu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (fu *FileUpdate) RemoveEventIDs(ids ...int) *FileUpdate {
	fu.mutation.RemoveEventIDs(ids...)
	return fu
}

// RemoveEvents removes "events" edges to Event entities.
func (fu *FileUpdate) RemoveEvents(e ...*Event) *FileUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized file.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.UploadType(); ok {
		if err := file.UploadTypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "upload_type", err: fmt.Errorf(`ent: validator failed for field "File.upload_type": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Path(); ok {
		if err := file.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "File.path": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Username(); ok {
		if err := file.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "File.username": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Namespace(); ok {
		if err := file.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "File.namespace": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Pod(); ok {
		if err := file.PodValidator(v); err != nil {
			return &ValidationError{Name: "pod", err: fmt.Errorf(`ent: validator failed for field "File.pod": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Container(); ok {
		if err := file.ContainerValidator(v); err != nil {
			return &ValidationError{Name: "container", err: fmt.Errorf(`ent: validator failed for field "File.container": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ContainerPath(); ok {
		if err := file.ContainerPathValidator(v); err != nil {
			return &ValidationError{Name: "container_path", err: fmt.Errorf(`ent: validator failed for field "File.container_path": %w`, err)}
		}
	}
	return nil
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.UploadType(); ok {
		_spec.SetField(file.FieldUploadType, field.TypeString, value)
	}
	if value, ok := fu.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fu.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fu.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fu.mutation.Username(); ok {
		_spec.SetField(file.FieldUsername, field.TypeString, value)
	}
	if value, ok := fu.mutation.Namespace(); ok {
		_spec.SetField(file.FieldNamespace, field.TypeString, value)
	}
	if value, ok := fu.mutation.Pod(); ok {
		_spec.SetField(file.FieldPod, field.TypeString, value)
	}
	if value, ok := fu.mutation.Container(); ok {
		_spec.SetField(file.FieldContainer, field.TypeString, value)
	}
	if value, ok := fu.mutation.ContainerPath(); ok {
		_spec.SetField(file.FieldContainerPath, field.TypeString, value)
	}
	if fu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: []string{file.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !fu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: []string{file.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: []string{file.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FileUpdateOne) SetDeletedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDeletedAt(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetDeletedAt(*t)
	}
	return fuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuo *FileUpdateOne) ClearDeletedAt() *FileUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetUploadType sets the "upload_type" field.
func (fuo *FileUpdateOne) SetUploadType(st schematype.UploadType) *FileUpdateOne {
	fuo.mutation.SetUploadType(st)
	return fuo
}

// SetNillableUploadType sets the "upload_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUploadType(st *schematype.UploadType) *FileUpdateOne {
	if st != nil {
		fuo.SetUploadType(*st)
	}
	return fuo
}

// SetPath sets the "path" field.
func (fuo *FileUpdateOne) SetPath(s string) *FileUpdateOne {
	fuo.mutation.SetPath(s)
	return fuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillablePath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetPath(*s)
	}
	return fuo
}

// SetSize sets the "size" field.
func (fuo *FileUpdateOne) SetSize(u uint64) *FileUpdateOne {
	fuo.mutation.ResetSize()
	fuo.mutation.SetSize(u)
	return fuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSize(u *uint64) *FileUpdateOne {
	if u != nil {
		fuo.SetSize(*u)
	}
	return fuo
}

// AddSize adds u to the "size" field.
func (fuo *FileUpdateOne) AddSize(u int64) *FileUpdateOne {
	fuo.mutation.AddSize(u)
	return fuo
}

// SetUsername sets the "username" field.
func (fuo *FileUpdateOne) SetUsername(s string) *FileUpdateOne {
	fuo.mutation.SetUsername(s)
	return fuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUsername(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetUsername(*s)
	}
	return fuo
}

// SetNamespace sets the "namespace" field.
func (fuo *FileUpdateOne) SetNamespace(s string) *FileUpdateOne {
	fuo.mutation.SetNamespace(s)
	return fuo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableNamespace(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetNamespace(*s)
	}
	return fuo
}

// SetPod sets the "pod" field.
func (fuo *FileUpdateOne) SetPod(s string) *FileUpdateOne {
	fuo.mutation.SetPod(s)
	return fuo
}

// SetNillablePod sets the "pod" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillablePod(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetPod(*s)
	}
	return fuo
}

// SetContainer sets the "container" field.
func (fuo *FileUpdateOne) SetContainer(s string) *FileUpdateOne {
	fuo.mutation.SetContainer(s)
	return fuo
}

// SetNillableContainer sets the "container" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableContainer(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetContainer(*s)
	}
	return fuo
}

// SetContainerPath sets the "container_path" field.
func (fuo *FileUpdateOne) SetContainerPath(s string) *FileUpdateOne {
	fuo.mutation.SetContainerPath(s)
	return fuo
}

// SetNillableContainerPath sets the "container_path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableContainerPath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetContainerPath(*s)
	}
	return fuo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (fuo *FileUpdateOne) AddEventIDs(ids ...int) *FileUpdateOne {
	fuo.mutation.AddEventIDs(ids...)
	return fuo
}

// AddEvents adds the "events" edges to the Event entity.
func (fuo *FileUpdateOne) AddEvents(e ...*Event) *FileUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddEventIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (fuo *FileUpdateOne) ClearEvents() *FileUpdateOne {
	fuo.mutation.ClearEvents()
	return fuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (fuo *FileUpdateOne) RemoveEventIDs(ids ...int) *FileUpdateOne {
	fuo.mutation.RemoveEventIDs(ids...)
	return fuo
}

// RemoveEvents removes "events" edges to Event entities.
func (fuo *FileUpdateOne) RemoveEvents(e ...*Event) *FileUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized file.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.UploadType(); ok {
		if err := file.UploadTypeValidator(string(v)); err != nil {
			return &ValidationError{Name: "upload_type", err: fmt.Errorf(`ent: validator failed for field "File.upload_type": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Path(); ok {
		if err := file.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "File.path": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Username(); ok {
		if err := file.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "File.username": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Namespace(); ok {
		if err := file.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`ent: validator failed for field "File.namespace": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Pod(); ok {
		if err := file.PodValidator(v); err != nil {
			return &ValidationError{Name: "pod", err: fmt.Errorf(`ent: validator failed for field "File.pod": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Container(); ok {
		if err := file.ContainerValidator(v); err != nil {
			return &ValidationError{Name: "container", err: fmt.Errorf(`ent: validator failed for field "File.container": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ContainerPath(); ok {
		if err := file.ContainerPathValidator(v); err != nil {
			return &ValidationError{Name: "container_path", err: fmt.Errorf(`ent: validator failed for field "File.container_path": %w`, err)}
		}
	}
	return nil
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.UploadType(); ok {
		_spec.SetField(file.FieldUploadType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fuo.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := fuo.mutation.Username(); ok {
		_spec.SetField(file.FieldUsername, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Namespace(); ok {
		_spec.SetField(file.FieldNamespace, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Pod(); ok {
		_spec.SetField(file.FieldPod, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Container(); ok {
		_spec.SetField(file.FieldContainer, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ContainerPath(); ok {
		_spec.SetField(file.FieldContainerPath, field.TypeString, value)
	}
	if fuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: []string{file.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !fuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: []string{file.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: []string{file.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
