// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/v5/internal/ent/event"
	"github.com/duc-cnzj/mars/v5/internal/ent/file"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventCreate) SetCreatedAt(t time.Time) *EventCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EventCreate) SetUpdatedAt(t time.Time) *EventCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableUpdatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EventCreate) SetDeletedAt(t time.Time) *EventCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableDeletedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetAction sets the "action" field.
func (ec *EventCreate) SetAction(tat types.EventActionType) *EventCreate {
	ec.mutation.SetAction(tat)
	return ec
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (ec *EventCreate) SetNillableAction(tat *types.EventActionType) *EventCreate {
	if tat != nil {
		ec.SetAction(*tat)
	}
	return ec
}

// SetUsername sets the "username" field.
func (ec *EventCreate) SetUsername(s string) *EventCreate {
	ec.mutation.SetUsername(s)
	return ec
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ec *EventCreate) SetNillableUsername(s *string) *EventCreate {
	if s != nil {
		ec.SetUsername(*s)
	}
	return ec
}

// SetMessage sets the "message" field.
func (ec *EventCreate) SetMessage(s string) *EventCreate {
	ec.mutation.SetMessage(s)
	return ec
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ec *EventCreate) SetNillableMessage(s *string) *EventCreate {
	if s != nil {
		ec.SetMessage(*s)
	}
	return ec
}

// SetOld sets the "old" field.
func (ec *EventCreate) SetOld(s string) *EventCreate {
	ec.mutation.SetOld(s)
	return ec
}

// SetNillableOld sets the "old" field if the given value is not nil.
func (ec *EventCreate) SetNillableOld(s *string) *EventCreate {
	if s != nil {
		ec.SetOld(*s)
	}
	return ec
}

// SetNew sets the "new" field.
func (ec *EventCreate) SetNew(s string) *EventCreate {
	ec.mutation.SetNew(s)
	return ec
}

// SetNillableNew sets the "new" field if the given value is not nil.
func (ec *EventCreate) SetNillableNew(s *string) *EventCreate {
	if s != nil {
		ec.SetNew(*s)
	}
	return ec
}

// SetHasDiff sets the "has_diff" field.
func (ec *EventCreate) SetHasDiff(b bool) *EventCreate {
	ec.mutation.SetHasDiff(b)
	return ec
}

// SetNillableHasDiff sets the "has_diff" field if the given value is not nil.
func (ec *EventCreate) SetNillableHasDiff(b *bool) *EventCreate {
	if b != nil {
		ec.SetHasDiff(*b)
	}
	return ec
}

// SetDuration sets the "duration" field.
func (ec *EventCreate) SetDuration(s string) *EventCreate {
	ec.mutation.SetDuration(s)
	return ec
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ec *EventCreate) SetNillableDuration(s *string) *EventCreate {
	if s != nil {
		ec.SetDuration(*s)
	}
	return ec
}

// SetFileID sets the "file_id" field.
func (ec *EventCreate) SetFileID(i int) *EventCreate {
	ec.mutation.SetFileID(i)
	return ec
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (ec *EventCreate) SetNillableFileID(i *int) *EventCreate {
	if i != nil {
		ec.SetFileID(*i)
	}
	return ec
}

// SetFile sets the "file" edge to the File entity.
func (ec *EventCreate) SetFile(f *File) *EventCreate {
	return ec.SetFileID(f.ID)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		if event.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := event.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		if event.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Action(); !ok {
		v := event.DefaultAction
		ec.mutation.SetAction(v)
	}
	if _, ok := ec.mutation.Username(); !ok {
		v := event.DefaultUsername
		ec.mutation.SetUsername(v)
	}
	if _, ok := ec.mutation.Message(); !ok {
		v := event.DefaultMessage
		ec.mutation.SetMessage(v)
	}
	if _, ok := ec.mutation.HasDiff(); !ok {
		v := event.DefaultHasDiff
		ec.mutation.SetHasDiff(v)
	}
	if _, ok := ec.mutation.Duration(); !ok {
		v := event.DefaultDuration
		ec.mutation.SetDuration(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Event.updated_at"`)}
	}
	if _, ok := ec.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "Event.action"`)}
	}
	if _, ok := ec.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Event.username"`)}
	}
	if v, ok := ec.mutation.Username(); ok {
		if err := event.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Event.username": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "Event.message"`)}
	}
	if v, ok := ec.mutation.Message(); ok {
		if err := event.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Event.message": %w`, err)}
		}
	}
	if _, ok := ec.mutation.HasDiff(); !ok {
		return &ValidationError{Name: "has_diff", err: errors.New(`ent: missing required field "Event.has_diff"`)}
	}
	if _, ok := ec.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Event.duration"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Action(); ok {
		_spec.SetField(event.FieldAction, field.TypeInt32, value)
		_node.Action = value
	}
	if value, ok := ec.mutation.Username(); ok {
		_spec.SetField(event.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ec.mutation.Message(); ok {
		_spec.SetField(event.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := ec.mutation.Old(); ok {
		_spec.SetField(event.FieldOld, field.TypeString, value)
		_node.Old = value
	}
	if value, ok := ec.mutation.New(); ok {
		_spec.SetField(event.FieldNew, field.TypeString, value)
		_node.New = value
	}
	if value, ok := ec.mutation.HasDiff(); ok {
		_spec.SetField(event.FieldHasDiff, field.TypeBool, value)
		_node.HasDiff = value
	}
	if value, ok := ec.mutation.Duration(); ok {
		_spec.SetField(event.FieldDuration, field.TypeString, value)
		_node.Duration = value
	}
	if nodes := ec.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsert) SetUpdatedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateUpdatedAt() *EventUpsert {
	u.SetExcluded(event.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventUpsert) SetDeletedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateDeletedAt() *EventUpsert {
	u.SetExcluded(event.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventUpsert) ClearDeletedAt() *EventUpsert {
	u.SetNull(event.FieldDeletedAt)
	return u
}

// SetAction sets the "action" field.
func (u *EventUpsert) SetAction(v types.EventActionType) *EventUpsert {
	u.Set(event.FieldAction, v)
	return u
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *EventUpsert) UpdateAction() *EventUpsert {
	u.SetExcluded(event.FieldAction)
	return u
}

// AddAction adds v to the "action" field.
func (u *EventUpsert) AddAction(v types.EventActionType) *EventUpsert {
	u.Add(event.FieldAction, v)
	return u
}

// SetUsername sets the "username" field.
func (u *EventUpsert) SetUsername(v string) *EventUpsert {
	u.Set(event.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *EventUpsert) UpdateUsername() *EventUpsert {
	u.SetExcluded(event.FieldUsername)
	return u
}

// SetMessage sets the "message" field.
func (u *EventUpsert) SetMessage(v string) *EventUpsert {
	u.Set(event.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *EventUpsert) UpdateMessage() *EventUpsert {
	u.SetExcluded(event.FieldMessage)
	return u
}

// SetOld sets the "old" field.
func (u *EventUpsert) SetOld(v string) *EventUpsert {
	u.Set(event.FieldOld, v)
	return u
}

// UpdateOld sets the "old" field to the value that was provided on create.
func (u *EventUpsert) UpdateOld() *EventUpsert {
	u.SetExcluded(event.FieldOld)
	return u
}

// ClearOld clears the value of the "old" field.
func (u *EventUpsert) ClearOld() *EventUpsert {
	u.SetNull(event.FieldOld)
	return u
}

// SetNew sets the "new" field.
func (u *EventUpsert) SetNew(v string) *EventUpsert {
	u.Set(event.FieldNew, v)
	return u
}

// UpdateNew sets the "new" field to the value that was provided on create.
func (u *EventUpsert) UpdateNew() *EventUpsert {
	u.SetExcluded(event.FieldNew)
	return u
}

// ClearNew clears the value of the "new" field.
func (u *EventUpsert) ClearNew() *EventUpsert {
	u.SetNull(event.FieldNew)
	return u
}

// SetHasDiff sets the "has_diff" field.
func (u *EventUpsert) SetHasDiff(v bool) *EventUpsert {
	u.Set(event.FieldHasDiff, v)
	return u
}

// UpdateHasDiff sets the "has_diff" field to the value that was provided on create.
func (u *EventUpsert) UpdateHasDiff() *EventUpsert {
	u.SetExcluded(event.FieldHasDiff)
	return u
}

// SetDuration sets the "duration" field.
func (u *EventUpsert) SetDuration(v string) *EventUpsert {
	u.Set(event.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *EventUpsert) UpdateDuration() *EventUpsert {
	u.SetExcluded(event.FieldDuration)
	return u
}

// SetFileID sets the "file_id" field.
func (u *EventUpsert) SetFileID(v int) *EventUpsert {
	u.Set(event.FieldFileID, v)
	return u
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *EventUpsert) UpdateFileID() *EventUpsert {
	u.SetExcluded(event.FieldFileID)
	return u
}

// ClearFileID clears the value of the "file_id" field.
func (u *EventUpsert) ClearFileID() *EventUpsert {
	u.SetNull(event.FieldFileID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(event.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertOne) SetUpdatedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateUpdatedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventUpsertOne) SetDeletedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDeletedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventUpsertOne) ClearDeletedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAction sets the "action" field.
func (u *EventUpsertOne) SetAction(v types.EventActionType) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetAction(v)
	})
}

// AddAction adds v to the "action" field.
func (u *EventUpsertOne) AddAction(v types.EventActionType) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.AddAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateAction() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateAction()
	})
}

// SetUsername sets the "username" field.
func (u *EventUpsertOne) SetUsername(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateUsername() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUsername()
	})
}

// SetMessage sets the "message" field.
func (u *EventUpsertOne) SetMessage(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateMessage() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMessage()
	})
}

// SetOld sets the "old" field.
func (u *EventUpsertOne) SetOld(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetOld(v)
	})
}

// UpdateOld sets the "old" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateOld() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateOld()
	})
}

// ClearOld clears the value of the "old" field.
func (u *EventUpsertOne) ClearOld() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearOld()
	})
}

// SetNew sets the "new" field.
func (u *EventUpsertOne) SetNew(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetNew(v)
	})
}

// UpdateNew sets the "new" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateNew() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateNew()
	})
}

// ClearNew clears the value of the "new" field.
func (u *EventUpsertOne) ClearNew() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearNew()
	})
}

// SetHasDiff sets the "has_diff" field.
func (u *EventUpsertOne) SetHasDiff(v bool) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetHasDiff(v)
	})
}

// UpdateHasDiff sets the "has_diff" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateHasDiff() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateHasDiff()
	})
}

// SetDuration sets the "duration" field.
func (u *EventUpsertOne) SetDuration(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDuration() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDuration()
	})
}

// SetFileID sets the "file_id" field.
func (u *EventUpsertOne) SetFileID(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateFileID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateFileID()
	})
}

// ClearFileID clears the value of the "file_id" field.
func (u *EventUpsertOne) ClearFileID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearFileID()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(event.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EventUpsertBulk) SetUpdatedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateUpdatedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EventUpsertBulk) SetDeletedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDeletedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EventUpsertBulk) ClearDeletedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAction sets the "action" field.
func (u *EventUpsertBulk) SetAction(v types.EventActionType) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetAction(v)
	})
}

// AddAction adds v to the "action" field.
func (u *EventUpsertBulk) AddAction(v types.EventActionType) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.AddAction(v)
	})
}

// UpdateAction sets the "action" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateAction() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateAction()
	})
}

// SetUsername sets the "username" field.
func (u *EventUpsertBulk) SetUsername(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateUsername() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUsername()
	})
}

// SetMessage sets the "message" field.
func (u *EventUpsertBulk) SetMessage(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateMessage() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateMessage()
	})
}

// SetOld sets the "old" field.
func (u *EventUpsertBulk) SetOld(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetOld(v)
	})
}

// UpdateOld sets the "old" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateOld() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateOld()
	})
}

// ClearOld clears the value of the "old" field.
func (u *EventUpsertBulk) ClearOld() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearOld()
	})
}

// SetNew sets the "new" field.
func (u *EventUpsertBulk) SetNew(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetNew(v)
	})
}

// UpdateNew sets the "new" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateNew() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateNew()
	})
}

// ClearNew clears the value of the "new" field.
func (u *EventUpsertBulk) ClearNew() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearNew()
	})
}

// SetHasDiff sets the "has_diff" field.
func (u *EventUpsertBulk) SetHasDiff(v bool) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetHasDiff(v)
	})
}

// UpdateHasDiff sets the "has_diff" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateHasDiff() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateHasDiff()
	})
}

// SetDuration sets the "duration" field.
func (u *EventUpsertBulk) SetDuration(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDuration() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDuration()
	})
}

// SetFileID sets the "file_id" field.
func (u *EventUpsertBulk) SetFileID(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateFileID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateFileID()
	})
}

// ClearFileID clears the value of the "file_id" field.
func (u *EventUpsertBulk) ClearFileID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearFileID()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
