// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/duc-cnzj/mars/v5/internal/ent/dbcache"
)

// DBCache is the model entity for the DBCache schema.
type DBCache struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt    time.Time `json:"expired_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DBCache) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbcache.FieldID:
			values[i] = new(sql.NullInt64)
		case dbcache.FieldKey, dbcache.FieldValue:
			values[i] = new(sql.NullString)
		case dbcache.FieldExpiredAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DBCache fields.
func (dc *DBCache) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbcache.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int(value.Int64)
		case dbcache.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				dc.Key = value.String
			}
		case dbcache.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				dc.Value = value.String
			}
		case dbcache.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				dc.ExpiredAt = value.Time
			}
		default:
			dc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the DBCache.
// This includes values selected through modifiers, order, etc.
func (dc *DBCache) GetValue(name string) (ent.Value, error) {
	return dc.selectValues.Get(name)
}

// Update returns a builder for updating this DBCache.
// Note that you need to call DBCache.Unwrap() before calling this method if this DBCache
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DBCache) Update() *DBCacheUpdateOne {
	return NewDBCacheClient(dc.config).UpdateOne(dc)
}

// Unwrap unwraps the DBCache entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DBCache) Unwrap() *DBCache {
	_tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DBCache is not a transactional entity")
	}
	dc.config.driver = _tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DBCache) String() string {
	var builder strings.Builder
	builder.WriteString("DBCache(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dc.ID))
	builder.WriteString("key=")
	builder.WriteString(dc.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(dc.Value)
	builder.WriteString(", ")
	builder.WriteString("expired_at=")
	builder.WriteString(dc.ExpiredAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DBCaches is a parsable slice of DBCache.
type DBCaches []*DBCache
