// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/api/v5/websocket"
	"github.com/duc-cnzj/mars/v5/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v5/internal/ent/namespace"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
	"github.com/duc-cnzj/mars/v5/internal/ent/repo"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProjectUpdate) SetDeletedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDeletedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *ProjectUpdate) ClearDeletedAt() *ProjectUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetGitProjectID sets the "git_project_id" field.
func (pu *ProjectUpdate) SetGitProjectID(i int) *ProjectUpdate {
	pu.mutation.ResetGitProjectID()
	pu.mutation.SetGitProjectID(i)
	return pu
}

// SetNillableGitProjectID sets the "git_project_id" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitProjectID(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetGitProjectID(*i)
	}
	return pu
}

// AddGitProjectID adds i to the "git_project_id" field.
func (pu *ProjectUpdate) AddGitProjectID(i int) *ProjectUpdate {
	pu.mutation.AddGitProjectID(i)
	return pu
}

// ClearGitProjectID clears the value of the "git_project_id" field.
func (pu *ProjectUpdate) ClearGitProjectID() *ProjectUpdate {
	pu.mutation.ClearGitProjectID()
	return pu
}

// SetGitBranch sets the "git_branch" field.
func (pu *ProjectUpdate) SetGitBranch(s string) *ProjectUpdate {
	pu.mutation.SetGitBranch(s)
	return pu
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitBranch(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGitBranch(*s)
	}
	return pu
}

// ClearGitBranch clears the value of the "git_branch" field.
func (pu *ProjectUpdate) ClearGitBranch() *ProjectUpdate {
	pu.mutation.ClearGitBranch()
	return pu
}

// SetGitCommit sets the "git_commit" field.
func (pu *ProjectUpdate) SetGitCommit(s string) *ProjectUpdate {
	pu.mutation.SetGitCommit(s)
	return pu
}

// SetNillableGitCommit sets the "git_commit" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitCommit(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGitCommit(*s)
	}
	return pu
}

// ClearGitCommit clears the value of the "git_commit" field.
func (pu *ProjectUpdate) ClearGitCommit() *ProjectUpdate {
	pu.mutation.ClearGitCommit()
	return pu
}

// SetConfig sets the "config" field.
func (pu *ProjectUpdate) SetConfig(s string) *ProjectUpdate {
	pu.mutation.SetConfig(s)
	return pu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableConfig(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetConfig(*s)
	}
	return pu
}

// ClearConfig clears the value of the "config" field.
func (pu *ProjectUpdate) ClearConfig() *ProjectUpdate {
	pu.mutation.ClearConfig()
	return pu
}

// SetCreator sets the "creator" field.
func (pu *ProjectUpdate) SetCreator(s string) *ProjectUpdate {
	pu.mutation.SetCreator(s)
	return pu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCreator(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetCreator(*s)
	}
	return pu
}

// SetOverrideValues sets the "override_values" field.
func (pu *ProjectUpdate) SetOverrideValues(s string) *ProjectUpdate {
	pu.mutation.SetOverrideValues(s)
	return pu
}

// SetNillableOverrideValues sets the "override_values" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableOverrideValues(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetOverrideValues(*s)
	}
	return pu
}

// ClearOverrideValues clears the value of the "override_values" field.
func (pu *ProjectUpdate) ClearOverrideValues() *ProjectUpdate {
	pu.mutation.ClearOverrideValues()
	return pu
}

// SetDockerImage sets the "docker_image" field.
func (pu *ProjectUpdate) SetDockerImage(s []string) *ProjectUpdate {
	pu.mutation.SetDockerImage(s)
	return pu
}

// AppendDockerImage appends s to the "docker_image" field.
func (pu *ProjectUpdate) AppendDockerImage(s []string) *ProjectUpdate {
	pu.mutation.AppendDockerImage(s)
	return pu
}

// ClearDockerImage clears the value of the "docker_image" field.
func (pu *ProjectUpdate) ClearDockerImage() *ProjectUpdate {
	pu.mutation.ClearDockerImage()
	return pu
}

// SetPodSelectors sets the "pod_selectors" field.
func (pu *ProjectUpdate) SetPodSelectors(s []string) *ProjectUpdate {
	pu.mutation.SetPodSelectors(s)
	return pu
}

// AppendPodSelectors appends s to the "pod_selectors" field.
func (pu *ProjectUpdate) AppendPodSelectors(s []string) *ProjectUpdate {
	pu.mutation.AppendPodSelectors(s)
	return pu
}

// ClearPodSelectors clears the value of the "pod_selectors" field.
func (pu *ProjectUpdate) ClearPodSelectors() *ProjectUpdate {
	pu.mutation.ClearPodSelectors()
	return pu
}

// SetAtomic sets the "atomic" field.
func (pu *ProjectUpdate) SetAtomic(b bool) *ProjectUpdate {
	pu.mutation.SetAtomic(b)
	return pu
}

// SetNillableAtomic sets the "atomic" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAtomic(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetAtomic(*b)
	}
	return pu
}

// SetDeployStatus sets the "deploy_status" field.
func (pu *ProjectUpdate) SetDeployStatus(t types.Deploy) *ProjectUpdate {
	pu.mutation.ResetDeployStatus()
	pu.mutation.SetDeployStatus(t)
	return pu
}

// SetNillableDeployStatus sets the "deploy_status" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDeployStatus(t *types.Deploy) *ProjectUpdate {
	if t != nil {
		pu.SetDeployStatus(*t)
	}
	return pu
}

// AddDeployStatus adds t to the "deploy_status" field.
func (pu *ProjectUpdate) AddDeployStatus(t types.Deploy) *ProjectUpdate {
	pu.mutation.AddDeployStatus(t)
	return pu
}

// SetEnvValues sets the "env_values" field.
func (pu *ProjectUpdate) SetEnvValues(tv []*types.KeyValue) *ProjectUpdate {
	pu.mutation.SetEnvValues(tv)
	return pu
}

// AppendEnvValues appends tv to the "env_values" field.
func (pu *ProjectUpdate) AppendEnvValues(tv []*types.KeyValue) *ProjectUpdate {
	pu.mutation.AppendEnvValues(tv)
	return pu
}

// ClearEnvValues clears the value of the "env_values" field.
func (pu *ProjectUpdate) ClearEnvValues() *ProjectUpdate {
	pu.mutation.ClearEnvValues()
	return pu
}

// SetExtraValues sets the "extra_values" field.
func (pu *ProjectUpdate) SetExtraValues(wv []*websocket.ExtraValue) *ProjectUpdate {
	pu.mutation.SetExtraValues(wv)
	return pu
}

// AppendExtraValues appends wv to the "extra_values" field.
func (pu *ProjectUpdate) AppendExtraValues(wv []*websocket.ExtraValue) *ProjectUpdate {
	pu.mutation.AppendExtraValues(wv)
	return pu
}

// ClearExtraValues clears the value of the "extra_values" field.
func (pu *ProjectUpdate) ClearExtraValues() *ProjectUpdate {
	pu.mutation.ClearExtraValues()
	return pu
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (pu *ProjectUpdate) SetFinalExtraValues(wv []*websocket.ExtraValue) *ProjectUpdate {
	pu.mutation.SetFinalExtraValues(wv)
	return pu
}

// AppendFinalExtraValues appends wv to the "final_extra_values" field.
func (pu *ProjectUpdate) AppendFinalExtraValues(wv []*websocket.ExtraValue) *ProjectUpdate {
	pu.mutation.AppendFinalExtraValues(wv)
	return pu
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (pu *ProjectUpdate) ClearFinalExtraValues() *ProjectUpdate {
	pu.mutation.ClearFinalExtraValues()
	return pu
}

// SetVersion sets the "version" field.
func (pu *ProjectUpdate) SetVersion(i int) *ProjectUpdate {
	pu.mutation.ResetVersion()
	pu.mutation.SetVersion(i)
	return pu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableVersion(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetVersion(*i)
	}
	return pu
}

// AddVersion adds i to the "version" field.
func (pu *ProjectUpdate) AddVersion(i int) *ProjectUpdate {
	pu.mutation.AddVersion(i)
	return pu
}

// SetConfigType sets the "config_type" field.
func (pu *ProjectUpdate) SetConfigType(s string) *ProjectUpdate {
	pu.mutation.SetConfigType(s)
	return pu
}

// SetNillableConfigType sets the "config_type" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableConfigType(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetConfigType(*s)
	}
	return pu
}

// ClearConfigType clears the value of the "config_type" field.
func (pu *ProjectUpdate) ClearConfigType() *ProjectUpdate {
	pu.mutation.ClearConfigType()
	return pu
}

// SetManifest sets the "manifest" field.
func (pu *ProjectUpdate) SetManifest(s []string) *ProjectUpdate {
	pu.mutation.SetManifest(s)
	return pu
}

// AppendManifest appends s to the "manifest" field.
func (pu *ProjectUpdate) AppendManifest(s []string) *ProjectUpdate {
	pu.mutation.AppendManifest(s)
	return pu
}

// ClearManifest clears the value of the "manifest" field.
func (pu *ProjectUpdate) ClearManifest() *ProjectUpdate {
	pu.mutation.ClearManifest()
	return pu
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (pu *ProjectUpdate) SetGitCommitWebURL(s string) *ProjectUpdate {
	pu.mutation.SetGitCommitWebURL(s)
	return pu
}

// SetNillableGitCommitWebURL sets the "git_commit_web_url" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitCommitWebURL(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGitCommitWebURL(*s)
	}
	return pu
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (pu *ProjectUpdate) SetGitCommitTitle(s string) *ProjectUpdate {
	pu.mutation.SetGitCommitTitle(s)
	return pu
}

// SetNillableGitCommitTitle sets the "git_commit_title" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitCommitTitle(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGitCommitTitle(*s)
	}
	return pu
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (pu *ProjectUpdate) SetGitCommitAuthor(s string) *ProjectUpdate {
	pu.mutation.SetGitCommitAuthor(s)
	return pu
}

// SetNillableGitCommitAuthor sets the "git_commit_author" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitCommitAuthor(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetGitCommitAuthor(*s)
	}
	return pu
}

// SetGitCommitDate sets the "git_commit_date" field.
func (pu *ProjectUpdate) SetGitCommitDate(t time.Time) *ProjectUpdate {
	pu.mutation.SetGitCommitDate(t)
	return pu
}

// SetNillableGitCommitDate sets the "git_commit_date" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableGitCommitDate(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetGitCommitDate(*t)
	}
	return pu
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (pu *ProjectUpdate) ClearGitCommitDate() *ProjectUpdate {
	pu.mutation.ClearGitCommitDate()
	return pu
}

// SetNamespaceID sets the "namespace_id" field.
func (pu *ProjectUpdate) SetNamespaceID(i int) *ProjectUpdate {
	pu.mutation.SetNamespaceID(i)
	return pu
}

// SetNillableNamespaceID sets the "namespace_id" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableNamespaceID(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetNamespaceID(*i)
	}
	return pu
}

// ClearNamespaceID clears the value of the "namespace_id" field.
func (pu *ProjectUpdate) ClearNamespaceID() *ProjectUpdate {
	pu.mutation.ClearNamespaceID()
	return pu
}

// SetRepoID sets the "repo_id" field.
func (pu *ProjectUpdate) SetRepoID(i int) *ProjectUpdate {
	pu.mutation.SetRepoID(i)
	return pu
}

// SetNillableRepoID sets the "repo_id" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableRepoID(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetRepoID(*i)
	}
	return pu
}

// ClearRepoID clears the value of the "repo_id" field.
func (pu *ProjectUpdate) ClearRepoID() *ProjectUpdate {
	pu.mutation.ClearRepoID()
	return pu
}

// AddChangelogIDs adds the "changelogs" edge to the Changelog entity by IDs.
func (pu *ProjectUpdate) AddChangelogIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddChangelogIDs(ids...)
	return pu
}

// AddChangelogs adds the "changelogs" edges to the Changelog entity.
func (pu *ProjectUpdate) AddChangelogs(c ...*Changelog) *ProjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddChangelogIDs(ids...)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (pu *ProjectUpdate) SetRepo(r *Repo) *ProjectUpdate {
	return pu.SetRepoID(r.ID)
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (pu *ProjectUpdate) SetNamespace(n *Namespace) *ProjectUpdate {
	return pu.SetNamespaceID(n.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearChangelogs clears all "changelogs" edges to the Changelog entity.
func (pu *ProjectUpdate) ClearChangelogs() *ProjectUpdate {
	pu.mutation.ClearChangelogs()
	return pu
}

// RemoveChangelogIDs removes the "changelogs" edge to Changelog entities by IDs.
func (pu *ProjectUpdate) RemoveChangelogIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveChangelogIDs(ids...)
	return pu
}

// RemoveChangelogs removes "changelogs" edges to Changelog entities.
func (pu *ProjectUpdate) RemoveChangelogs(c ...*Changelog) *ProjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveChangelogIDs(ids...)
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (pu *ProjectUpdate) ClearRepo() *ProjectUpdate {
	pu.mutation.ClearRepo()
	return pu
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (pu *ProjectUpdate) ClearNamespace() *ProjectUpdate {
	pu.mutation.ClearNamespace()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if project.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized project.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GitBranch(); ok {
		if err := project.GitBranchValidator(v); err != nil {
			return &ValidationError{Name: "git_branch", err: fmt.Errorf(`ent: validator failed for field "Project.git_branch": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GitCommit(); ok {
		if err := project.GitCommitValidator(v); err != nil {
			return &ValidationError{Name: "git_commit", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ConfigType(); ok {
		if err := project.ConfigTypeValidator(v); err != nil {
			return &ValidationError{Name: "config_type", err: fmt.Errorf(`ent: validator failed for field "Project.config_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GitCommitWebURL(); ok {
		if err := project.GitCommitWebURLValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_web_url", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_web_url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GitCommitTitle(); ok {
		if err := project.GitCommitTitleValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_title", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GitCommitAuthor(); ok {
		if err := project.GitCommitAuthorValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_author", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_author": %w`, err)}
		}
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(project.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(project.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.GitProjectID(); ok {
		_spec.SetField(project.FieldGitProjectID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGitProjectID(); ok {
		_spec.AddField(project.FieldGitProjectID, field.TypeInt, value)
	}
	if pu.mutation.GitProjectIDCleared() {
		_spec.ClearField(project.FieldGitProjectID, field.TypeInt)
	}
	if value, ok := pu.mutation.GitBranch(); ok {
		_spec.SetField(project.FieldGitBranch, field.TypeString, value)
	}
	if pu.mutation.GitBranchCleared() {
		_spec.ClearField(project.FieldGitBranch, field.TypeString)
	}
	if value, ok := pu.mutation.GitCommit(); ok {
		_spec.SetField(project.FieldGitCommit, field.TypeString, value)
	}
	if pu.mutation.GitCommitCleared() {
		_spec.ClearField(project.FieldGitCommit, field.TypeString)
	}
	if value, ok := pu.mutation.Config(); ok {
		_spec.SetField(project.FieldConfig, field.TypeString, value)
	}
	if pu.mutation.ConfigCleared() {
		_spec.ClearField(project.FieldConfig, field.TypeString)
	}
	if value, ok := pu.mutation.Creator(); ok {
		_spec.SetField(project.FieldCreator, field.TypeString, value)
	}
	if value, ok := pu.mutation.OverrideValues(); ok {
		_spec.SetField(project.FieldOverrideValues, field.TypeString, value)
	}
	if pu.mutation.OverrideValuesCleared() {
		_spec.ClearField(project.FieldOverrideValues, field.TypeString)
	}
	if value, ok := pu.mutation.DockerImage(); ok {
		_spec.SetField(project.FieldDockerImage, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedDockerImage(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldDockerImage, value)
		})
	}
	if pu.mutation.DockerImageCleared() {
		_spec.ClearField(project.FieldDockerImage, field.TypeJSON)
	}
	if value, ok := pu.mutation.PodSelectors(); ok {
		_spec.SetField(project.FieldPodSelectors, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedPodSelectors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldPodSelectors, value)
		})
	}
	if pu.mutation.PodSelectorsCleared() {
		_spec.ClearField(project.FieldPodSelectors, field.TypeJSON)
	}
	if value, ok := pu.mutation.Atomic(); ok {
		_spec.SetField(project.FieldAtomic, field.TypeBool, value)
	}
	if value, ok := pu.mutation.DeployStatus(); ok {
		_spec.SetField(project.FieldDeployStatus, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedDeployStatus(); ok {
		_spec.AddField(project.FieldDeployStatus, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.EnvValues(); ok {
		_spec.SetField(project.FieldEnvValues, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedEnvValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldEnvValues, value)
		})
	}
	if pu.mutation.EnvValuesCleared() {
		_spec.ClearField(project.FieldEnvValues, field.TypeJSON)
	}
	if value, ok := pu.mutation.ExtraValues(); ok {
		_spec.SetField(project.FieldExtraValues, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldExtraValues, value)
		})
	}
	if pu.mutation.ExtraValuesCleared() {
		_spec.ClearField(project.FieldExtraValues, field.TypeJSON)
	}
	if value, ok := pu.mutation.FinalExtraValues(); ok {
		_spec.SetField(project.FieldFinalExtraValues, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedFinalExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldFinalExtraValues, value)
		})
	}
	if pu.mutation.FinalExtraValuesCleared() {
		_spec.ClearField(project.FieldFinalExtraValues, field.TypeJSON)
	}
	if value, ok := pu.mutation.Version(); ok {
		_spec.SetField(project.FieldVersion, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedVersion(); ok {
		_spec.AddField(project.FieldVersion, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ConfigType(); ok {
		_spec.SetField(project.FieldConfigType, field.TypeString, value)
	}
	if pu.mutation.ConfigTypeCleared() {
		_spec.ClearField(project.FieldConfigType, field.TypeString)
	}
	if value, ok := pu.mutation.Manifest(); ok {
		_spec.SetField(project.FieldManifest, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedManifest(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldManifest, value)
		})
	}
	if pu.mutation.ManifestCleared() {
		_spec.ClearField(project.FieldManifest, field.TypeJSON)
	}
	if value, ok := pu.mutation.GitCommitWebURL(); ok {
		_spec.SetField(project.FieldGitCommitWebURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.GitCommitTitle(); ok {
		_spec.SetField(project.FieldGitCommitTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.GitCommitAuthor(); ok {
		_spec.SetField(project.FieldGitCommitAuthor, field.TypeString, value)
	}
	if value, ok := pu.mutation.GitCommitDate(); ok {
		_spec.SetField(project.FieldGitCommitDate, field.TypeTime, value)
	}
	if pu.mutation.GitCommitDateCleared() {
		_spec.ClearField(project.FieldGitCommitDate, field.TypeTime)
	}
	if pu.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChangelogsTable,
			Columns: []string{project.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChangelogsIDs(); len(nodes) > 0 && !pu.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChangelogsTable,
			Columns: []string{project.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChangelogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChangelogsTable,
			Columns: []string{project.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.RepoTable,
			Columns: []string{project.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.RepoTable,
			Columns: []string{project.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.NamespaceTable,
			Columns: []string{project.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.NamespaceTable,
			Columns: []string{project.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProjectUpdateOne) SetDeletedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDeletedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *ProjectUpdateOne) ClearDeletedAt() *ProjectUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetGitProjectID sets the "git_project_id" field.
func (puo *ProjectUpdateOne) SetGitProjectID(i int) *ProjectUpdateOne {
	puo.mutation.ResetGitProjectID()
	puo.mutation.SetGitProjectID(i)
	return puo
}

// SetNillableGitProjectID sets the "git_project_id" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitProjectID(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetGitProjectID(*i)
	}
	return puo
}

// AddGitProjectID adds i to the "git_project_id" field.
func (puo *ProjectUpdateOne) AddGitProjectID(i int) *ProjectUpdateOne {
	puo.mutation.AddGitProjectID(i)
	return puo
}

// ClearGitProjectID clears the value of the "git_project_id" field.
func (puo *ProjectUpdateOne) ClearGitProjectID() *ProjectUpdateOne {
	puo.mutation.ClearGitProjectID()
	return puo
}

// SetGitBranch sets the "git_branch" field.
func (puo *ProjectUpdateOne) SetGitBranch(s string) *ProjectUpdateOne {
	puo.mutation.SetGitBranch(s)
	return puo
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitBranch(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGitBranch(*s)
	}
	return puo
}

// ClearGitBranch clears the value of the "git_branch" field.
func (puo *ProjectUpdateOne) ClearGitBranch() *ProjectUpdateOne {
	puo.mutation.ClearGitBranch()
	return puo
}

// SetGitCommit sets the "git_commit" field.
func (puo *ProjectUpdateOne) SetGitCommit(s string) *ProjectUpdateOne {
	puo.mutation.SetGitCommit(s)
	return puo
}

// SetNillableGitCommit sets the "git_commit" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitCommit(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGitCommit(*s)
	}
	return puo
}

// ClearGitCommit clears the value of the "git_commit" field.
func (puo *ProjectUpdateOne) ClearGitCommit() *ProjectUpdateOne {
	puo.mutation.ClearGitCommit()
	return puo
}

// SetConfig sets the "config" field.
func (puo *ProjectUpdateOne) SetConfig(s string) *ProjectUpdateOne {
	puo.mutation.SetConfig(s)
	return puo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableConfig(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetConfig(*s)
	}
	return puo
}

// ClearConfig clears the value of the "config" field.
func (puo *ProjectUpdateOne) ClearConfig() *ProjectUpdateOne {
	puo.mutation.ClearConfig()
	return puo
}

// SetCreator sets the "creator" field.
func (puo *ProjectUpdateOne) SetCreator(s string) *ProjectUpdateOne {
	puo.mutation.SetCreator(s)
	return puo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCreator(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetCreator(*s)
	}
	return puo
}

// SetOverrideValues sets the "override_values" field.
func (puo *ProjectUpdateOne) SetOverrideValues(s string) *ProjectUpdateOne {
	puo.mutation.SetOverrideValues(s)
	return puo
}

// SetNillableOverrideValues sets the "override_values" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableOverrideValues(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetOverrideValues(*s)
	}
	return puo
}

// ClearOverrideValues clears the value of the "override_values" field.
func (puo *ProjectUpdateOne) ClearOverrideValues() *ProjectUpdateOne {
	puo.mutation.ClearOverrideValues()
	return puo
}

// SetDockerImage sets the "docker_image" field.
func (puo *ProjectUpdateOne) SetDockerImage(s []string) *ProjectUpdateOne {
	puo.mutation.SetDockerImage(s)
	return puo
}

// AppendDockerImage appends s to the "docker_image" field.
func (puo *ProjectUpdateOne) AppendDockerImage(s []string) *ProjectUpdateOne {
	puo.mutation.AppendDockerImage(s)
	return puo
}

// ClearDockerImage clears the value of the "docker_image" field.
func (puo *ProjectUpdateOne) ClearDockerImage() *ProjectUpdateOne {
	puo.mutation.ClearDockerImage()
	return puo
}

// SetPodSelectors sets the "pod_selectors" field.
func (puo *ProjectUpdateOne) SetPodSelectors(s []string) *ProjectUpdateOne {
	puo.mutation.SetPodSelectors(s)
	return puo
}

// AppendPodSelectors appends s to the "pod_selectors" field.
func (puo *ProjectUpdateOne) AppendPodSelectors(s []string) *ProjectUpdateOne {
	puo.mutation.AppendPodSelectors(s)
	return puo
}

// ClearPodSelectors clears the value of the "pod_selectors" field.
func (puo *ProjectUpdateOne) ClearPodSelectors() *ProjectUpdateOne {
	puo.mutation.ClearPodSelectors()
	return puo
}

// SetAtomic sets the "atomic" field.
func (puo *ProjectUpdateOne) SetAtomic(b bool) *ProjectUpdateOne {
	puo.mutation.SetAtomic(b)
	return puo
}

// SetNillableAtomic sets the "atomic" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAtomic(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetAtomic(*b)
	}
	return puo
}

// SetDeployStatus sets the "deploy_status" field.
func (puo *ProjectUpdateOne) SetDeployStatus(t types.Deploy) *ProjectUpdateOne {
	puo.mutation.ResetDeployStatus()
	puo.mutation.SetDeployStatus(t)
	return puo
}

// SetNillableDeployStatus sets the "deploy_status" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDeployStatus(t *types.Deploy) *ProjectUpdateOne {
	if t != nil {
		puo.SetDeployStatus(*t)
	}
	return puo
}

// AddDeployStatus adds t to the "deploy_status" field.
func (puo *ProjectUpdateOne) AddDeployStatus(t types.Deploy) *ProjectUpdateOne {
	puo.mutation.AddDeployStatus(t)
	return puo
}

// SetEnvValues sets the "env_values" field.
func (puo *ProjectUpdateOne) SetEnvValues(tv []*types.KeyValue) *ProjectUpdateOne {
	puo.mutation.SetEnvValues(tv)
	return puo
}

// AppendEnvValues appends tv to the "env_values" field.
func (puo *ProjectUpdateOne) AppendEnvValues(tv []*types.KeyValue) *ProjectUpdateOne {
	puo.mutation.AppendEnvValues(tv)
	return puo
}

// ClearEnvValues clears the value of the "env_values" field.
func (puo *ProjectUpdateOne) ClearEnvValues() *ProjectUpdateOne {
	puo.mutation.ClearEnvValues()
	return puo
}

// SetExtraValues sets the "extra_values" field.
func (puo *ProjectUpdateOne) SetExtraValues(wv []*websocket.ExtraValue) *ProjectUpdateOne {
	puo.mutation.SetExtraValues(wv)
	return puo
}

// AppendExtraValues appends wv to the "extra_values" field.
func (puo *ProjectUpdateOne) AppendExtraValues(wv []*websocket.ExtraValue) *ProjectUpdateOne {
	puo.mutation.AppendExtraValues(wv)
	return puo
}

// ClearExtraValues clears the value of the "extra_values" field.
func (puo *ProjectUpdateOne) ClearExtraValues() *ProjectUpdateOne {
	puo.mutation.ClearExtraValues()
	return puo
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (puo *ProjectUpdateOne) SetFinalExtraValues(wv []*websocket.ExtraValue) *ProjectUpdateOne {
	puo.mutation.SetFinalExtraValues(wv)
	return puo
}

// AppendFinalExtraValues appends wv to the "final_extra_values" field.
func (puo *ProjectUpdateOne) AppendFinalExtraValues(wv []*websocket.ExtraValue) *ProjectUpdateOne {
	puo.mutation.AppendFinalExtraValues(wv)
	return puo
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (puo *ProjectUpdateOne) ClearFinalExtraValues() *ProjectUpdateOne {
	puo.mutation.ClearFinalExtraValues()
	return puo
}

// SetVersion sets the "version" field.
func (puo *ProjectUpdateOne) SetVersion(i int) *ProjectUpdateOne {
	puo.mutation.ResetVersion()
	puo.mutation.SetVersion(i)
	return puo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableVersion(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetVersion(*i)
	}
	return puo
}

// AddVersion adds i to the "version" field.
func (puo *ProjectUpdateOne) AddVersion(i int) *ProjectUpdateOne {
	puo.mutation.AddVersion(i)
	return puo
}

// SetConfigType sets the "config_type" field.
func (puo *ProjectUpdateOne) SetConfigType(s string) *ProjectUpdateOne {
	puo.mutation.SetConfigType(s)
	return puo
}

// SetNillableConfigType sets the "config_type" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableConfigType(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetConfigType(*s)
	}
	return puo
}

// ClearConfigType clears the value of the "config_type" field.
func (puo *ProjectUpdateOne) ClearConfigType() *ProjectUpdateOne {
	puo.mutation.ClearConfigType()
	return puo
}

// SetManifest sets the "manifest" field.
func (puo *ProjectUpdateOne) SetManifest(s []string) *ProjectUpdateOne {
	puo.mutation.SetManifest(s)
	return puo
}

// AppendManifest appends s to the "manifest" field.
func (puo *ProjectUpdateOne) AppendManifest(s []string) *ProjectUpdateOne {
	puo.mutation.AppendManifest(s)
	return puo
}

// ClearManifest clears the value of the "manifest" field.
func (puo *ProjectUpdateOne) ClearManifest() *ProjectUpdateOne {
	puo.mutation.ClearManifest()
	return puo
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (puo *ProjectUpdateOne) SetGitCommitWebURL(s string) *ProjectUpdateOne {
	puo.mutation.SetGitCommitWebURL(s)
	return puo
}

// SetNillableGitCommitWebURL sets the "git_commit_web_url" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitCommitWebURL(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGitCommitWebURL(*s)
	}
	return puo
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (puo *ProjectUpdateOne) SetGitCommitTitle(s string) *ProjectUpdateOne {
	puo.mutation.SetGitCommitTitle(s)
	return puo
}

// SetNillableGitCommitTitle sets the "git_commit_title" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitCommitTitle(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGitCommitTitle(*s)
	}
	return puo
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (puo *ProjectUpdateOne) SetGitCommitAuthor(s string) *ProjectUpdateOne {
	puo.mutation.SetGitCommitAuthor(s)
	return puo
}

// SetNillableGitCommitAuthor sets the "git_commit_author" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitCommitAuthor(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetGitCommitAuthor(*s)
	}
	return puo
}

// SetGitCommitDate sets the "git_commit_date" field.
func (puo *ProjectUpdateOne) SetGitCommitDate(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetGitCommitDate(t)
	return puo
}

// SetNillableGitCommitDate sets the "git_commit_date" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableGitCommitDate(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetGitCommitDate(*t)
	}
	return puo
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (puo *ProjectUpdateOne) ClearGitCommitDate() *ProjectUpdateOne {
	puo.mutation.ClearGitCommitDate()
	return puo
}

// SetNamespaceID sets the "namespace_id" field.
func (puo *ProjectUpdateOne) SetNamespaceID(i int) *ProjectUpdateOne {
	puo.mutation.SetNamespaceID(i)
	return puo
}

// SetNillableNamespaceID sets the "namespace_id" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableNamespaceID(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetNamespaceID(*i)
	}
	return puo
}

// ClearNamespaceID clears the value of the "namespace_id" field.
func (puo *ProjectUpdateOne) ClearNamespaceID() *ProjectUpdateOne {
	puo.mutation.ClearNamespaceID()
	return puo
}

// SetRepoID sets the "repo_id" field.
func (puo *ProjectUpdateOne) SetRepoID(i int) *ProjectUpdateOne {
	puo.mutation.SetRepoID(i)
	return puo
}

// SetNillableRepoID sets the "repo_id" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableRepoID(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetRepoID(*i)
	}
	return puo
}

// ClearRepoID clears the value of the "repo_id" field.
func (puo *ProjectUpdateOne) ClearRepoID() *ProjectUpdateOne {
	puo.mutation.ClearRepoID()
	return puo
}

// AddChangelogIDs adds the "changelogs" edge to the Changelog entity by IDs.
func (puo *ProjectUpdateOne) AddChangelogIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddChangelogIDs(ids...)
	return puo
}

// AddChangelogs adds the "changelogs" edges to the Changelog entity.
func (puo *ProjectUpdateOne) AddChangelogs(c ...*Changelog) *ProjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddChangelogIDs(ids...)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (puo *ProjectUpdateOne) SetRepo(r *Repo) *ProjectUpdateOne {
	return puo.SetRepoID(r.ID)
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (puo *ProjectUpdateOne) SetNamespace(n *Namespace) *ProjectUpdateOne {
	return puo.SetNamespaceID(n.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearChangelogs clears all "changelogs" edges to the Changelog entity.
func (puo *ProjectUpdateOne) ClearChangelogs() *ProjectUpdateOne {
	puo.mutation.ClearChangelogs()
	return puo
}

// RemoveChangelogIDs removes the "changelogs" edge to Changelog entities by IDs.
func (puo *ProjectUpdateOne) RemoveChangelogIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveChangelogIDs(ids...)
	return puo
}

// RemoveChangelogs removes "changelogs" edges to Changelog entities.
func (puo *ProjectUpdateOne) RemoveChangelogs(c ...*Changelog) *ProjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveChangelogIDs(ids...)
}

// ClearRepo clears the "repo" edge to the Repo entity.
func (puo *ProjectUpdateOne) ClearRepo() *ProjectUpdateOne {
	puo.mutation.ClearRepo()
	return puo
}

// ClearNamespace clears the "namespace" edge to the Namespace entity.
func (puo *ProjectUpdateOne) ClearNamespace() *ProjectUpdateOne {
	puo.mutation.ClearNamespace()
	return puo
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if project.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized project.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GitBranch(); ok {
		if err := project.GitBranchValidator(v); err != nil {
			return &ValidationError{Name: "git_branch", err: fmt.Errorf(`ent: validator failed for field "Project.git_branch": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GitCommit(); ok {
		if err := project.GitCommitValidator(v); err != nil {
			return &ValidationError{Name: "git_commit", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ConfigType(); ok {
		if err := project.ConfigTypeValidator(v); err != nil {
			return &ValidationError{Name: "config_type", err: fmt.Errorf(`ent: validator failed for field "Project.config_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GitCommitWebURL(); ok {
		if err := project.GitCommitWebURLValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_web_url", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_web_url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GitCommitTitle(); ok {
		if err := project.GitCommitTitleValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_title", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GitCommitAuthor(); ok {
		if err := project.GitCommitAuthorValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_author", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_author": %w`, err)}
		}
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(project.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(project.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.GitProjectID(); ok {
		_spec.SetField(project.FieldGitProjectID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGitProjectID(); ok {
		_spec.AddField(project.FieldGitProjectID, field.TypeInt, value)
	}
	if puo.mutation.GitProjectIDCleared() {
		_spec.ClearField(project.FieldGitProjectID, field.TypeInt)
	}
	if value, ok := puo.mutation.GitBranch(); ok {
		_spec.SetField(project.FieldGitBranch, field.TypeString, value)
	}
	if puo.mutation.GitBranchCleared() {
		_spec.ClearField(project.FieldGitBranch, field.TypeString)
	}
	if value, ok := puo.mutation.GitCommit(); ok {
		_spec.SetField(project.FieldGitCommit, field.TypeString, value)
	}
	if puo.mutation.GitCommitCleared() {
		_spec.ClearField(project.FieldGitCommit, field.TypeString)
	}
	if value, ok := puo.mutation.Config(); ok {
		_spec.SetField(project.FieldConfig, field.TypeString, value)
	}
	if puo.mutation.ConfigCleared() {
		_spec.ClearField(project.FieldConfig, field.TypeString)
	}
	if value, ok := puo.mutation.Creator(); ok {
		_spec.SetField(project.FieldCreator, field.TypeString, value)
	}
	if value, ok := puo.mutation.OverrideValues(); ok {
		_spec.SetField(project.FieldOverrideValues, field.TypeString, value)
	}
	if puo.mutation.OverrideValuesCleared() {
		_spec.ClearField(project.FieldOverrideValues, field.TypeString)
	}
	if value, ok := puo.mutation.DockerImage(); ok {
		_spec.SetField(project.FieldDockerImage, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedDockerImage(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldDockerImage, value)
		})
	}
	if puo.mutation.DockerImageCleared() {
		_spec.ClearField(project.FieldDockerImage, field.TypeJSON)
	}
	if value, ok := puo.mutation.PodSelectors(); ok {
		_spec.SetField(project.FieldPodSelectors, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedPodSelectors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldPodSelectors, value)
		})
	}
	if puo.mutation.PodSelectorsCleared() {
		_spec.ClearField(project.FieldPodSelectors, field.TypeJSON)
	}
	if value, ok := puo.mutation.Atomic(); ok {
		_spec.SetField(project.FieldAtomic, field.TypeBool, value)
	}
	if value, ok := puo.mutation.DeployStatus(); ok {
		_spec.SetField(project.FieldDeployStatus, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedDeployStatus(); ok {
		_spec.AddField(project.FieldDeployStatus, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.EnvValues(); ok {
		_spec.SetField(project.FieldEnvValues, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedEnvValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldEnvValues, value)
		})
	}
	if puo.mutation.EnvValuesCleared() {
		_spec.ClearField(project.FieldEnvValues, field.TypeJSON)
	}
	if value, ok := puo.mutation.ExtraValues(); ok {
		_spec.SetField(project.FieldExtraValues, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldExtraValues, value)
		})
	}
	if puo.mutation.ExtraValuesCleared() {
		_spec.ClearField(project.FieldExtraValues, field.TypeJSON)
	}
	if value, ok := puo.mutation.FinalExtraValues(); ok {
		_spec.SetField(project.FieldFinalExtraValues, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedFinalExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldFinalExtraValues, value)
		})
	}
	if puo.mutation.FinalExtraValuesCleared() {
		_spec.ClearField(project.FieldFinalExtraValues, field.TypeJSON)
	}
	if value, ok := puo.mutation.Version(); ok {
		_spec.SetField(project.FieldVersion, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedVersion(); ok {
		_spec.AddField(project.FieldVersion, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ConfigType(); ok {
		_spec.SetField(project.FieldConfigType, field.TypeString, value)
	}
	if puo.mutation.ConfigTypeCleared() {
		_spec.ClearField(project.FieldConfigType, field.TypeString)
	}
	if value, ok := puo.mutation.Manifest(); ok {
		_spec.SetField(project.FieldManifest, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedManifest(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, project.FieldManifest, value)
		})
	}
	if puo.mutation.ManifestCleared() {
		_spec.ClearField(project.FieldManifest, field.TypeJSON)
	}
	if value, ok := puo.mutation.GitCommitWebURL(); ok {
		_spec.SetField(project.FieldGitCommitWebURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.GitCommitTitle(); ok {
		_spec.SetField(project.FieldGitCommitTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.GitCommitAuthor(); ok {
		_spec.SetField(project.FieldGitCommitAuthor, field.TypeString, value)
	}
	if value, ok := puo.mutation.GitCommitDate(); ok {
		_spec.SetField(project.FieldGitCommitDate, field.TypeTime, value)
	}
	if puo.mutation.GitCommitDateCleared() {
		_spec.ClearField(project.FieldGitCommitDate, field.TypeTime)
	}
	if puo.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChangelogsTable,
			Columns: []string{project.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChangelogsIDs(); len(nodes) > 0 && !puo.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChangelogsTable,
			Columns: []string{project.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChangelogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChangelogsTable,
			Columns: []string{project.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RepoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.RepoTable,
			Columns: []string{project.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.RepoTable,
			Columns: []string{project.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NamespaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.NamespaceTable,
			Columns: []string{project.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.NamespaceTable,
			Columns: []string{project.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
