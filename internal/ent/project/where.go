// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// GitProjectID applies equality check predicate on the "git_project_id" field. It's identical to GitProjectIDEQ.
func GitProjectID(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitProjectID, v))
}

// GitBranch applies equality check predicate on the "git_branch" field. It's identical to GitBranchEQ.
func GitBranch(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitBranch, v))
}

// GitCommit applies equality check predicate on the "git_commit" field. It's identical to GitCommitEQ.
func GitCommit(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommit, v))
}

// Config applies equality check predicate on the "config" field. It's identical to ConfigEQ.
func Config(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldConfig, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreator, v))
}

// OverrideValues applies equality check predicate on the "override_values" field. It's identical to OverrideValuesEQ.
func OverrideValues(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOverrideValues, v))
}

// Atomic applies equality check predicate on the "atomic" field. It's identical to AtomicEQ.
func Atomic(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAtomic, v))
}

// DeployStatus applies equality check predicate on the "deploy_status" field. It's identical to DeployStatusEQ.
func DeployStatus(v types.Deploy) predicate.Project {
	vc := int32(v)
	return predicate.Project(sql.FieldEQ(FieldDeployStatus, vc))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldVersion, v))
}

// ConfigType applies equality check predicate on the "config_type" field. It's identical to ConfigTypeEQ.
func ConfigType(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldConfigType, v))
}

// GitCommitWebURL applies equality check predicate on the "git_commit_web_url" field. It's identical to GitCommitWebURLEQ.
func GitCommitWebURL(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitWebURL, v))
}

// GitCommitTitle applies equality check predicate on the "git_commit_title" field. It's identical to GitCommitTitleEQ.
func GitCommitTitle(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitTitle, v))
}

// GitCommitAuthor applies equality check predicate on the "git_commit_author" field. It's identical to GitCommitAuthorEQ.
func GitCommitAuthor(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitAuthor, v))
}

// GitCommitDate applies equality check predicate on the "git_commit_date" field. It's identical to GitCommitDateEQ.
func GitCommitDate(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitDate, v))
}

// NamespaceID applies equality check predicate on the "namespace_id" field. It's identical to NamespaceIDEQ.
func NamespaceID(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldNamespaceID, v))
}

// RepoID applies equality check predicate on the "repo_id" field. It's identical to RepoIDEQ.
func RepoID(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRepoID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// GitProjectIDEQ applies the EQ predicate on the "git_project_id" field.
func GitProjectIDEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitProjectID, v))
}

// GitProjectIDNEQ applies the NEQ predicate on the "git_project_id" field.
func GitProjectIDNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitProjectID, v))
}

// GitProjectIDIn applies the In predicate on the "git_project_id" field.
func GitProjectIDIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitProjectID, vs...))
}

// GitProjectIDNotIn applies the NotIn predicate on the "git_project_id" field.
func GitProjectIDNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitProjectID, vs...))
}

// GitProjectIDGT applies the GT predicate on the "git_project_id" field.
func GitProjectIDGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitProjectID, v))
}

// GitProjectIDGTE applies the GTE predicate on the "git_project_id" field.
func GitProjectIDGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitProjectID, v))
}

// GitProjectIDLT applies the LT predicate on the "git_project_id" field.
func GitProjectIDLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitProjectID, v))
}

// GitProjectIDLTE applies the LTE predicate on the "git_project_id" field.
func GitProjectIDLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitProjectID, v))
}

// GitProjectIDIsNil applies the IsNil predicate on the "git_project_id" field.
func GitProjectIDIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldGitProjectID))
}

// GitProjectIDNotNil applies the NotNil predicate on the "git_project_id" field.
func GitProjectIDNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldGitProjectID))
}

// GitBranchEQ applies the EQ predicate on the "git_branch" field.
func GitBranchEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitBranch, v))
}

// GitBranchNEQ applies the NEQ predicate on the "git_branch" field.
func GitBranchNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitBranch, v))
}

// GitBranchIn applies the In predicate on the "git_branch" field.
func GitBranchIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitBranch, vs...))
}

// GitBranchNotIn applies the NotIn predicate on the "git_branch" field.
func GitBranchNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitBranch, vs...))
}

// GitBranchGT applies the GT predicate on the "git_branch" field.
func GitBranchGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitBranch, v))
}

// GitBranchGTE applies the GTE predicate on the "git_branch" field.
func GitBranchGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitBranch, v))
}

// GitBranchLT applies the LT predicate on the "git_branch" field.
func GitBranchLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitBranch, v))
}

// GitBranchLTE applies the LTE predicate on the "git_branch" field.
func GitBranchLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitBranch, v))
}

// GitBranchContains applies the Contains predicate on the "git_branch" field.
func GitBranchContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGitBranch, v))
}

// GitBranchHasPrefix applies the HasPrefix predicate on the "git_branch" field.
func GitBranchHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGitBranch, v))
}

// GitBranchHasSuffix applies the HasSuffix predicate on the "git_branch" field.
func GitBranchHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGitBranch, v))
}

// GitBranchIsNil applies the IsNil predicate on the "git_branch" field.
func GitBranchIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldGitBranch))
}

// GitBranchNotNil applies the NotNil predicate on the "git_branch" field.
func GitBranchNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldGitBranch))
}

// GitBranchEqualFold applies the EqualFold predicate on the "git_branch" field.
func GitBranchEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGitBranch, v))
}

// GitBranchContainsFold applies the ContainsFold predicate on the "git_branch" field.
func GitBranchContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGitBranch, v))
}

// GitCommitEQ applies the EQ predicate on the "git_commit" field.
func GitCommitEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommit, v))
}

// GitCommitNEQ applies the NEQ predicate on the "git_commit" field.
func GitCommitNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitCommit, v))
}

// GitCommitIn applies the In predicate on the "git_commit" field.
func GitCommitIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitCommit, vs...))
}

// GitCommitNotIn applies the NotIn predicate on the "git_commit" field.
func GitCommitNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitCommit, vs...))
}

// GitCommitGT applies the GT predicate on the "git_commit" field.
func GitCommitGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitCommit, v))
}

// GitCommitGTE applies the GTE predicate on the "git_commit" field.
func GitCommitGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitCommit, v))
}

// GitCommitLT applies the LT predicate on the "git_commit" field.
func GitCommitLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitCommit, v))
}

// GitCommitLTE applies the LTE predicate on the "git_commit" field.
func GitCommitLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitCommit, v))
}

// GitCommitContains applies the Contains predicate on the "git_commit" field.
func GitCommitContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGitCommit, v))
}

// GitCommitHasPrefix applies the HasPrefix predicate on the "git_commit" field.
func GitCommitHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGitCommit, v))
}

// GitCommitHasSuffix applies the HasSuffix predicate on the "git_commit" field.
func GitCommitHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGitCommit, v))
}

// GitCommitIsNil applies the IsNil predicate on the "git_commit" field.
func GitCommitIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldGitCommit))
}

// GitCommitNotNil applies the NotNil predicate on the "git_commit" field.
func GitCommitNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldGitCommit))
}

// GitCommitEqualFold applies the EqualFold predicate on the "git_commit" field.
func GitCommitEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGitCommit, v))
}

// GitCommitContainsFold applies the ContainsFold predicate on the "git_commit" field.
func GitCommitContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGitCommit, v))
}

// ConfigEQ applies the EQ predicate on the "config" field.
func ConfigEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldConfig, v))
}

// ConfigNEQ applies the NEQ predicate on the "config" field.
func ConfigNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldConfig, v))
}

// ConfigIn applies the In predicate on the "config" field.
func ConfigIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldConfig, vs...))
}

// ConfigNotIn applies the NotIn predicate on the "config" field.
func ConfigNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldConfig, vs...))
}

// ConfigGT applies the GT predicate on the "config" field.
func ConfigGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldConfig, v))
}

// ConfigGTE applies the GTE predicate on the "config" field.
func ConfigGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldConfig, v))
}

// ConfigLT applies the LT predicate on the "config" field.
func ConfigLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldConfig, v))
}

// ConfigLTE applies the LTE predicate on the "config" field.
func ConfigLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldConfig, v))
}

// ConfigContains applies the Contains predicate on the "config" field.
func ConfigContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldConfig, v))
}

// ConfigHasPrefix applies the HasPrefix predicate on the "config" field.
func ConfigHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldConfig, v))
}

// ConfigHasSuffix applies the HasSuffix predicate on the "config" field.
func ConfigHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldConfig, v))
}

// ConfigIsNil applies the IsNil predicate on the "config" field.
func ConfigIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldConfig))
}

// ConfigNotNil applies the NotNil predicate on the "config" field.
func ConfigNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldConfig))
}

// ConfigEqualFold applies the EqualFold predicate on the "config" field.
func ConfigEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldConfig, v))
}

// ConfigContainsFold applies the ContainsFold predicate on the "config" field.
func ConfigContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldConfig, v))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldCreator, v))
}

// OverrideValuesEQ applies the EQ predicate on the "override_values" field.
func OverrideValuesEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldOverrideValues, v))
}

// OverrideValuesNEQ applies the NEQ predicate on the "override_values" field.
func OverrideValuesNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldOverrideValues, v))
}

// OverrideValuesIn applies the In predicate on the "override_values" field.
func OverrideValuesIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldOverrideValues, vs...))
}

// OverrideValuesNotIn applies the NotIn predicate on the "override_values" field.
func OverrideValuesNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldOverrideValues, vs...))
}

// OverrideValuesGT applies the GT predicate on the "override_values" field.
func OverrideValuesGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldOverrideValues, v))
}

// OverrideValuesGTE applies the GTE predicate on the "override_values" field.
func OverrideValuesGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldOverrideValues, v))
}

// OverrideValuesLT applies the LT predicate on the "override_values" field.
func OverrideValuesLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldOverrideValues, v))
}

// OverrideValuesLTE applies the LTE predicate on the "override_values" field.
func OverrideValuesLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldOverrideValues, v))
}

// OverrideValuesContains applies the Contains predicate on the "override_values" field.
func OverrideValuesContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldOverrideValues, v))
}

// OverrideValuesHasPrefix applies the HasPrefix predicate on the "override_values" field.
func OverrideValuesHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldOverrideValues, v))
}

// OverrideValuesHasSuffix applies the HasSuffix predicate on the "override_values" field.
func OverrideValuesHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldOverrideValues, v))
}

// OverrideValuesIsNil applies the IsNil predicate on the "override_values" field.
func OverrideValuesIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldOverrideValues))
}

// OverrideValuesNotNil applies the NotNil predicate on the "override_values" field.
func OverrideValuesNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldOverrideValues))
}

// OverrideValuesEqualFold applies the EqualFold predicate on the "override_values" field.
func OverrideValuesEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldOverrideValues, v))
}

// OverrideValuesContainsFold applies the ContainsFold predicate on the "override_values" field.
func OverrideValuesContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldOverrideValues, v))
}

// DockerImageIsNil applies the IsNil predicate on the "docker_image" field.
func DockerImageIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDockerImage))
}

// DockerImageNotNil applies the NotNil predicate on the "docker_image" field.
func DockerImageNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDockerImage))
}

// PodSelectorsIsNil applies the IsNil predicate on the "pod_selectors" field.
func PodSelectorsIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldPodSelectors))
}

// PodSelectorsNotNil applies the NotNil predicate on the "pod_selectors" field.
func PodSelectorsNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldPodSelectors))
}

// AtomicEQ applies the EQ predicate on the "atomic" field.
func AtomicEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAtomic, v))
}

// AtomicNEQ applies the NEQ predicate on the "atomic" field.
func AtomicNEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldAtomic, v))
}

// DeployStatusEQ applies the EQ predicate on the "deploy_status" field.
func DeployStatusEQ(v types.Deploy) predicate.Project {
	vc := int32(v)
	return predicate.Project(sql.FieldEQ(FieldDeployStatus, vc))
}

// DeployStatusNEQ applies the NEQ predicate on the "deploy_status" field.
func DeployStatusNEQ(v types.Deploy) predicate.Project {
	vc := int32(v)
	return predicate.Project(sql.FieldNEQ(FieldDeployStatus, vc))
}

// DeployStatusIn applies the In predicate on the "deploy_status" field.
func DeployStatusIn(vs ...types.Deploy) predicate.Project {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Project(sql.FieldIn(FieldDeployStatus, v...))
}

// DeployStatusNotIn applies the NotIn predicate on the "deploy_status" field.
func DeployStatusNotIn(vs ...types.Deploy) predicate.Project {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Project(sql.FieldNotIn(FieldDeployStatus, v...))
}

// DeployStatusGT applies the GT predicate on the "deploy_status" field.
func DeployStatusGT(v types.Deploy) predicate.Project {
	vc := int32(v)
	return predicate.Project(sql.FieldGT(FieldDeployStatus, vc))
}

// DeployStatusGTE applies the GTE predicate on the "deploy_status" field.
func DeployStatusGTE(v types.Deploy) predicate.Project {
	vc := int32(v)
	return predicate.Project(sql.FieldGTE(FieldDeployStatus, vc))
}

// DeployStatusLT applies the LT predicate on the "deploy_status" field.
func DeployStatusLT(v types.Deploy) predicate.Project {
	vc := int32(v)
	return predicate.Project(sql.FieldLT(FieldDeployStatus, vc))
}

// DeployStatusLTE applies the LTE predicate on the "deploy_status" field.
func DeployStatusLTE(v types.Deploy) predicate.Project {
	vc := int32(v)
	return predicate.Project(sql.FieldLTE(FieldDeployStatus, vc))
}

// EnvValuesIsNil applies the IsNil predicate on the "env_values" field.
func EnvValuesIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldEnvValues))
}

// EnvValuesNotNil applies the NotNil predicate on the "env_values" field.
func EnvValuesNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldEnvValues))
}

// ExtraValuesIsNil applies the IsNil predicate on the "extra_values" field.
func ExtraValuesIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldExtraValues))
}

// ExtraValuesNotNil applies the NotNil predicate on the "extra_values" field.
func ExtraValuesNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldExtraValues))
}

// FinalExtraValuesIsNil applies the IsNil predicate on the "final_extra_values" field.
func FinalExtraValuesIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldFinalExtraValues))
}

// FinalExtraValuesNotNil applies the NotNil predicate on the "final_extra_values" field.
func FinalExtraValuesNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldFinalExtraValues))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldVersion, v))
}

// ConfigTypeEQ applies the EQ predicate on the "config_type" field.
func ConfigTypeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldConfigType, v))
}

// ConfigTypeNEQ applies the NEQ predicate on the "config_type" field.
func ConfigTypeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldConfigType, v))
}

// ConfigTypeIn applies the In predicate on the "config_type" field.
func ConfigTypeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldConfigType, vs...))
}

// ConfigTypeNotIn applies the NotIn predicate on the "config_type" field.
func ConfigTypeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldConfigType, vs...))
}

// ConfigTypeGT applies the GT predicate on the "config_type" field.
func ConfigTypeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldConfigType, v))
}

// ConfigTypeGTE applies the GTE predicate on the "config_type" field.
func ConfigTypeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldConfigType, v))
}

// ConfigTypeLT applies the LT predicate on the "config_type" field.
func ConfigTypeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldConfigType, v))
}

// ConfigTypeLTE applies the LTE predicate on the "config_type" field.
func ConfigTypeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldConfigType, v))
}

// ConfigTypeContains applies the Contains predicate on the "config_type" field.
func ConfigTypeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldConfigType, v))
}

// ConfigTypeHasPrefix applies the HasPrefix predicate on the "config_type" field.
func ConfigTypeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldConfigType, v))
}

// ConfigTypeHasSuffix applies the HasSuffix predicate on the "config_type" field.
func ConfigTypeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldConfigType, v))
}

// ConfigTypeIsNil applies the IsNil predicate on the "config_type" field.
func ConfigTypeIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldConfigType))
}

// ConfigTypeNotNil applies the NotNil predicate on the "config_type" field.
func ConfigTypeNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldConfigType))
}

// ConfigTypeEqualFold applies the EqualFold predicate on the "config_type" field.
func ConfigTypeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldConfigType, v))
}

// ConfigTypeContainsFold applies the ContainsFold predicate on the "config_type" field.
func ConfigTypeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldConfigType, v))
}

// ManifestIsNil applies the IsNil predicate on the "manifest" field.
func ManifestIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldManifest))
}

// ManifestNotNil applies the NotNil predicate on the "manifest" field.
func ManifestNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldManifest))
}

// GitCommitWebURLEQ applies the EQ predicate on the "git_commit_web_url" field.
func GitCommitWebURLEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitWebURL, v))
}

// GitCommitWebURLNEQ applies the NEQ predicate on the "git_commit_web_url" field.
func GitCommitWebURLNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitCommitWebURL, v))
}

// GitCommitWebURLIn applies the In predicate on the "git_commit_web_url" field.
func GitCommitWebURLIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitCommitWebURL, vs...))
}

// GitCommitWebURLNotIn applies the NotIn predicate on the "git_commit_web_url" field.
func GitCommitWebURLNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitCommitWebURL, vs...))
}

// GitCommitWebURLGT applies the GT predicate on the "git_commit_web_url" field.
func GitCommitWebURLGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitCommitWebURL, v))
}

// GitCommitWebURLGTE applies the GTE predicate on the "git_commit_web_url" field.
func GitCommitWebURLGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitCommitWebURL, v))
}

// GitCommitWebURLLT applies the LT predicate on the "git_commit_web_url" field.
func GitCommitWebURLLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitCommitWebURL, v))
}

// GitCommitWebURLLTE applies the LTE predicate on the "git_commit_web_url" field.
func GitCommitWebURLLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitCommitWebURL, v))
}

// GitCommitWebURLContains applies the Contains predicate on the "git_commit_web_url" field.
func GitCommitWebURLContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGitCommitWebURL, v))
}

// GitCommitWebURLHasPrefix applies the HasPrefix predicate on the "git_commit_web_url" field.
func GitCommitWebURLHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGitCommitWebURL, v))
}

// GitCommitWebURLHasSuffix applies the HasSuffix predicate on the "git_commit_web_url" field.
func GitCommitWebURLHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGitCommitWebURL, v))
}

// GitCommitWebURLEqualFold applies the EqualFold predicate on the "git_commit_web_url" field.
func GitCommitWebURLEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGitCommitWebURL, v))
}

// GitCommitWebURLContainsFold applies the ContainsFold predicate on the "git_commit_web_url" field.
func GitCommitWebURLContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGitCommitWebURL, v))
}

// GitCommitTitleEQ applies the EQ predicate on the "git_commit_title" field.
func GitCommitTitleEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitTitle, v))
}

// GitCommitTitleNEQ applies the NEQ predicate on the "git_commit_title" field.
func GitCommitTitleNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitCommitTitle, v))
}

// GitCommitTitleIn applies the In predicate on the "git_commit_title" field.
func GitCommitTitleIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitCommitTitle, vs...))
}

// GitCommitTitleNotIn applies the NotIn predicate on the "git_commit_title" field.
func GitCommitTitleNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitCommitTitle, vs...))
}

// GitCommitTitleGT applies the GT predicate on the "git_commit_title" field.
func GitCommitTitleGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitCommitTitle, v))
}

// GitCommitTitleGTE applies the GTE predicate on the "git_commit_title" field.
func GitCommitTitleGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitCommitTitle, v))
}

// GitCommitTitleLT applies the LT predicate on the "git_commit_title" field.
func GitCommitTitleLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitCommitTitle, v))
}

// GitCommitTitleLTE applies the LTE predicate on the "git_commit_title" field.
func GitCommitTitleLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitCommitTitle, v))
}

// GitCommitTitleContains applies the Contains predicate on the "git_commit_title" field.
func GitCommitTitleContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGitCommitTitle, v))
}

// GitCommitTitleHasPrefix applies the HasPrefix predicate on the "git_commit_title" field.
func GitCommitTitleHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGitCommitTitle, v))
}

// GitCommitTitleHasSuffix applies the HasSuffix predicate on the "git_commit_title" field.
func GitCommitTitleHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGitCommitTitle, v))
}

// GitCommitTitleEqualFold applies the EqualFold predicate on the "git_commit_title" field.
func GitCommitTitleEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGitCommitTitle, v))
}

// GitCommitTitleContainsFold applies the ContainsFold predicate on the "git_commit_title" field.
func GitCommitTitleContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGitCommitTitle, v))
}

// GitCommitAuthorEQ applies the EQ predicate on the "git_commit_author" field.
func GitCommitAuthorEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitAuthor, v))
}

// GitCommitAuthorNEQ applies the NEQ predicate on the "git_commit_author" field.
func GitCommitAuthorNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitCommitAuthor, v))
}

// GitCommitAuthorIn applies the In predicate on the "git_commit_author" field.
func GitCommitAuthorIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitCommitAuthor, vs...))
}

// GitCommitAuthorNotIn applies the NotIn predicate on the "git_commit_author" field.
func GitCommitAuthorNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitCommitAuthor, vs...))
}

// GitCommitAuthorGT applies the GT predicate on the "git_commit_author" field.
func GitCommitAuthorGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitCommitAuthor, v))
}

// GitCommitAuthorGTE applies the GTE predicate on the "git_commit_author" field.
func GitCommitAuthorGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitCommitAuthor, v))
}

// GitCommitAuthorLT applies the LT predicate on the "git_commit_author" field.
func GitCommitAuthorLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitCommitAuthor, v))
}

// GitCommitAuthorLTE applies the LTE predicate on the "git_commit_author" field.
func GitCommitAuthorLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitCommitAuthor, v))
}

// GitCommitAuthorContains applies the Contains predicate on the "git_commit_author" field.
func GitCommitAuthorContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGitCommitAuthor, v))
}

// GitCommitAuthorHasPrefix applies the HasPrefix predicate on the "git_commit_author" field.
func GitCommitAuthorHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGitCommitAuthor, v))
}

// GitCommitAuthorHasSuffix applies the HasSuffix predicate on the "git_commit_author" field.
func GitCommitAuthorHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGitCommitAuthor, v))
}

// GitCommitAuthorEqualFold applies the EqualFold predicate on the "git_commit_author" field.
func GitCommitAuthorEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGitCommitAuthor, v))
}

// GitCommitAuthorContainsFold applies the ContainsFold predicate on the "git_commit_author" field.
func GitCommitAuthorContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGitCommitAuthor, v))
}

// GitCommitDateEQ applies the EQ predicate on the "git_commit_date" field.
func GitCommitDateEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGitCommitDate, v))
}

// GitCommitDateNEQ applies the NEQ predicate on the "git_commit_date" field.
func GitCommitDateNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGitCommitDate, v))
}

// GitCommitDateIn applies the In predicate on the "git_commit_date" field.
func GitCommitDateIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGitCommitDate, vs...))
}

// GitCommitDateNotIn applies the NotIn predicate on the "git_commit_date" field.
func GitCommitDateNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGitCommitDate, vs...))
}

// GitCommitDateGT applies the GT predicate on the "git_commit_date" field.
func GitCommitDateGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGitCommitDate, v))
}

// GitCommitDateGTE applies the GTE predicate on the "git_commit_date" field.
func GitCommitDateGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGitCommitDate, v))
}

// GitCommitDateLT applies the LT predicate on the "git_commit_date" field.
func GitCommitDateLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGitCommitDate, v))
}

// GitCommitDateLTE applies the LTE predicate on the "git_commit_date" field.
func GitCommitDateLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGitCommitDate, v))
}

// GitCommitDateIsNil applies the IsNil predicate on the "git_commit_date" field.
func GitCommitDateIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldGitCommitDate))
}

// GitCommitDateNotNil applies the NotNil predicate on the "git_commit_date" field.
func GitCommitDateNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldGitCommitDate))
}

// NamespaceIDEQ applies the EQ predicate on the "namespace_id" field.
func NamespaceIDEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldNamespaceID, v))
}

// NamespaceIDNEQ applies the NEQ predicate on the "namespace_id" field.
func NamespaceIDNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldNamespaceID, v))
}

// NamespaceIDIn applies the In predicate on the "namespace_id" field.
func NamespaceIDIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldNamespaceID, vs...))
}

// NamespaceIDNotIn applies the NotIn predicate on the "namespace_id" field.
func NamespaceIDNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldNamespaceID, vs...))
}

// NamespaceIDIsNil applies the IsNil predicate on the "namespace_id" field.
func NamespaceIDIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldNamespaceID))
}

// NamespaceIDNotNil applies the NotNil predicate on the "namespace_id" field.
func NamespaceIDNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldNamespaceID))
}

// RepoIDEQ applies the EQ predicate on the "repo_id" field.
func RepoIDEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRepoID, v))
}

// RepoIDNEQ applies the NEQ predicate on the "repo_id" field.
func RepoIDNEQ(v int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldRepoID, v))
}

// RepoIDIn applies the In predicate on the "repo_id" field.
func RepoIDIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldRepoID, vs...))
}

// RepoIDNotIn applies the NotIn predicate on the "repo_id" field.
func RepoIDNotIn(vs ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldRepoID, vs...))
}

// RepoIDIsNil applies the IsNil predicate on the "repo_id" field.
func RepoIDIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldRepoID))
}

// RepoIDNotNil applies the NotNil predicate on the "repo_id" field.
func RepoIDNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldRepoID))
}

// HasChangelogs applies the HasEdge predicate on the "changelogs" edge.
func HasChangelogs() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChangelogsTable, ChangelogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChangelogsWith applies the HasEdge predicate on the "changelogs" edge with a given conditions (other predicates).
func HasChangelogsWith(preds ...predicate.Changelog) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newChangelogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRepo applies the HasEdge predicate on the "repo" edge.
func HasRepo() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepoTable, RepoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepoWith applies the HasEdge predicate on the "repo" edge with a given conditions (other predicates).
func HasRepoWith(preds ...predicate.Repo) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newRepoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNamespace applies the HasEdge predicate on the "namespace" edge.
func HasNamespace() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNamespaceWith applies the HasEdge predicate on the "namespace" edge with a given conditions (other predicates).
func HasNamespaceWith(preds ...predicate.Namespace) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newNamespaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
