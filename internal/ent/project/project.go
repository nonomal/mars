// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/duc-cnzj/mars/api/v5/types"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGitProjectID holds the string denoting the git_project_id field in the database.
	FieldGitProjectID = "git_project_id"
	// FieldGitBranch holds the string denoting the git_branch field in the database.
	FieldGitBranch = "git_branch"
	// FieldGitCommit holds the string denoting the git_commit field in the database.
	FieldGitCommit = "git_commit"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldOverrideValues holds the string denoting the override_values field in the database.
	FieldOverrideValues = "override_values"
	// FieldDockerImage holds the string denoting the docker_image field in the database.
	FieldDockerImage = "docker_image"
	// FieldPodSelectors holds the string denoting the pod_selectors field in the database.
	FieldPodSelectors = "pod_selectors"
	// FieldAtomic holds the string denoting the atomic field in the database.
	FieldAtomic = "atomic"
	// FieldDeployStatus holds the string denoting the deploy_status field in the database.
	FieldDeployStatus = "deploy_status"
	// FieldEnvValues holds the string denoting the env_values field in the database.
	FieldEnvValues = "env_values"
	// FieldExtraValues holds the string denoting the extra_values field in the database.
	FieldExtraValues = "extra_values"
	// FieldFinalExtraValues holds the string denoting the final_extra_values field in the database.
	FieldFinalExtraValues = "final_extra_values"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldConfigType holds the string denoting the config_type field in the database.
	FieldConfigType = "config_type"
	// FieldManifest holds the string denoting the manifest field in the database.
	FieldManifest = "manifest"
	// FieldGitCommitWebURL holds the string denoting the git_commit_web_url field in the database.
	FieldGitCommitWebURL = "git_commit_web_url"
	// FieldGitCommitTitle holds the string denoting the git_commit_title field in the database.
	FieldGitCommitTitle = "git_commit_title"
	// FieldGitCommitAuthor holds the string denoting the git_commit_author field in the database.
	FieldGitCommitAuthor = "git_commit_author"
	// FieldGitCommitDate holds the string denoting the git_commit_date field in the database.
	FieldGitCommitDate = "git_commit_date"
	// FieldNamespaceID holds the string denoting the namespace_id field in the database.
	FieldNamespaceID = "namespace_id"
	// FieldRepoID holds the string denoting the repo_id field in the database.
	FieldRepoID = "repo_id"
	// EdgeChangelogs holds the string denoting the changelogs edge name in mutations.
	EdgeChangelogs = "changelogs"
	// EdgeRepo holds the string denoting the repo edge name in mutations.
	EdgeRepo = "repo"
	// EdgeNamespace holds the string denoting the namespace edge name in mutations.
	EdgeNamespace = "namespace"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// ChangelogsTable is the table that holds the changelogs relation/edge.
	ChangelogsTable = "changelogs"
	// ChangelogsInverseTable is the table name for the Changelog entity.
	// It exists in this package in order to avoid circular dependency with the "changelog" package.
	ChangelogsInverseTable = "changelogs"
	// ChangelogsColumn is the table column denoting the changelogs relation/edge.
	ChangelogsColumn = "project_id"
	// RepoTable is the table that holds the repo relation/edge.
	RepoTable = "projects"
	// RepoInverseTable is the table name for the Repo entity.
	// It exists in this package in order to avoid circular dependency with the "repo" package.
	RepoInverseTable = "repos"
	// RepoColumn is the table column denoting the repo relation/edge.
	RepoColumn = "repo_id"
	// NamespaceTable is the table that holds the namespace relation/edge.
	NamespaceTable = "projects"
	// NamespaceInverseTable is the table name for the Namespace entity.
	// It exists in this package in order to avoid circular dependency with the "namespace" package.
	NamespaceInverseTable = "namespaces"
	// NamespaceColumn is the table column denoting the namespace relation/edge.
	NamespaceColumn = "namespace_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldGitProjectID,
	FieldGitBranch,
	FieldGitCommit,
	FieldConfig,
	FieldCreator,
	FieldOverrideValues,
	FieldDockerImage,
	FieldPodSelectors,
	FieldAtomic,
	FieldDeployStatus,
	FieldEnvValues,
	FieldExtraValues,
	FieldFinalExtraValues,
	FieldVersion,
	FieldConfigType,
	FieldManifest,
	FieldGitCommitWebURL,
	FieldGitCommitTitle,
	FieldGitCommitAuthor,
	FieldGitCommitDate,
	FieldNamespaceID,
	FieldRepoID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/duc-cnzj/mars/v5/internal/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// GitBranchValidator is a validator for the "git_branch" field. It is called by the builders before save.
	GitBranchValidator func(string) error
	// GitCommitValidator is a validator for the "git_commit" field. It is called by the builders before save.
	GitCommitValidator func(string) error
	// DefaultAtomic holds the default value on creation for the "atomic" field.
	DefaultAtomic bool
	// DefaultDeployStatus holds the default value on creation for the "deploy_status" field.
	DefaultDeployStatus types.Deploy
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// ConfigTypeValidator is a validator for the "config_type" field. It is called by the builders before save.
	ConfigTypeValidator func(string) error
	// DefaultGitCommitWebURL holds the default value on creation for the "git_commit_web_url" field.
	DefaultGitCommitWebURL string
	// GitCommitWebURLValidator is a validator for the "git_commit_web_url" field. It is called by the builders before save.
	GitCommitWebURLValidator func(string) error
	// DefaultGitCommitTitle holds the default value on creation for the "git_commit_title" field.
	DefaultGitCommitTitle string
	// GitCommitTitleValidator is a validator for the "git_commit_title" field. It is called by the builders before save.
	GitCommitTitleValidator func(string) error
	// DefaultGitCommitAuthor holds the default value on creation for the "git_commit_author" field.
	DefaultGitCommitAuthor string
	// GitCommitAuthorValidator is a validator for the "git_commit_author" field. It is called by the builders before save.
	GitCommitAuthorValidator func(string) error
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGitProjectID orders the results by the git_project_id field.
func ByGitProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitProjectID, opts...).ToFunc()
}

// ByGitBranch orders the results by the git_branch field.
func ByGitBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitBranch, opts...).ToFunc()
}

// ByGitCommit orders the results by the git_commit field.
func ByGitCommit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommit, opts...).ToFunc()
}

// ByConfig orders the results by the config field.
func ByConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfig, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByOverrideValues orders the results by the override_values field.
func ByOverrideValues(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverrideValues, opts...).ToFunc()
}

// ByAtomic orders the results by the atomic field.
func ByAtomic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAtomic, opts...).ToFunc()
}

// ByDeployStatus orders the results by the deploy_status field.
func ByDeployStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeployStatus, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByConfigType orders the results by the config_type field.
func ByConfigType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigType, opts...).ToFunc()
}

// ByGitCommitWebURL orders the results by the git_commit_web_url field.
func ByGitCommitWebURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitWebURL, opts...).ToFunc()
}

// ByGitCommitTitle orders the results by the git_commit_title field.
func ByGitCommitTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitTitle, opts...).ToFunc()
}

// ByGitCommitAuthor orders the results by the git_commit_author field.
func ByGitCommitAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitAuthor, opts...).ToFunc()
}

// ByGitCommitDate orders the results by the git_commit_date field.
func ByGitCommitDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitDate, opts...).ToFunc()
}

// ByNamespaceID orders the results by the namespace_id field.
func ByNamespaceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNamespaceID, opts...).ToFunc()
}

// ByRepoID orders the results by the repo_id field.
func ByRepoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoID, opts...).ToFunc()
}

// ByChangelogsCount orders the results by changelogs count.
func ByChangelogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChangelogsStep(), opts...)
	}
}

// ByChangelogs orders the results by changelogs terms.
func ByChangelogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangelogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepoField orders the results by repo field.
func ByRepoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepoStep(), sql.OrderByField(field, opts...))
	}
}

// ByNamespaceField orders the results by namespace field.
func ByNamespaceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNamespaceStep(), sql.OrderByField(field, opts...))
	}
}
func newChangelogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangelogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChangelogsTable, ChangelogsColumn),
	)
}
func newRepoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RepoTable, RepoColumn),
	)
}
func newNamespaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NamespaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
	)
}
