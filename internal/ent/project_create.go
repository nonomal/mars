// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/api/v5/websocket"
	"github.com/duc-cnzj/mars/v5/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v5/internal/ent/namespace"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
	"github.com/duc-cnzj/mars/v5/internal/ent/repo"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProjectCreate) SetDeletedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDeletedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableName(s *string) *ProjectCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetGitProjectID sets the "git_project_id" field.
func (pc *ProjectCreate) SetGitProjectID(i int) *ProjectCreate {
	pc.mutation.SetGitProjectID(i)
	return pc
}

// SetNillableGitProjectID sets the "git_project_id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGitProjectID(i *int) *ProjectCreate {
	if i != nil {
		pc.SetGitProjectID(*i)
	}
	return pc
}

// SetGitBranch sets the "git_branch" field.
func (pc *ProjectCreate) SetGitBranch(s string) *ProjectCreate {
	pc.mutation.SetGitBranch(s)
	return pc
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGitBranch(s *string) *ProjectCreate {
	if s != nil {
		pc.SetGitBranch(*s)
	}
	return pc
}

// SetGitCommit sets the "git_commit" field.
func (pc *ProjectCreate) SetGitCommit(s string) *ProjectCreate {
	pc.mutation.SetGitCommit(s)
	return pc
}

// SetNillableGitCommit sets the "git_commit" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGitCommit(s *string) *ProjectCreate {
	if s != nil {
		pc.SetGitCommit(*s)
	}
	return pc
}

// SetConfig sets the "config" field.
func (pc *ProjectCreate) SetConfig(s string) *ProjectCreate {
	pc.mutation.SetConfig(s)
	return pc
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableConfig(s *string) *ProjectCreate {
	if s != nil {
		pc.SetConfig(*s)
	}
	return pc
}

// SetCreator sets the "creator" field.
func (pc *ProjectCreate) SetCreator(s string) *ProjectCreate {
	pc.mutation.SetCreator(s)
	return pc
}

// SetOverrideValues sets the "override_values" field.
func (pc *ProjectCreate) SetOverrideValues(s string) *ProjectCreate {
	pc.mutation.SetOverrideValues(s)
	return pc
}

// SetNillableOverrideValues sets the "override_values" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableOverrideValues(s *string) *ProjectCreate {
	if s != nil {
		pc.SetOverrideValues(*s)
	}
	return pc
}

// SetDockerImage sets the "docker_image" field.
func (pc *ProjectCreate) SetDockerImage(s []string) *ProjectCreate {
	pc.mutation.SetDockerImage(s)
	return pc
}

// SetPodSelectors sets the "pod_selectors" field.
func (pc *ProjectCreate) SetPodSelectors(s []string) *ProjectCreate {
	pc.mutation.SetPodSelectors(s)
	return pc
}

// SetAtomic sets the "atomic" field.
func (pc *ProjectCreate) SetAtomic(b bool) *ProjectCreate {
	pc.mutation.SetAtomic(b)
	return pc
}

// SetNillableAtomic sets the "atomic" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableAtomic(b *bool) *ProjectCreate {
	if b != nil {
		pc.SetAtomic(*b)
	}
	return pc
}

// SetDeployStatus sets the "deploy_status" field.
func (pc *ProjectCreate) SetDeployStatus(t types.Deploy) *ProjectCreate {
	pc.mutation.SetDeployStatus(t)
	return pc
}

// SetNillableDeployStatus sets the "deploy_status" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableDeployStatus(t *types.Deploy) *ProjectCreate {
	if t != nil {
		pc.SetDeployStatus(*t)
	}
	return pc
}

// SetEnvValues sets the "env_values" field.
func (pc *ProjectCreate) SetEnvValues(tv []*types.KeyValue) *ProjectCreate {
	pc.mutation.SetEnvValues(tv)
	return pc
}

// SetExtraValues sets the "extra_values" field.
func (pc *ProjectCreate) SetExtraValues(wv []*websocket.ExtraValue) *ProjectCreate {
	pc.mutation.SetExtraValues(wv)
	return pc
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (pc *ProjectCreate) SetFinalExtraValues(wv []*websocket.ExtraValue) *ProjectCreate {
	pc.mutation.SetFinalExtraValues(wv)
	return pc
}

// SetVersion sets the "version" field.
func (pc *ProjectCreate) SetVersion(i int) *ProjectCreate {
	pc.mutation.SetVersion(i)
	return pc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableVersion(i *int) *ProjectCreate {
	if i != nil {
		pc.SetVersion(*i)
	}
	return pc
}

// SetConfigType sets the "config_type" field.
func (pc *ProjectCreate) SetConfigType(s string) *ProjectCreate {
	pc.mutation.SetConfigType(s)
	return pc
}

// SetNillableConfigType sets the "config_type" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableConfigType(s *string) *ProjectCreate {
	if s != nil {
		pc.SetConfigType(*s)
	}
	return pc
}

// SetManifest sets the "manifest" field.
func (pc *ProjectCreate) SetManifest(s []string) *ProjectCreate {
	pc.mutation.SetManifest(s)
	return pc
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (pc *ProjectCreate) SetGitCommitWebURL(s string) *ProjectCreate {
	pc.mutation.SetGitCommitWebURL(s)
	return pc
}

// SetNillableGitCommitWebURL sets the "git_commit_web_url" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGitCommitWebURL(s *string) *ProjectCreate {
	if s != nil {
		pc.SetGitCommitWebURL(*s)
	}
	return pc
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (pc *ProjectCreate) SetGitCommitTitle(s string) *ProjectCreate {
	pc.mutation.SetGitCommitTitle(s)
	return pc
}

// SetNillableGitCommitTitle sets the "git_commit_title" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGitCommitTitle(s *string) *ProjectCreate {
	if s != nil {
		pc.SetGitCommitTitle(*s)
	}
	return pc
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (pc *ProjectCreate) SetGitCommitAuthor(s string) *ProjectCreate {
	pc.mutation.SetGitCommitAuthor(s)
	return pc
}

// SetNillableGitCommitAuthor sets the "git_commit_author" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGitCommitAuthor(s *string) *ProjectCreate {
	if s != nil {
		pc.SetGitCommitAuthor(*s)
	}
	return pc
}

// SetGitCommitDate sets the "git_commit_date" field.
func (pc *ProjectCreate) SetGitCommitDate(t time.Time) *ProjectCreate {
	pc.mutation.SetGitCommitDate(t)
	return pc
}

// SetNillableGitCommitDate sets the "git_commit_date" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableGitCommitDate(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetGitCommitDate(*t)
	}
	return pc
}

// SetNamespaceID sets the "namespace_id" field.
func (pc *ProjectCreate) SetNamespaceID(i int) *ProjectCreate {
	pc.mutation.SetNamespaceID(i)
	return pc
}

// SetNillableNamespaceID sets the "namespace_id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableNamespaceID(i *int) *ProjectCreate {
	if i != nil {
		pc.SetNamespaceID(*i)
	}
	return pc
}

// SetRepoID sets the "repo_id" field.
func (pc *ProjectCreate) SetRepoID(i int) *ProjectCreate {
	pc.mutation.SetRepoID(i)
	return pc
}

// SetNillableRepoID sets the "repo_id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableRepoID(i *int) *ProjectCreate {
	if i != nil {
		pc.SetRepoID(*i)
	}
	return pc
}

// AddChangelogIDs adds the "changelogs" edge to the Changelog entity by IDs.
func (pc *ProjectCreate) AddChangelogIDs(ids ...int) *ProjectCreate {
	pc.mutation.AddChangelogIDs(ids...)
	return pc
}

// AddChangelogs adds the "changelogs" edges to the Changelog entity.
func (pc *ProjectCreate) AddChangelogs(c ...*Changelog) *ProjectCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddChangelogIDs(ids...)
}

// SetRepo sets the "repo" edge to the Repo entity.
func (pc *ProjectCreate) SetRepo(r *Repo) *ProjectCreate {
	return pc.SetRepoID(r.ID)
}

// SetNamespace sets the "namespace" edge to the Namespace entity.
func (pc *ProjectCreate) SetNamespace(n *Namespace) *ProjectCreate {
	return pc.SetNamespaceID(n.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if project.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized project.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if project.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized project.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Name(); !ok {
		v := project.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.Atomic(); !ok {
		v := project.DefaultAtomic
		pc.mutation.SetAtomic(v)
	}
	if _, ok := pc.mutation.DeployStatus(); !ok {
		v := project.DefaultDeployStatus
		pc.mutation.SetDeployStatus(v)
	}
	if _, ok := pc.mutation.Version(); !ok {
		v := project.DefaultVersion
		pc.mutation.SetVersion(v)
	}
	if _, ok := pc.mutation.GitCommitWebURL(); !ok {
		v := project.DefaultGitCommitWebURL
		pc.mutation.SetGitCommitWebURL(v)
	}
	if _, ok := pc.mutation.GitCommitTitle(); !ok {
		v := project.DefaultGitCommitTitle
		pc.mutation.SetGitCommitTitle(v)
	}
	if _, ok := pc.mutation.GitCommitAuthor(); !ok {
		v := project.DefaultGitCommitAuthor
		pc.mutation.SetGitCommitAuthor(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.GitBranch(); ok {
		if err := project.GitBranchValidator(v); err != nil {
			return &ValidationError{Name: "git_branch", err: fmt.Errorf(`ent: validator failed for field "Project.git_branch": %w`, err)}
		}
	}
	if v, ok := pc.mutation.GitCommit(); ok {
		if err := project.GitCommitValidator(v); err != nil {
			return &ValidationError{Name: "git_commit", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required field "Project.creator"`)}
	}
	if _, ok := pc.mutation.Atomic(); !ok {
		return &ValidationError{Name: "atomic", err: errors.New(`ent: missing required field "Project.atomic"`)}
	}
	if _, ok := pc.mutation.DeployStatus(); !ok {
		return &ValidationError{Name: "deploy_status", err: errors.New(`ent: missing required field "Project.deploy_status"`)}
	}
	if _, ok := pc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Project.version"`)}
	}
	if v, ok := pc.mutation.ConfigType(); ok {
		if err := project.ConfigTypeValidator(v); err != nil {
			return &ValidationError{Name: "config_type", err: fmt.Errorf(`ent: validator failed for field "Project.config_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GitCommitWebURL(); !ok {
		return &ValidationError{Name: "git_commit_web_url", err: errors.New(`ent: missing required field "Project.git_commit_web_url"`)}
	}
	if v, ok := pc.mutation.GitCommitWebURL(); ok {
		if err := project.GitCommitWebURLValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_web_url", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_web_url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GitCommitTitle(); !ok {
		return &ValidationError{Name: "git_commit_title", err: errors.New(`ent: missing required field "Project.git_commit_title"`)}
	}
	if v, ok := pc.mutation.GitCommitTitle(); ok {
		if err := project.GitCommitTitleValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_title", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GitCommitAuthor(); !ok {
		return &ValidationError{Name: "git_commit_author", err: errors.New(`ent: missing required field "Project.git_commit_author"`)}
	}
	if v, ok := pc.mutation.GitCommitAuthor(); ok {
		if err := project.GitCommitAuthorValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_author", err: fmt.Errorf(`ent: validator failed for field "Project.git_commit_author": %w`, err)}
		}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(project.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.GitProjectID(); ok {
		_spec.SetField(project.FieldGitProjectID, field.TypeInt, value)
		_node.GitProjectID = value
	}
	if value, ok := pc.mutation.GitBranch(); ok {
		_spec.SetField(project.FieldGitBranch, field.TypeString, value)
		_node.GitBranch = value
	}
	if value, ok := pc.mutation.GitCommit(); ok {
		_spec.SetField(project.FieldGitCommit, field.TypeString, value)
		_node.GitCommit = value
	}
	if value, ok := pc.mutation.Config(); ok {
		_spec.SetField(project.FieldConfig, field.TypeString, value)
		_node.Config = value
	}
	if value, ok := pc.mutation.Creator(); ok {
		_spec.SetField(project.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := pc.mutation.OverrideValues(); ok {
		_spec.SetField(project.FieldOverrideValues, field.TypeString, value)
		_node.OverrideValues = value
	}
	if value, ok := pc.mutation.DockerImage(); ok {
		_spec.SetField(project.FieldDockerImage, field.TypeJSON, value)
		_node.DockerImage = value
	}
	if value, ok := pc.mutation.PodSelectors(); ok {
		_spec.SetField(project.FieldPodSelectors, field.TypeJSON, value)
		_node.PodSelectors = value
	}
	if value, ok := pc.mutation.Atomic(); ok {
		_spec.SetField(project.FieldAtomic, field.TypeBool, value)
		_node.Atomic = value
	}
	if value, ok := pc.mutation.DeployStatus(); ok {
		_spec.SetField(project.FieldDeployStatus, field.TypeInt32, value)
		_node.DeployStatus = value
	}
	if value, ok := pc.mutation.EnvValues(); ok {
		_spec.SetField(project.FieldEnvValues, field.TypeJSON, value)
		_node.EnvValues = value
	}
	if value, ok := pc.mutation.ExtraValues(); ok {
		_spec.SetField(project.FieldExtraValues, field.TypeJSON, value)
		_node.ExtraValues = value
	}
	if value, ok := pc.mutation.FinalExtraValues(); ok {
		_spec.SetField(project.FieldFinalExtraValues, field.TypeJSON, value)
		_node.FinalExtraValues = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.SetField(project.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := pc.mutation.ConfigType(); ok {
		_spec.SetField(project.FieldConfigType, field.TypeString, value)
		_node.ConfigType = value
	}
	if value, ok := pc.mutation.Manifest(); ok {
		_spec.SetField(project.FieldManifest, field.TypeJSON, value)
		_node.Manifest = value
	}
	if value, ok := pc.mutation.GitCommitWebURL(); ok {
		_spec.SetField(project.FieldGitCommitWebURL, field.TypeString, value)
		_node.GitCommitWebURL = value
	}
	if value, ok := pc.mutation.GitCommitTitle(); ok {
		_spec.SetField(project.FieldGitCommitTitle, field.TypeString, value)
		_node.GitCommitTitle = value
	}
	if value, ok := pc.mutation.GitCommitAuthor(); ok {
		_spec.SetField(project.FieldGitCommitAuthor, field.TypeString, value)
		_node.GitCommitAuthor = value
	}
	if value, ok := pc.mutation.GitCommitDate(); ok {
		_spec.SetField(project.FieldGitCommitDate, field.TypeTime, value)
		_node.GitCommitDate = &value
	}
	if nodes := pc.mutation.ChangelogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChangelogsTable,
			Columns: []string{project.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RepoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.RepoTable,
			Columns: []string{project.RepoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RepoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.NamespaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.NamespaceTable,
			Columns: []string{project.NamespaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(namespace.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NamespaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertOne {
	pc.conflict = opts
	return &ProjectUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflictColumns(columns ...string) *ProjectUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertOne{
		create: pc,
	}
}

type (
	// ProjectUpsertOne is the builder for "upsert"-ing
	//  one Project node.
	ProjectUpsertOne struct {
		create *ProjectCreate
	}

	// ProjectUpsert is the "OnConflict" setter.
	ProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsert) SetUpdatedAt(v time.Time) *ProjectUpsert {
	u.Set(project.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateUpdatedAt() *ProjectUpsert {
	u.SetExcluded(project.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProjectUpsert) SetDeletedAt(v time.Time) *ProjectUpsert {
	u.Set(project.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDeletedAt() *ProjectUpsert {
	u.SetExcluded(project.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProjectUpsert) ClearDeletedAt() *ProjectUpsert {
	u.SetNull(project.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *ProjectUpsert) SetName(v string) *ProjectUpsert {
	u.Set(project.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateName() *ProjectUpsert {
	u.SetExcluded(project.FieldName)
	return u
}

// SetGitProjectID sets the "git_project_id" field.
func (u *ProjectUpsert) SetGitProjectID(v int) *ProjectUpsert {
	u.Set(project.FieldGitProjectID, v)
	return u
}

// UpdateGitProjectID sets the "git_project_id" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateGitProjectID() *ProjectUpsert {
	u.SetExcluded(project.FieldGitProjectID)
	return u
}

// AddGitProjectID adds v to the "git_project_id" field.
func (u *ProjectUpsert) AddGitProjectID(v int) *ProjectUpsert {
	u.Add(project.FieldGitProjectID, v)
	return u
}

// ClearGitProjectID clears the value of the "git_project_id" field.
func (u *ProjectUpsert) ClearGitProjectID() *ProjectUpsert {
	u.SetNull(project.FieldGitProjectID)
	return u
}

// SetGitBranch sets the "git_branch" field.
func (u *ProjectUpsert) SetGitBranch(v string) *ProjectUpsert {
	u.Set(project.FieldGitBranch, v)
	return u
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateGitBranch() *ProjectUpsert {
	u.SetExcluded(project.FieldGitBranch)
	return u
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ProjectUpsert) ClearGitBranch() *ProjectUpsert {
	u.SetNull(project.FieldGitBranch)
	return u
}

// SetGitCommit sets the "git_commit" field.
func (u *ProjectUpsert) SetGitCommit(v string) *ProjectUpsert {
	u.Set(project.FieldGitCommit, v)
	return u
}

// UpdateGitCommit sets the "git_commit" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateGitCommit() *ProjectUpsert {
	u.SetExcluded(project.FieldGitCommit)
	return u
}

// ClearGitCommit clears the value of the "git_commit" field.
func (u *ProjectUpsert) ClearGitCommit() *ProjectUpsert {
	u.SetNull(project.FieldGitCommit)
	return u
}

// SetConfig sets the "config" field.
func (u *ProjectUpsert) SetConfig(v string) *ProjectUpsert {
	u.Set(project.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateConfig() *ProjectUpsert {
	u.SetExcluded(project.FieldConfig)
	return u
}

// ClearConfig clears the value of the "config" field.
func (u *ProjectUpsert) ClearConfig() *ProjectUpsert {
	u.SetNull(project.FieldConfig)
	return u
}

// SetCreator sets the "creator" field.
func (u *ProjectUpsert) SetCreator(v string) *ProjectUpsert {
	u.Set(project.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateCreator() *ProjectUpsert {
	u.SetExcluded(project.FieldCreator)
	return u
}

// SetOverrideValues sets the "override_values" field.
func (u *ProjectUpsert) SetOverrideValues(v string) *ProjectUpsert {
	u.Set(project.FieldOverrideValues, v)
	return u
}

// UpdateOverrideValues sets the "override_values" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateOverrideValues() *ProjectUpsert {
	u.SetExcluded(project.FieldOverrideValues)
	return u
}

// ClearOverrideValues clears the value of the "override_values" field.
func (u *ProjectUpsert) ClearOverrideValues() *ProjectUpsert {
	u.SetNull(project.FieldOverrideValues)
	return u
}

// SetDockerImage sets the "docker_image" field.
func (u *ProjectUpsert) SetDockerImage(v []string) *ProjectUpsert {
	u.Set(project.FieldDockerImage, v)
	return u
}

// UpdateDockerImage sets the "docker_image" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDockerImage() *ProjectUpsert {
	u.SetExcluded(project.FieldDockerImage)
	return u
}

// ClearDockerImage clears the value of the "docker_image" field.
func (u *ProjectUpsert) ClearDockerImage() *ProjectUpsert {
	u.SetNull(project.FieldDockerImage)
	return u
}

// SetPodSelectors sets the "pod_selectors" field.
func (u *ProjectUpsert) SetPodSelectors(v []string) *ProjectUpsert {
	u.Set(project.FieldPodSelectors, v)
	return u
}

// UpdatePodSelectors sets the "pod_selectors" field to the value that was provided on create.
func (u *ProjectUpsert) UpdatePodSelectors() *ProjectUpsert {
	u.SetExcluded(project.FieldPodSelectors)
	return u
}

// ClearPodSelectors clears the value of the "pod_selectors" field.
func (u *ProjectUpsert) ClearPodSelectors() *ProjectUpsert {
	u.SetNull(project.FieldPodSelectors)
	return u
}

// SetAtomic sets the "atomic" field.
func (u *ProjectUpsert) SetAtomic(v bool) *ProjectUpsert {
	u.Set(project.FieldAtomic, v)
	return u
}

// UpdateAtomic sets the "atomic" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateAtomic() *ProjectUpsert {
	u.SetExcluded(project.FieldAtomic)
	return u
}

// SetDeployStatus sets the "deploy_status" field.
func (u *ProjectUpsert) SetDeployStatus(v types.Deploy) *ProjectUpsert {
	u.Set(project.FieldDeployStatus, v)
	return u
}

// UpdateDeployStatus sets the "deploy_status" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDeployStatus() *ProjectUpsert {
	u.SetExcluded(project.FieldDeployStatus)
	return u
}

// AddDeployStatus adds v to the "deploy_status" field.
func (u *ProjectUpsert) AddDeployStatus(v types.Deploy) *ProjectUpsert {
	u.Add(project.FieldDeployStatus, v)
	return u
}

// SetEnvValues sets the "env_values" field.
func (u *ProjectUpsert) SetEnvValues(v []*types.KeyValue) *ProjectUpsert {
	u.Set(project.FieldEnvValues, v)
	return u
}

// UpdateEnvValues sets the "env_values" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateEnvValues() *ProjectUpsert {
	u.SetExcluded(project.FieldEnvValues)
	return u
}

// ClearEnvValues clears the value of the "env_values" field.
func (u *ProjectUpsert) ClearEnvValues() *ProjectUpsert {
	u.SetNull(project.FieldEnvValues)
	return u
}

// SetExtraValues sets the "extra_values" field.
func (u *ProjectUpsert) SetExtraValues(v []*websocket.ExtraValue) *ProjectUpsert {
	u.Set(project.FieldExtraValues, v)
	return u
}

// UpdateExtraValues sets the "extra_values" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateExtraValues() *ProjectUpsert {
	u.SetExcluded(project.FieldExtraValues)
	return u
}

// ClearExtraValues clears the value of the "extra_values" field.
func (u *ProjectUpsert) ClearExtraValues() *ProjectUpsert {
	u.SetNull(project.FieldExtraValues)
	return u
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (u *ProjectUpsert) SetFinalExtraValues(v []*websocket.ExtraValue) *ProjectUpsert {
	u.Set(project.FieldFinalExtraValues, v)
	return u
}

// UpdateFinalExtraValues sets the "final_extra_values" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateFinalExtraValues() *ProjectUpsert {
	u.SetExcluded(project.FieldFinalExtraValues)
	return u
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (u *ProjectUpsert) ClearFinalExtraValues() *ProjectUpsert {
	u.SetNull(project.FieldFinalExtraValues)
	return u
}

// SetVersion sets the "version" field.
func (u *ProjectUpsert) SetVersion(v int) *ProjectUpsert {
	u.Set(project.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateVersion() *ProjectUpsert {
	u.SetExcluded(project.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *ProjectUpsert) AddVersion(v int) *ProjectUpsert {
	u.Add(project.FieldVersion, v)
	return u
}

// SetConfigType sets the "config_type" field.
func (u *ProjectUpsert) SetConfigType(v string) *ProjectUpsert {
	u.Set(project.FieldConfigType, v)
	return u
}

// UpdateConfigType sets the "config_type" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateConfigType() *ProjectUpsert {
	u.SetExcluded(project.FieldConfigType)
	return u
}

// ClearConfigType clears the value of the "config_type" field.
func (u *ProjectUpsert) ClearConfigType() *ProjectUpsert {
	u.SetNull(project.FieldConfigType)
	return u
}

// SetManifest sets the "manifest" field.
func (u *ProjectUpsert) SetManifest(v []string) *ProjectUpsert {
	u.Set(project.FieldManifest, v)
	return u
}

// UpdateManifest sets the "manifest" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateManifest() *ProjectUpsert {
	u.SetExcluded(project.FieldManifest)
	return u
}

// ClearManifest clears the value of the "manifest" field.
func (u *ProjectUpsert) ClearManifest() *ProjectUpsert {
	u.SetNull(project.FieldManifest)
	return u
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (u *ProjectUpsert) SetGitCommitWebURL(v string) *ProjectUpsert {
	u.Set(project.FieldGitCommitWebURL, v)
	return u
}

// UpdateGitCommitWebURL sets the "git_commit_web_url" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateGitCommitWebURL() *ProjectUpsert {
	u.SetExcluded(project.FieldGitCommitWebURL)
	return u
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (u *ProjectUpsert) SetGitCommitTitle(v string) *ProjectUpsert {
	u.Set(project.FieldGitCommitTitle, v)
	return u
}

// UpdateGitCommitTitle sets the "git_commit_title" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateGitCommitTitle() *ProjectUpsert {
	u.SetExcluded(project.FieldGitCommitTitle)
	return u
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (u *ProjectUpsert) SetGitCommitAuthor(v string) *ProjectUpsert {
	u.Set(project.FieldGitCommitAuthor, v)
	return u
}

// UpdateGitCommitAuthor sets the "git_commit_author" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateGitCommitAuthor() *ProjectUpsert {
	u.SetExcluded(project.FieldGitCommitAuthor)
	return u
}

// SetGitCommitDate sets the "git_commit_date" field.
func (u *ProjectUpsert) SetGitCommitDate(v time.Time) *ProjectUpsert {
	u.Set(project.FieldGitCommitDate, v)
	return u
}

// UpdateGitCommitDate sets the "git_commit_date" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateGitCommitDate() *ProjectUpsert {
	u.SetExcluded(project.FieldGitCommitDate)
	return u
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (u *ProjectUpsert) ClearGitCommitDate() *ProjectUpsert {
	u.SetNull(project.FieldGitCommitDate)
	return u
}

// SetNamespaceID sets the "namespace_id" field.
func (u *ProjectUpsert) SetNamespaceID(v int) *ProjectUpsert {
	u.Set(project.FieldNamespaceID, v)
	return u
}

// UpdateNamespaceID sets the "namespace_id" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateNamespaceID() *ProjectUpsert {
	u.SetExcluded(project.FieldNamespaceID)
	return u
}

// ClearNamespaceID clears the value of the "namespace_id" field.
func (u *ProjectUpsert) ClearNamespaceID() *ProjectUpsert {
	u.SetNull(project.FieldNamespaceID)
	return u
}

// SetRepoID sets the "repo_id" field.
func (u *ProjectUpsert) SetRepoID(v int) *ProjectUpsert {
	u.Set(project.FieldRepoID, v)
	return u
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateRepoID() *ProjectUpsert {
	u.SetExcluded(project.FieldRepoID)
	return u
}

// ClearRepoID clears the value of the "repo_id" field.
func (u *ProjectUpsert) ClearRepoID() *ProjectUpsert {
	u.SetNull(project.FieldRepoID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProjectUpsertOne) UpdateNewValues() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(project.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectUpsertOne) Ignore() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertOne) DoNothing() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreate.OnConflict
// documentation for more info.
func (u *ProjectUpsertOne) Update(set func(*ProjectUpsert)) *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertOne) SetUpdatedAt(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateUpdatedAt() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProjectUpsertOne) SetDeletedAt(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDeletedAt() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProjectUpsertOne) ClearDeletedAt() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertOne) SetName(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateName() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetGitProjectID sets the "git_project_id" field.
func (u *ProjectUpsertOne) SetGitProjectID(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitProjectID(v)
	})
}

// AddGitProjectID adds v to the "git_project_id" field.
func (u *ProjectUpsertOne) AddGitProjectID(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddGitProjectID(v)
	})
}

// UpdateGitProjectID sets the "git_project_id" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateGitProjectID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitProjectID()
	})
}

// ClearGitProjectID clears the value of the "git_project_id" field.
func (u *ProjectUpsertOne) ClearGitProjectID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitProjectID()
	})
}

// SetGitBranch sets the "git_branch" field.
func (u *ProjectUpsertOne) SetGitBranch(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitBranch(v)
	})
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateGitBranch() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitBranch()
	})
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ProjectUpsertOne) ClearGitBranch() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitBranch()
	})
}

// SetGitCommit sets the "git_commit" field.
func (u *ProjectUpsertOne) SetGitCommit(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommit(v)
	})
}

// UpdateGitCommit sets the "git_commit" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateGitCommit() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommit()
	})
}

// ClearGitCommit clears the value of the "git_commit" field.
func (u *ProjectUpsertOne) ClearGitCommit() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitCommit()
	})
}

// SetConfig sets the "config" field.
func (u *ProjectUpsertOne) SetConfig(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateConfig() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *ProjectUpsertOne) ClearConfig() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearConfig()
	})
}

// SetCreator sets the "creator" field.
func (u *ProjectUpsertOne) SetCreator(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateCreator() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCreator()
	})
}

// SetOverrideValues sets the "override_values" field.
func (u *ProjectUpsertOne) SetOverrideValues(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOverrideValues(v)
	})
}

// UpdateOverrideValues sets the "override_values" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateOverrideValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOverrideValues()
	})
}

// ClearOverrideValues clears the value of the "override_values" field.
func (u *ProjectUpsertOne) ClearOverrideValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOverrideValues()
	})
}

// SetDockerImage sets the "docker_image" field.
func (u *ProjectUpsertOne) SetDockerImage(v []string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDockerImage(v)
	})
}

// UpdateDockerImage sets the "docker_image" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDockerImage() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDockerImage()
	})
}

// ClearDockerImage clears the value of the "docker_image" field.
func (u *ProjectUpsertOne) ClearDockerImage() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDockerImage()
	})
}

// SetPodSelectors sets the "pod_selectors" field.
func (u *ProjectUpsertOne) SetPodSelectors(v []string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetPodSelectors(v)
	})
}

// UpdatePodSelectors sets the "pod_selectors" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdatePodSelectors() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdatePodSelectors()
	})
}

// ClearPodSelectors clears the value of the "pod_selectors" field.
func (u *ProjectUpsertOne) ClearPodSelectors() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearPodSelectors()
	})
}

// SetAtomic sets the "atomic" field.
func (u *ProjectUpsertOne) SetAtomic(v bool) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetAtomic(v)
	})
}

// UpdateAtomic sets the "atomic" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateAtomic() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateAtomic()
	})
}

// SetDeployStatus sets the "deploy_status" field.
func (u *ProjectUpsertOne) SetDeployStatus(v types.Deploy) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDeployStatus(v)
	})
}

// AddDeployStatus adds v to the "deploy_status" field.
func (u *ProjectUpsertOne) AddDeployStatus(v types.Deploy) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDeployStatus(v)
	})
}

// UpdateDeployStatus sets the "deploy_status" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDeployStatus() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDeployStatus()
	})
}

// SetEnvValues sets the "env_values" field.
func (u *ProjectUpsertOne) SetEnvValues(v []*types.KeyValue) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetEnvValues(v)
	})
}

// UpdateEnvValues sets the "env_values" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateEnvValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateEnvValues()
	})
}

// ClearEnvValues clears the value of the "env_values" field.
func (u *ProjectUpsertOne) ClearEnvValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearEnvValues()
	})
}

// SetExtraValues sets the "extra_values" field.
func (u *ProjectUpsertOne) SetExtraValues(v []*websocket.ExtraValue) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetExtraValues(v)
	})
}

// UpdateExtraValues sets the "extra_values" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateExtraValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateExtraValues()
	})
}

// ClearExtraValues clears the value of the "extra_values" field.
func (u *ProjectUpsertOne) ClearExtraValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearExtraValues()
	})
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (u *ProjectUpsertOne) SetFinalExtraValues(v []*websocket.ExtraValue) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetFinalExtraValues(v)
	})
}

// UpdateFinalExtraValues sets the "final_extra_values" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateFinalExtraValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateFinalExtraValues()
	})
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (u *ProjectUpsertOne) ClearFinalExtraValues() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearFinalExtraValues()
	})
}

// SetVersion sets the "version" field.
func (u *ProjectUpsertOne) SetVersion(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ProjectUpsertOne) AddVersion(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateVersion() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateVersion()
	})
}

// SetConfigType sets the "config_type" field.
func (u *ProjectUpsertOne) SetConfigType(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetConfigType(v)
	})
}

// UpdateConfigType sets the "config_type" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateConfigType() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateConfigType()
	})
}

// ClearConfigType clears the value of the "config_type" field.
func (u *ProjectUpsertOne) ClearConfigType() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearConfigType()
	})
}

// SetManifest sets the "manifest" field.
func (u *ProjectUpsertOne) SetManifest(v []string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetManifest(v)
	})
}

// UpdateManifest sets the "manifest" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateManifest() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateManifest()
	})
}

// ClearManifest clears the value of the "manifest" field.
func (u *ProjectUpsertOne) ClearManifest() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearManifest()
	})
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (u *ProjectUpsertOne) SetGitCommitWebURL(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitWebURL(v)
	})
}

// UpdateGitCommitWebURL sets the "git_commit_web_url" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateGitCommitWebURL() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitWebURL()
	})
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (u *ProjectUpsertOne) SetGitCommitTitle(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitTitle(v)
	})
}

// UpdateGitCommitTitle sets the "git_commit_title" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateGitCommitTitle() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitTitle()
	})
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (u *ProjectUpsertOne) SetGitCommitAuthor(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitAuthor(v)
	})
}

// UpdateGitCommitAuthor sets the "git_commit_author" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateGitCommitAuthor() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitAuthor()
	})
}

// SetGitCommitDate sets the "git_commit_date" field.
func (u *ProjectUpsertOne) SetGitCommitDate(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitDate(v)
	})
}

// UpdateGitCommitDate sets the "git_commit_date" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateGitCommitDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitDate()
	})
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (u *ProjectUpsertOne) ClearGitCommitDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitCommitDate()
	})
}

// SetNamespaceID sets the "namespace_id" field.
func (u *ProjectUpsertOne) SetNamespaceID(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetNamespaceID(v)
	})
}

// UpdateNamespaceID sets the "namespace_id" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateNamespaceID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateNamespaceID()
	})
}

// ClearNamespaceID clears the value of the "namespace_id" field.
func (u *ProjectUpsertOne) ClearNamespaceID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearNamespaceID()
	})
}

// SetRepoID sets the "repo_id" field.
func (u *ProjectUpsertOne) SetRepoID(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRepoID(v)
	})
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateRepoID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRepoID()
	})
}

// ClearRepoID clears the value of the "repo_id" field.
func (u *ProjectUpsertOne) ClearRepoID() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRepoID()
	})
}

// Exec executes the query.
func (u *ProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertBulk {
	pcb.conflict = opts
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflictColumns(columns ...string) *ProjectUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// ProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Project nodes.
type ProjectUpsertBulk struct {
	create *ProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProjectUpsertBulk) UpdateNewValues() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(project.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectUpsertBulk) Ignore() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertBulk) DoNothing() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectUpsertBulk) Update(set func(*ProjectUpsert)) *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProjectUpsertBulk) SetUpdatedAt(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateUpdatedAt() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProjectUpsertBulk) SetDeletedAt(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDeletedAt() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ProjectUpsertBulk) ClearDeletedAt() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertBulk) SetName(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateName() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetGitProjectID sets the "git_project_id" field.
func (u *ProjectUpsertBulk) SetGitProjectID(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitProjectID(v)
	})
}

// AddGitProjectID adds v to the "git_project_id" field.
func (u *ProjectUpsertBulk) AddGitProjectID(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddGitProjectID(v)
	})
}

// UpdateGitProjectID sets the "git_project_id" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateGitProjectID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitProjectID()
	})
}

// ClearGitProjectID clears the value of the "git_project_id" field.
func (u *ProjectUpsertBulk) ClearGitProjectID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitProjectID()
	})
}

// SetGitBranch sets the "git_branch" field.
func (u *ProjectUpsertBulk) SetGitBranch(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitBranch(v)
	})
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateGitBranch() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitBranch()
	})
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ProjectUpsertBulk) ClearGitBranch() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitBranch()
	})
}

// SetGitCommit sets the "git_commit" field.
func (u *ProjectUpsertBulk) SetGitCommit(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommit(v)
	})
}

// UpdateGitCommit sets the "git_commit" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateGitCommit() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommit()
	})
}

// ClearGitCommit clears the value of the "git_commit" field.
func (u *ProjectUpsertBulk) ClearGitCommit() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitCommit()
	})
}

// SetConfig sets the "config" field.
func (u *ProjectUpsertBulk) SetConfig(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateConfig() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *ProjectUpsertBulk) ClearConfig() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearConfig()
	})
}

// SetCreator sets the "creator" field.
func (u *ProjectUpsertBulk) SetCreator(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateCreator() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateCreator()
	})
}

// SetOverrideValues sets the "override_values" field.
func (u *ProjectUpsertBulk) SetOverrideValues(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetOverrideValues(v)
	})
}

// UpdateOverrideValues sets the "override_values" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateOverrideValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateOverrideValues()
	})
}

// ClearOverrideValues clears the value of the "override_values" field.
func (u *ProjectUpsertBulk) ClearOverrideValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearOverrideValues()
	})
}

// SetDockerImage sets the "docker_image" field.
func (u *ProjectUpsertBulk) SetDockerImage(v []string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDockerImage(v)
	})
}

// UpdateDockerImage sets the "docker_image" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDockerImage() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDockerImage()
	})
}

// ClearDockerImage clears the value of the "docker_image" field.
func (u *ProjectUpsertBulk) ClearDockerImage() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearDockerImage()
	})
}

// SetPodSelectors sets the "pod_selectors" field.
func (u *ProjectUpsertBulk) SetPodSelectors(v []string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetPodSelectors(v)
	})
}

// UpdatePodSelectors sets the "pod_selectors" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdatePodSelectors() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdatePodSelectors()
	})
}

// ClearPodSelectors clears the value of the "pod_selectors" field.
func (u *ProjectUpsertBulk) ClearPodSelectors() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearPodSelectors()
	})
}

// SetAtomic sets the "atomic" field.
func (u *ProjectUpsertBulk) SetAtomic(v bool) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetAtomic(v)
	})
}

// UpdateAtomic sets the "atomic" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateAtomic() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateAtomic()
	})
}

// SetDeployStatus sets the "deploy_status" field.
func (u *ProjectUpsertBulk) SetDeployStatus(v types.Deploy) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDeployStatus(v)
	})
}

// AddDeployStatus adds v to the "deploy_status" field.
func (u *ProjectUpsertBulk) AddDeployStatus(v types.Deploy) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddDeployStatus(v)
	})
}

// UpdateDeployStatus sets the "deploy_status" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDeployStatus() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDeployStatus()
	})
}

// SetEnvValues sets the "env_values" field.
func (u *ProjectUpsertBulk) SetEnvValues(v []*types.KeyValue) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetEnvValues(v)
	})
}

// UpdateEnvValues sets the "env_values" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateEnvValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateEnvValues()
	})
}

// ClearEnvValues clears the value of the "env_values" field.
func (u *ProjectUpsertBulk) ClearEnvValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearEnvValues()
	})
}

// SetExtraValues sets the "extra_values" field.
func (u *ProjectUpsertBulk) SetExtraValues(v []*websocket.ExtraValue) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetExtraValues(v)
	})
}

// UpdateExtraValues sets the "extra_values" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateExtraValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateExtraValues()
	})
}

// ClearExtraValues clears the value of the "extra_values" field.
func (u *ProjectUpsertBulk) ClearExtraValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearExtraValues()
	})
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (u *ProjectUpsertBulk) SetFinalExtraValues(v []*websocket.ExtraValue) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetFinalExtraValues(v)
	})
}

// UpdateFinalExtraValues sets the "final_extra_values" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateFinalExtraValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateFinalExtraValues()
	})
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (u *ProjectUpsertBulk) ClearFinalExtraValues() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearFinalExtraValues()
	})
}

// SetVersion sets the "version" field.
func (u *ProjectUpsertBulk) SetVersion(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ProjectUpsertBulk) AddVersion(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateVersion() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateVersion()
	})
}

// SetConfigType sets the "config_type" field.
func (u *ProjectUpsertBulk) SetConfigType(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetConfigType(v)
	})
}

// UpdateConfigType sets the "config_type" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateConfigType() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateConfigType()
	})
}

// ClearConfigType clears the value of the "config_type" field.
func (u *ProjectUpsertBulk) ClearConfigType() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearConfigType()
	})
}

// SetManifest sets the "manifest" field.
func (u *ProjectUpsertBulk) SetManifest(v []string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetManifest(v)
	})
}

// UpdateManifest sets the "manifest" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateManifest() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateManifest()
	})
}

// ClearManifest clears the value of the "manifest" field.
func (u *ProjectUpsertBulk) ClearManifest() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearManifest()
	})
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (u *ProjectUpsertBulk) SetGitCommitWebURL(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitWebURL(v)
	})
}

// UpdateGitCommitWebURL sets the "git_commit_web_url" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateGitCommitWebURL() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitWebURL()
	})
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (u *ProjectUpsertBulk) SetGitCommitTitle(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitTitle(v)
	})
}

// UpdateGitCommitTitle sets the "git_commit_title" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateGitCommitTitle() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitTitle()
	})
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (u *ProjectUpsertBulk) SetGitCommitAuthor(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitAuthor(v)
	})
}

// UpdateGitCommitAuthor sets the "git_commit_author" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateGitCommitAuthor() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitAuthor()
	})
}

// SetGitCommitDate sets the "git_commit_date" field.
func (u *ProjectUpsertBulk) SetGitCommitDate(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetGitCommitDate(v)
	})
}

// UpdateGitCommitDate sets the "git_commit_date" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateGitCommitDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateGitCommitDate()
	})
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (u *ProjectUpsertBulk) ClearGitCommitDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearGitCommitDate()
	})
}

// SetNamespaceID sets the "namespace_id" field.
func (u *ProjectUpsertBulk) SetNamespaceID(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetNamespaceID(v)
	})
}

// UpdateNamespaceID sets the "namespace_id" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateNamespaceID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateNamespaceID()
	})
}

// ClearNamespaceID clears the value of the "namespace_id" field.
func (u *ProjectUpsertBulk) ClearNamespaceID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearNamespaceID()
	})
}

// SetRepoID sets the "repo_id" field.
func (u *ProjectUpsertBulk) SetRepoID(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetRepoID(v)
	})
}

// UpdateRepoID sets the "repo_id" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateRepoID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateRepoID()
	})
}

// ClearRepoID clears the value of the "repo_id" field.
func (u *ProjectUpsertBulk) ClearRepoID() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearRepoID()
	})
}

// Exec executes the query.
func (u *ProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
