// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v5/mars"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
	"github.com/duc-cnzj/mars/v5/internal/ent/repo"
)

// RepoUpdate is the builder for updating Repo entities.
type RepoUpdate struct {
	config
	hooks    []Hook
	mutation *RepoMutation
}

// Where appends a list predicates to the RepoUpdate builder.
func (ru *RepoUpdate) Where(ps ...predicate.Repo) *RepoUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RepoUpdate) SetUpdatedAt(t time.Time) *RepoUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RepoUpdate) SetDeletedAt(t time.Time) *RepoUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableDeletedAt(t *time.Time) *RepoUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RepoUpdate) ClearDeletedAt() *RepoUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetName sets the "name" field.
func (ru *RepoUpdate) SetName(s string) *RepoUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableName(s *string) *RepoUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetDefaultBranch sets the "default_branch" field.
func (ru *RepoUpdate) SetDefaultBranch(s string) *RepoUpdate {
	ru.mutation.SetDefaultBranch(s)
	return ru
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableDefaultBranch(s *string) *RepoUpdate {
	if s != nil {
		ru.SetDefaultBranch(*s)
	}
	return ru
}

// ClearDefaultBranch clears the value of the "default_branch" field.
func (ru *RepoUpdate) ClearDefaultBranch() *RepoUpdate {
	ru.mutation.ClearDefaultBranch()
	return ru
}

// SetGitProjectName sets the "git_project_name" field.
func (ru *RepoUpdate) SetGitProjectName(s string) *RepoUpdate {
	ru.mutation.SetGitProjectName(s)
	return ru
}

// SetNillableGitProjectName sets the "git_project_name" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableGitProjectName(s *string) *RepoUpdate {
	if s != nil {
		ru.SetGitProjectName(*s)
	}
	return ru
}

// ClearGitProjectName clears the value of the "git_project_name" field.
func (ru *RepoUpdate) ClearGitProjectName() *RepoUpdate {
	ru.mutation.ClearGitProjectName()
	return ru
}

// SetGitProjectID sets the "git_project_id" field.
func (ru *RepoUpdate) SetGitProjectID(i int32) *RepoUpdate {
	ru.mutation.ResetGitProjectID()
	ru.mutation.SetGitProjectID(i)
	return ru
}

// SetNillableGitProjectID sets the "git_project_id" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableGitProjectID(i *int32) *RepoUpdate {
	if i != nil {
		ru.SetGitProjectID(*i)
	}
	return ru
}

// AddGitProjectID adds i to the "git_project_id" field.
func (ru *RepoUpdate) AddGitProjectID(i int32) *RepoUpdate {
	ru.mutation.AddGitProjectID(i)
	return ru
}

// ClearGitProjectID clears the value of the "git_project_id" field.
func (ru *RepoUpdate) ClearGitProjectID() *RepoUpdate {
	ru.mutation.ClearGitProjectID()
	return ru
}

// SetEnabled sets the "enabled" field.
func (ru *RepoUpdate) SetEnabled(b bool) *RepoUpdate {
	ru.mutation.SetEnabled(b)
	return ru
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableEnabled(b *bool) *RepoUpdate {
	if b != nil {
		ru.SetEnabled(*b)
	}
	return ru
}

// SetNeedGitRepo sets the "need_git_repo" field.
func (ru *RepoUpdate) SetNeedGitRepo(b bool) *RepoUpdate {
	ru.mutation.SetNeedGitRepo(b)
	return ru
}

// SetNillableNeedGitRepo sets the "need_git_repo" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableNeedGitRepo(b *bool) *RepoUpdate {
	if b != nil {
		ru.SetNeedGitRepo(*b)
	}
	return ru
}

// SetMarsConfig sets the "mars_config" field.
func (ru *RepoUpdate) SetMarsConfig(m *mars.Config) *RepoUpdate {
	ru.mutation.SetMarsConfig(m)
	return ru
}

// ClearMarsConfig clears the value of the "mars_config" field.
func (ru *RepoUpdate) ClearMarsConfig() *RepoUpdate {
	ru.mutation.ClearMarsConfig()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RepoUpdate) SetDescription(s string) *RepoUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RepoUpdate) SetNillableDescription(s *string) *RepoUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (ru *RepoUpdate) AddProjectIDs(ids ...int) *RepoUpdate {
	ru.mutation.AddProjectIDs(ids...)
	return ru
}

// AddProjects adds the "projects" edges to the Project entity.
func (ru *RepoUpdate) AddProjects(p ...*Project) *RepoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProjectIDs(ids...)
}

// Mutation returns the RepoMutation object of the builder.
func (ru *RepoUpdate) Mutation() *RepoMutation {
	return ru.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (ru *RepoUpdate) ClearProjects() *RepoUpdate {
	ru.mutation.ClearProjects()
	return ru
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (ru *RepoUpdate) RemoveProjectIDs(ids ...int) *RepoUpdate {
	ru.mutation.RemoveProjectIDs(ids...)
	return ru
}

// RemoveProjects removes "projects" edges to Project entities.
func (ru *RepoUpdate) RemoveProjects(p ...*Project) *RepoUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepoUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepoUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepoUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepoUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RepoUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if repo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized repo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := repo.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RepoUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := repo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repo.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.DefaultBranch(); ok {
		if err := repo.DefaultBranchValidator(v); err != nil {
			return &ValidationError{Name: "default_branch", err: fmt.Errorf(`ent: validator failed for field "Repo.default_branch": %w`, err)}
		}
	}
	if v, ok := ru.mutation.MarsConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "mars_config", err: fmt.Errorf(`ent: validator failed for field "Repo.mars_config": %w`, err)}
		}
	}
	return nil
}

func (ru *RepoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(repo.Table, repo.Columns, sqlgraph.NewFieldSpec(repo.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(repo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(repo.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(repo.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(repo.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.DefaultBranch(); ok {
		_spec.SetField(repo.FieldDefaultBranch, field.TypeString, value)
	}
	if ru.mutation.DefaultBranchCleared() {
		_spec.ClearField(repo.FieldDefaultBranch, field.TypeString)
	}
	if value, ok := ru.mutation.GitProjectName(); ok {
		_spec.SetField(repo.FieldGitProjectName, field.TypeString, value)
	}
	if ru.mutation.GitProjectNameCleared() {
		_spec.ClearField(repo.FieldGitProjectName, field.TypeString)
	}
	if value, ok := ru.mutation.GitProjectID(); ok {
		_spec.SetField(repo.FieldGitProjectID, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedGitProjectID(); ok {
		_spec.AddField(repo.FieldGitProjectID, field.TypeInt32, value)
	}
	if ru.mutation.GitProjectIDCleared() {
		_spec.ClearField(repo.FieldGitProjectID, field.TypeInt32)
	}
	if value, ok := ru.mutation.Enabled(); ok {
		_spec.SetField(repo.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ru.mutation.NeedGitRepo(); ok {
		_spec.SetField(repo.FieldNeedGitRepo, field.TypeBool, value)
	}
	if value, ok := ru.mutation.MarsConfig(); ok {
		_spec.SetField(repo.FieldMarsConfig, field.TypeJSON, value)
	}
	if ru.mutation.MarsConfigCleared() {
		_spec.ClearField(repo.FieldMarsConfig, field.TypeJSON)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(repo.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.ProjectsTable,
			Columns: []string{repo.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !ru.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.ProjectsTable,
			Columns: []string{repo.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.ProjectsTable,
			Columns: []string{repo.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepoUpdateOne is the builder for updating a single Repo entity.
type RepoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RepoUpdateOne) SetUpdatedAt(t time.Time) *RepoUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RepoUpdateOne) SetDeletedAt(t time.Time) *RepoUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableDeletedAt(t *time.Time) *RepoUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RepoUpdateOne) ClearDeletedAt() *RepoUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RepoUpdateOne) SetName(s string) *RepoUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableName(s *string) *RepoUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetDefaultBranch sets the "default_branch" field.
func (ruo *RepoUpdateOne) SetDefaultBranch(s string) *RepoUpdateOne {
	ruo.mutation.SetDefaultBranch(s)
	return ruo
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableDefaultBranch(s *string) *RepoUpdateOne {
	if s != nil {
		ruo.SetDefaultBranch(*s)
	}
	return ruo
}

// ClearDefaultBranch clears the value of the "default_branch" field.
func (ruo *RepoUpdateOne) ClearDefaultBranch() *RepoUpdateOne {
	ruo.mutation.ClearDefaultBranch()
	return ruo
}

// SetGitProjectName sets the "git_project_name" field.
func (ruo *RepoUpdateOne) SetGitProjectName(s string) *RepoUpdateOne {
	ruo.mutation.SetGitProjectName(s)
	return ruo
}

// SetNillableGitProjectName sets the "git_project_name" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableGitProjectName(s *string) *RepoUpdateOne {
	if s != nil {
		ruo.SetGitProjectName(*s)
	}
	return ruo
}

// ClearGitProjectName clears the value of the "git_project_name" field.
func (ruo *RepoUpdateOne) ClearGitProjectName() *RepoUpdateOne {
	ruo.mutation.ClearGitProjectName()
	return ruo
}

// SetGitProjectID sets the "git_project_id" field.
func (ruo *RepoUpdateOne) SetGitProjectID(i int32) *RepoUpdateOne {
	ruo.mutation.ResetGitProjectID()
	ruo.mutation.SetGitProjectID(i)
	return ruo
}

// SetNillableGitProjectID sets the "git_project_id" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableGitProjectID(i *int32) *RepoUpdateOne {
	if i != nil {
		ruo.SetGitProjectID(*i)
	}
	return ruo
}

// AddGitProjectID adds i to the "git_project_id" field.
func (ruo *RepoUpdateOne) AddGitProjectID(i int32) *RepoUpdateOne {
	ruo.mutation.AddGitProjectID(i)
	return ruo
}

// ClearGitProjectID clears the value of the "git_project_id" field.
func (ruo *RepoUpdateOne) ClearGitProjectID() *RepoUpdateOne {
	ruo.mutation.ClearGitProjectID()
	return ruo
}

// SetEnabled sets the "enabled" field.
func (ruo *RepoUpdateOne) SetEnabled(b bool) *RepoUpdateOne {
	ruo.mutation.SetEnabled(b)
	return ruo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableEnabled(b *bool) *RepoUpdateOne {
	if b != nil {
		ruo.SetEnabled(*b)
	}
	return ruo
}

// SetNeedGitRepo sets the "need_git_repo" field.
func (ruo *RepoUpdateOne) SetNeedGitRepo(b bool) *RepoUpdateOne {
	ruo.mutation.SetNeedGitRepo(b)
	return ruo
}

// SetNillableNeedGitRepo sets the "need_git_repo" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableNeedGitRepo(b *bool) *RepoUpdateOne {
	if b != nil {
		ruo.SetNeedGitRepo(*b)
	}
	return ruo
}

// SetMarsConfig sets the "mars_config" field.
func (ruo *RepoUpdateOne) SetMarsConfig(m *mars.Config) *RepoUpdateOne {
	ruo.mutation.SetMarsConfig(m)
	return ruo
}

// ClearMarsConfig clears the value of the "mars_config" field.
func (ruo *RepoUpdateOne) ClearMarsConfig() *RepoUpdateOne {
	ruo.mutation.ClearMarsConfig()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RepoUpdateOne) SetDescription(s string) *RepoUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RepoUpdateOne) SetNillableDescription(s *string) *RepoUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (ruo *RepoUpdateOne) AddProjectIDs(ids ...int) *RepoUpdateOne {
	ruo.mutation.AddProjectIDs(ids...)
	return ruo
}

// AddProjects adds the "projects" edges to the Project entity.
func (ruo *RepoUpdateOne) AddProjects(p ...*Project) *RepoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProjectIDs(ids...)
}

// Mutation returns the RepoMutation object of the builder.
func (ruo *RepoUpdateOne) Mutation() *RepoMutation {
	return ruo.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (ruo *RepoUpdateOne) ClearProjects() *RepoUpdateOne {
	ruo.mutation.ClearProjects()
	return ruo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (ruo *RepoUpdateOne) RemoveProjectIDs(ids ...int) *RepoUpdateOne {
	ruo.mutation.RemoveProjectIDs(ids...)
	return ruo
}

// RemoveProjects removes "projects" edges to Project entities.
func (ruo *RepoUpdateOne) RemoveProjects(p ...*Project) *RepoUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProjectIDs(ids...)
}

// Where appends a list predicates to the RepoUpdate builder.
func (ruo *RepoUpdateOne) Where(ps ...predicate.Repo) *RepoUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepoUpdateOne) Select(field string, fields ...string) *RepoUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repo entity.
func (ruo *RepoUpdateOne) Save(ctx context.Context) (*Repo, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepoUpdateOne) SaveX(ctx context.Context) *Repo {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepoUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepoUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RepoUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if repo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized repo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := repo.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RepoUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := repo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repo.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.DefaultBranch(); ok {
		if err := repo.DefaultBranchValidator(v); err != nil {
			return &ValidationError{Name: "default_branch", err: fmt.Errorf(`ent: validator failed for field "Repo.default_branch": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.MarsConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "mars_config", err: fmt.Errorf(`ent: validator failed for field "Repo.mars_config": %w`, err)}
		}
	}
	return nil
}

func (ruo *RepoUpdateOne) sqlSave(ctx context.Context) (_node *Repo, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repo.Table, repo.Columns, sqlgraph.NewFieldSpec(repo.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repo.FieldID)
		for _, f := range fields {
			if !repo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(repo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(repo.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(repo.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(repo.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.DefaultBranch(); ok {
		_spec.SetField(repo.FieldDefaultBranch, field.TypeString, value)
	}
	if ruo.mutation.DefaultBranchCleared() {
		_spec.ClearField(repo.FieldDefaultBranch, field.TypeString)
	}
	if value, ok := ruo.mutation.GitProjectName(); ok {
		_spec.SetField(repo.FieldGitProjectName, field.TypeString, value)
	}
	if ruo.mutation.GitProjectNameCleared() {
		_spec.ClearField(repo.FieldGitProjectName, field.TypeString)
	}
	if value, ok := ruo.mutation.GitProjectID(); ok {
		_spec.SetField(repo.FieldGitProjectID, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedGitProjectID(); ok {
		_spec.AddField(repo.FieldGitProjectID, field.TypeInt32, value)
	}
	if ruo.mutation.GitProjectIDCleared() {
		_spec.ClearField(repo.FieldGitProjectID, field.TypeInt32)
	}
	if value, ok := ruo.mutation.Enabled(); ok {
		_spec.SetField(repo.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.NeedGitRepo(); ok {
		_spec.SetField(repo.FieldNeedGitRepo, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.MarsConfig(); ok {
		_spec.SetField(repo.FieldMarsConfig, field.TypeJSON, value)
	}
	if ruo.mutation.MarsConfigCleared() {
		_spec.ClearField(repo.FieldMarsConfig, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(repo.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.ProjectsTable,
			Columns: []string{repo.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !ruo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.ProjectsTable,
			Columns: []string{repo.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repo.ProjectsTable,
			Columns: []string{repo.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repo{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
