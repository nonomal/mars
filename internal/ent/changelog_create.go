// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/api/v5/websocket"
	"github.com/duc-cnzj/mars/v5/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
)

// ChangelogCreate is the builder for creating a Changelog entity.
type ChangelogCreate struct {
	config
	mutation *ChangelogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChangelogCreate) SetCreatedAt(t time.Time) *ChangelogCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableCreatedAt(t *time.Time) *ChangelogCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChangelogCreate) SetUpdatedAt(t time.Time) *ChangelogCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableUpdatedAt(t *time.Time) *ChangelogCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *ChangelogCreate) SetDeletedAt(t time.Time) *ChangelogCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableDeletedAt(t *time.Time) *ChangelogCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetVersion sets the "version" field.
func (cc *ChangelogCreate) SetVersion(i int) *ChangelogCreate {
	cc.mutation.SetVersion(i)
	return cc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableVersion(i *int) *ChangelogCreate {
	if i != nil {
		cc.SetVersion(*i)
	}
	return cc
}

// SetUsername sets the "username" field.
func (cc *ChangelogCreate) SetUsername(s string) *ChangelogCreate {
	cc.mutation.SetUsername(s)
	return cc
}

// SetConfig sets the "config" field.
func (cc *ChangelogCreate) SetConfig(s string) *ChangelogCreate {
	cc.mutation.SetConfig(s)
	return cc
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableConfig(s *string) *ChangelogCreate {
	if s != nil {
		cc.SetConfig(*s)
	}
	return cc
}

// SetGitBranch sets the "git_branch" field.
func (cc *ChangelogCreate) SetGitBranch(s string) *ChangelogCreate {
	cc.mutation.SetGitBranch(s)
	return cc
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableGitBranch(s *string) *ChangelogCreate {
	if s != nil {
		cc.SetGitBranch(*s)
	}
	return cc
}

// SetGitCommit sets the "git_commit" field.
func (cc *ChangelogCreate) SetGitCommit(s string) *ChangelogCreate {
	cc.mutation.SetGitCommit(s)
	return cc
}

// SetNillableGitCommit sets the "git_commit" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableGitCommit(s *string) *ChangelogCreate {
	if s != nil {
		cc.SetGitCommit(*s)
	}
	return cc
}

// SetDockerImage sets the "docker_image" field.
func (cc *ChangelogCreate) SetDockerImage(s []string) *ChangelogCreate {
	cc.mutation.SetDockerImage(s)
	return cc
}

// SetEnvValues sets the "env_values" field.
func (cc *ChangelogCreate) SetEnvValues(tv []*types.KeyValue) *ChangelogCreate {
	cc.mutation.SetEnvValues(tv)
	return cc
}

// SetExtraValues sets the "extra_values" field.
func (cc *ChangelogCreate) SetExtraValues(wv []*websocket.ExtraValue) *ChangelogCreate {
	cc.mutation.SetExtraValues(wv)
	return cc
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (cc *ChangelogCreate) SetFinalExtraValues(wv []*websocket.ExtraValue) *ChangelogCreate {
	cc.mutation.SetFinalExtraValues(wv)
	return cc
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (cc *ChangelogCreate) SetGitCommitWebURL(s string) *ChangelogCreate {
	cc.mutation.SetGitCommitWebURL(s)
	return cc
}

// SetNillableGitCommitWebURL sets the "git_commit_web_url" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableGitCommitWebURL(s *string) *ChangelogCreate {
	if s != nil {
		cc.SetGitCommitWebURL(*s)
	}
	return cc
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (cc *ChangelogCreate) SetGitCommitTitle(s string) *ChangelogCreate {
	cc.mutation.SetGitCommitTitle(s)
	return cc
}

// SetNillableGitCommitTitle sets the "git_commit_title" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableGitCommitTitle(s *string) *ChangelogCreate {
	if s != nil {
		cc.SetGitCommitTitle(*s)
	}
	return cc
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (cc *ChangelogCreate) SetGitCommitAuthor(s string) *ChangelogCreate {
	cc.mutation.SetGitCommitAuthor(s)
	return cc
}

// SetNillableGitCommitAuthor sets the "git_commit_author" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableGitCommitAuthor(s *string) *ChangelogCreate {
	if s != nil {
		cc.SetGitCommitAuthor(*s)
	}
	return cc
}

// SetGitCommitDate sets the "git_commit_date" field.
func (cc *ChangelogCreate) SetGitCommitDate(t time.Time) *ChangelogCreate {
	cc.mutation.SetGitCommitDate(t)
	return cc
}

// SetNillableGitCommitDate sets the "git_commit_date" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableGitCommitDate(t *time.Time) *ChangelogCreate {
	if t != nil {
		cc.SetGitCommitDate(*t)
	}
	return cc
}

// SetConfigChanged sets the "config_changed" field.
func (cc *ChangelogCreate) SetConfigChanged(b bool) *ChangelogCreate {
	cc.mutation.SetConfigChanged(b)
	return cc
}

// SetNillableConfigChanged sets the "config_changed" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableConfigChanged(b *bool) *ChangelogCreate {
	if b != nil {
		cc.SetConfigChanged(*b)
	}
	return cc
}

// SetProjectID sets the "project_id" field.
func (cc *ChangelogCreate) SetProjectID(i int) *ChangelogCreate {
	cc.mutation.SetProjectID(i)
	return cc
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (cc *ChangelogCreate) SetNillableProjectID(i *int) *ChangelogCreate {
	if i != nil {
		cc.SetProjectID(*i)
	}
	return cc
}

// SetProject sets the "project" edge to the Project entity.
func (cc *ChangelogCreate) SetProject(p *Project) *ChangelogCreate {
	return cc.SetProjectID(p.ID)
}

// Mutation returns the ChangelogMutation object of the builder.
func (cc *ChangelogCreate) Mutation() *ChangelogMutation {
	return cc.mutation
}

// Save creates the Changelog in the database.
func (cc *ChangelogCreate) Save(ctx context.Context) (*Changelog, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChangelogCreate) SaveX(ctx context.Context) *Changelog {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChangelogCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChangelogCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChangelogCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if changelog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized changelog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := changelog.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if changelog.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changelog.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changelog.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Version(); !ok {
		v := changelog.DefaultVersion
		cc.mutation.SetVersion(v)
	}
	if _, ok := cc.mutation.ConfigChanged(); !ok {
		v := changelog.DefaultConfigChanged
		cc.mutation.SetConfigChanged(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChangelogCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Changelog.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Changelog.updated_at"`)}
	}
	if _, ok := cc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Changelog.version"`)}
	}
	if _, ok := cc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Changelog.username"`)}
	}
	if v, ok := cc.mutation.Username(); ok {
		if err := changelog.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Changelog.username": %w`, err)}
		}
	}
	if v, ok := cc.mutation.GitCommitTitle(); ok {
		if err := changelog.GitCommitTitleValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_title", err: fmt.Errorf(`ent: validator failed for field "Changelog.git_commit_title": %w`, err)}
		}
	}
	if v, ok := cc.mutation.GitCommitAuthor(); ok {
		if err := changelog.GitCommitAuthorValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_author", err: fmt.Errorf(`ent: validator failed for field "Changelog.git_commit_author": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ConfigChanged(); !ok {
		return &ValidationError{Name: "config_changed", err: errors.New(`ent: missing required field "Changelog.config_changed"`)}
	}
	return nil
}

func (cc *ChangelogCreate) sqlSave(ctx context.Context) (*Changelog, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChangelogCreate) createSpec() (*Changelog, *sqlgraph.CreateSpec) {
	var (
		_node = &Changelog{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(changelog.Table, sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(changelog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(changelog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(changelog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Version(); ok {
		_spec.SetField(changelog.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := cc.mutation.Username(); ok {
		_spec.SetField(changelog.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := cc.mutation.Config(); ok {
		_spec.SetField(changelog.FieldConfig, field.TypeString, value)
		_node.Config = value
	}
	if value, ok := cc.mutation.GitBranch(); ok {
		_spec.SetField(changelog.FieldGitBranch, field.TypeString, value)
		_node.GitBranch = value
	}
	if value, ok := cc.mutation.GitCommit(); ok {
		_spec.SetField(changelog.FieldGitCommit, field.TypeString, value)
		_node.GitCommit = value
	}
	if value, ok := cc.mutation.DockerImage(); ok {
		_spec.SetField(changelog.FieldDockerImage, field.TypeJSON, value)
		_node.DockerImage = value
	}
	if value, ok := cc.mutation.EnvValues(); ok {
		_spec.SetField(changelog.FieldEnvValues, field.TypeJSON, value)
		_node.EnvValues = value
	}
	if value, ok := cc.mutation.ExtraValues(); ok {
		_spec.SetField(changelog.FieldExtraValues, field.TypeJSON, value)
		_node.ExtraValues = value
	}
	if value, ok := cc.mutation.FinalExtraValues(); ok {
		_spec.SetField(changelog.FieldFinalExtraValues, field.TypeJSON, value)
		_node.FinalExtraValues = value
	}
	if value, ok := cc.mutation.GitCommitWebURL(); ok {
		_spec.SetField(changelog.FieldGitCommitWebURL, field.TypeString, value)
		_node.GitCommitWebURL = value
	}
	if value, ok := cc.mutation.GitCommitTitle(); ok {
		_spec.SetField(changelog.FieldGitCommitTitle, field.TypeString, value)
		_node.GitCommitTitle = value
	}
	if value, ok := cc.mutation.GitCommitAuthor(); ok {
		_spec.SetField(changelog.FieldGitCommitAuthor, field.TypeString, value)
		_node.GitCommitAuthor = value
	}
	if value, ok := cc.mutation.GitCommitDate(); ok {
		_spec.SetField(changelog.FieldGitCommitDate, field.TypeTime, value)
		_node.GitCommitDate = &value
	}
	if value, ok := cc.mutation.ConfigChanged(); ok {
		_spec.SetField(changelog.FieldConfigChanged, field.TypeBool, value)
		_node.ConfigChanged = value
	}
	if nodes := cc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changelog.ProjectTable,
			Columns: []string{changelog.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Changelog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChangelogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ChangelogCreate) OnConflict(opts ...sql.ConflictOption) *ChangelogUpsertOne {
	cc.conflict = opts
	return &ChangelogUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Changelog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChangelogCreate) OnConflictColumns(columns ...string) *ChangelogUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChangelogUpsertOne{
		create: cc,
	}
}

type (
	// ChangelogUpsertOne is the builder for "upsert"-ing
	//  one Changelog node.
	ChangelogUpsertOne struct {
		create *ChangelogCreate
	}

	// ChangelogUpsert is the "OnConflict" setter.
	ChangelogUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ChangelogUpsert) SetUpdatedAt(v time.Time) *ChangelogUpsert {
	u.Set(changelog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateUpdatedAt() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChangelogUpsert) SetDeletedAt(v time.Time) *ChangelogUpsert {
	u.Set(changelog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateDeletedAt() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChangelogUpsert) ClearDeletedAt() *ChangelogUpsert {
	u.SetNull(changelog.FieldDeletedAt)
	return u
}

// SetVersion sets the "version" field.
func (u *ChangelogUpsert) SetVersion(v int) *ChangelogUpsert {
	u.Set(changelog.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateVersion() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *ChangelogUpsert) AddVersion(v int) *ChangelogUpsert {
	u.Add(changelog.FieldVersion, v)
	return u
}

// SetUsername sets the "username" field.
func (u *ChangelogUpsert) SetUsername(v string) *ChangelogUpsert {
	u.Set(changelog.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateUsername() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldUsername)
	return u
}

// SetConfig sets the "config" field.
func (u *ChangelogUpsert) SetConfig(v string) *ChangelogUpsert {
	u.Set(changelog.FieldConfig, v)
	return u
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateConfig() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldConfig)
	return u
}

// ClearConfig clears the value of the "config" field.
func (u *ChangelogUpsert) ClearConfig() *ChangelogUpsert {
	u.SetNull(changelog.FieldConfig)
	return u
}

// SetGitBranch sets the "git_branch" field.
func (u *ChangelogUpsert) SetGitBranch(v string) *ChangelogUpsert {
	u.Set(changelog.FieldGitBranch, v)
	return u
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateGitBranch() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldGitBranch)
	return u
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ChangelogUpsert) ClearGitBranch() *ChangelogUpsert {
	u.SetNull(changelog.FieldGitBranch)
	return u
}

// SetGitCommit sets the "git_commit" field.
func (u *ChangelogUpsert) SetGitCommit(v string) *ChangelogUpsert {
	u.Set(changelog.FieldGitCommit, v)
	return u
}

// UpdateGitCommit sets the "git_commit" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateGitCommit() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldGitCommit)
	return u
}

// ClearGitCommit clears the value of the "git_commit" field.
func (u *ChangelogUpsert) ClearGitCommit() *ChangelogUpsert {
	u.SetNull(changelog.FieldGitCommit)
	return u
}

// SetDockerImage sets the "docker_image" field.
func (u *ChangelogUpsert) SetDockerImage(v []string) *ChangelogUpsert {
	u.Set(changelog.FieldDockerImage, v)
	return u
}

// UpdateDockerImage sets the "docker_image" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateDockerImage() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldDockerImage)
	return u
}

// ClearDockerImage clears the value of the "docker_image" field.
func (u *ChangelogUpsert) ClearDockerImage() *ChangelogUpsert {
	u.SetNull(changelog.FieldDockerImage)
	return u
}

// SetEnvValues sets the "env_values" field.
func (u *ChangelogUpsert) SetEnvValues(v []*types.KeyValue) *ChangelogUpsert {
	u.Set(changelog.FieldEnvValues, v)
	return u
}

// UpdateEnvValues sets the "env_values" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateEnvValues() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldEnvValues)
	return u
}

// ClearEnvValues clears the value of the "env_values" field.
func (u *ChangelogUpsert) ClearEnvValues() *ChangelogUpsert {
	u.SetNull(changelog.FieldEnvValues)
	return u
}

// SetExtraValues sets the "extra_values" field.
func (u *ChangelogUpsert) SetExtraValues(v []*websocket.ExtraValue) *ChangelogUpsert {
	u.Set(changelog.FieldExtraValues, v)
	return u
}

// UpdateExtraValues sets the "extra_values" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateExtraValues() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldExtraValues)
	return u
}

// ClearExtraValues clears the value of the "extra_values" field.
func (u *ChangelogUpsert) ClearExtraValues() *ChangelogUpsert {
	u.SetNull(changelog.FieldExtraValues)
	return u
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (u *ChangelogUpsert) SetFinalExtraValues(v []*websocket.ExtraValue) *ChangelogUpsert {
	u.Set(changelog.FieldFinalExtraValues, v)
	return u
}

// UpdateFinalExtraValues sets the "final_extra_values" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateFinalExtraValues() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldFinalExtraValues)
	return u
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (u *ChangelogUpsert) ClearFinalExtraValues() *ChangelogUpsert {
	u.SetNull(changelog.FieldFinalExtraValues)
	return u
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (u *ChangelogUpsert) SetGitCommitWebURL(v string) *ChangelogUpsert {
	u.Set(changelog.FieldGitCommitWebURL, v)
	return u
}

// UpdateGitCommitWebURL sets the "git_commit_web_url" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateGitCommitWebURL() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldGitCommitWebURL)
	return u
}

// ClearGitCommitWebURL clears the value of the "git_commit_web_url" field.
func (u *ChangelogUpsert) ClearGitCommitWebURL() *ChangelogUpsert {
	u.SetNull(changelog.FieldGitCommitWebURL)
	return u
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (u *ChangelogUpsert) SetGitCommitTitle(v string) *ChangelogUpsert {
	u.Set(changelog.FieldGitCommitTitle, v)
	return u
}

// UpdateGitCommitTitle sets the "git_commit_title" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateGitCommitTitle() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldGitCommitTitle)
	return u
}

// ClearGitCommitTitle clears the value of the "git_commit_title" field.
func (u *ChangelogUpsert) ClearGitCommitTitle() *ChangelogUpsert {
	u.SetNull(changelog.FieldGitCommitTitle)
	return u
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (u *ChangelogUpsert) SetGitCommitAuthor(v string) *ChangelogUpsert {
	u.Set(changelog.FieldGitCommitAuthor, v)
	return u
}

// UpdateGitCommitAuthor sets the "git_commit_author" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateGitCommitAuthor() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldGitCommitAuthor)
	return u
}

// ClearGitCommitAuthor clears the value of the "git_commit_author" field.
func (u *ChangelogUpsert) ClearGitCommitAuthor() *ChangelogUpsert {
	u.SetNull(changelog.FieldGitCommitAuthor)
	return u
}

// SetGitCommitDate sets the "git_commit_date" field.
func (u *ChangelogUpsert) SetGitCommitDate(v time.Time) *ChangelogUpsert {
	u.Set(changelog.FieldGitCommitDate, v)
	return u
}

// UpdateGitCommitDate sets the "git_commit_date" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateGitCommitDate() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldGitCommitDate)
	return u
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (u *ChangelogUpsert) ClearGitCommitDate() *ChangelogUpsert {
	u.SetNull(changelog.FieldGitCommitDate)
	return u
}

// SetConfigChanged sets the "config_changed" field.
func (u *ChangelogUpsert) SetConfigChanged(v bool) *ChangelogUpsert {
	u.Set(changelog.FieldConfigChanged, v)
	return u
}

// UpdateConfigChanged sets the "config_changed" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateConfigChanged() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldConfigChanged)
	return u
}

// SetProjectID sets the "project_id" field.
func (u *ChangelogUpsert) SetProjectID(v int) *ChangelogUpsert {
	u.Set(changelog.FieldProjectID, v)
	return u
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ChangelogUpsert) UpdateProjectID() *ChangelogUpsert {
	u.SetExcluded(changelog.FieldProjectID)
	return u
}

// ClearProjectID clears the value of the "project_id" field.
func (u *ChangelogUpsert) ClearProjectID() *ChangelogUpsert {
	u.SetNull(changelog.FieldProjectID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Changelog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChangelogUpsertOne) UpdateNewValues() *ChangelogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(changelog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Changelog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChangelogUpsertOne) Ignore() *ChangelogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChangelogUpsertOne) DoNothing() *ChangelogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChangelogCreate.OnConflict
// documentation for more info.
func (u *ChangelogUpsertOne) Update(set func(*ChangelogUpsert)) *ChangelogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChangelogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChangelogUpsertOne) SetUpdatedAt(v time.Time) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateUpdatedAt() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChangelogUpsertOne) SetDeletedAt(v time.Time) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateDeletedAt() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChangelogUpsertOne) ClearDeletedAt() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetVersion sets the "version" field.
func (u *ChangelogUpsertOne) SetVersion(v int) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ChangelogUpsertOne) AddVersion(v int) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateVersion() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateVersion()
	})
}

// SetUsername sets the "username" field.
func (u *ChangelogUpsertOne) SetUsername(v string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateUsername() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateUsername()
	})
}

// SetConfig sets the "config" field.
func (u *ChangelogUpsertOne) SetConfig(v string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateConfig() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *ChangelogUpsertOne) ClearConfig() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearConfig()
	})
}

// SetGitBranch sets the "git_branch" field.
func (u *ChangelogUpsertOne) SetGitBranch(v string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitBranch(v)
	})
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateGitBranch() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitBranch()
	})
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ChangelogUpsertOne) ClearGitBranch() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitBranch()
	})
}

// SetGitCommit sets the "git_commit" field.
func (u *ChangelogUpsertOne) SetGitCommit(v string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommit(v)
	})
}

// UpdateGitCommit sets the "git_commit" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateGitCommit() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommit()
	})
}

// ClearGitCommit clears the value of the "git_commit" field.
func (u *ChangelogUpsertOne) ClearGitCommit() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommit()
	})
}

// SetDockerImage sets the "docker_image" field.
func (u *ChangelogUpsertOne) SetDockerImage(v []string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetDockerImage(v)
	})
}

// UpdateDockerImage sets the "docker_image" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateDockerImage() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateDockerImage()
	})
}

// ClearDockerImage clears the value of the "docker_image" field.
func (u *ChangelogUpsertOne) ClearDockerImage() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearDockerImage()
	})
}

// SetEnvValues sets the "env_values" field.
func (u *ChangelogUpsertOne) SetEnvValues(v []*types.KeyValue) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetEnvValues(v)
	})
}

// UpdateEnvValues sets the "env_values" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateEnvValues() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateEnvValues()
	})
}

// ClearEnvValues clears the value of the "env_values" field.
func (u *ChangelogUpsertOne) ClearEnvValues() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearEnvValues()
	})
}

// SetExtraValues sets the "extra_values" field.
func (u *ChangelogUpsertOne) SetExtraValues(v []*websocket.ExtraValue) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetExtraValues(v)
	})
}

// UpdateExtraValues sets the "extra_values" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateExtraValues() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateExtraValues()
	})
}

// ClearExtraValues clears the value of the "extra_values" field.
func (u *ChangelogUpsertOne) ClearExtraValues() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearExtraValues()
	})
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (u *ChangelogUpsertOne) SetFinalExtraValues(v []*websocket.ExtraValue) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetFinalExtraValues(v)
	})
}

// UpdateFinalExtraValues sets the "final_extra_values" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateFinalExtraValues() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateFinalExtraValues()
	})
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (u *ChangelogUpsertOne) ClearFinalExtraValues() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearFinalExtraValues()
	})
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (u *ChangelogUpsertOne) SetGitCommitWebURL(v string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitWebURL(v)
	})
}

// UpdateGitCommitWebURL sets the "git_commit_web_url" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateGitCommitWebURL() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitWebURL()
	})
}

// ClearGitCommitWebURL clears the value of the "git_commit_web_url" field.
func (u *ChangelogUpsertOne) ClearGitCommitWebURL() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitWebURL()
	})
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (u *ChangelogUpsertOne) SetGitCommitTitle(v string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitTitle(v)
	})
}

// UpdateGitCommitTitle sets the "git_commit_title" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateGitCommitTitle() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitTitle()
	})
}

// ClearGitCommitTitle clears the value of the "git_commit_title" field.
func (u *ChangelogUpsertOne) ClearGitCommitTitle() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitTitle()
	})
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (u *ChangelogUpsertOne) SetGitCommitAuthor(v string) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitAuthor(v)
	})
}

// UpdateGitCommitAuthor sets the "git_commit_author" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateGitCommitAuthor() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitAuthor()
	})
}

// ClearGitCommitAuthor clears the value of the "git_commit_author" field.
func (u *ChangelogUpsertOne) ClearGitCommitAuthor() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitAuthor()
	})
}

// SetGitCommitDate sets the "git_commit_date" field.
func (u *ChangelogUpsertOne) SetGitCommitDate(v time.Time) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitDate(v)
	})
}

// UpdateGitCommitDate sets the "git_commit_date" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateGitCommitDate() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitDate()
	})
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (u *ChangelogUpsertOne) ClearGitCommitDate() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitDate()
	})
}

// SetConfigChanged sets the "config_changed" field.
func (u *ChangelogUpsertOne) SetConfigChanged(v bool) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetConfigChanged(v)
	})
}

// UpdateConfigChanged sets the "config_changed" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateConfigChanged() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateConfigChanged()
	})
}

// SetProjectID sets the "project_id" field.
func (u *ChangelogUpsertOne) SetProjectID(v int) *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ChangelogUpsertOne) UpdateProjectID() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateProjectID()
	})
}

// ClearProjectID clears the value of the "project_id" field.
func (u *ChangelogUpsertOne) ClearProjectID() *ChangelogUpsertOne {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearProjectID()
	})
}

// Exec executes the query.
func (u *ChangelogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChangelogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChangelogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChangelogUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChangelogUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChangelogCreateBulk is the builder for creating many Changelog entities in bulk.
type ChangelogCreateBulk struct {
	config
	err      error
	builders []*ChangelogCreate
	conflict []sql.ConflictOption
}

// Save creates the Changelog entities in the database.
func (ccb *ChangelogCreateBulk) Save(ctx context.Context) ([]*Changelog, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Changelog, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChangelogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChangelogCreateBulk) SaveX(ctx context.Context) []*Changelog {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChangelogCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChangelogCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Changelog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChangelogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChangelogCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChangelogUpsertBulk {
	ccb.conflict = opts
	return &ChangelogUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Changelog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChangelogCreateBulk) OnConflictColumns(columns ...string) *ChangelogUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChangelogUpsertBulk{
		create: ccb,
	}
}

// ChangelogUpsertBulk is the builder for "upsert"-ing
// a bulk of Changelog nodes.
type ChangelogUpsertBulk struct {
	create *ChangelogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Changelog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChangelogUpsertBulk) UpdateNewValues() *ChangelogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(changelog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Changelog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChangelogUpsertBulk) Ignore() *ChangelogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChangelogUpsertBulk) DoNothing() *ChangelogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChangelogCreateBulk.OnConflict
// documentation for more info.
func (u *ChangelogUpsertBulk) Update(set func(*ChangelogUpsert)) *ChangelogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChangelogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ChangelogUpsertBulk) SetUpdatedAt(v time.Time) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateUpdatedAt() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ChangelogUpsertBulk) SetDeletedAt(v time.Time) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateDeletedAt() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ChangelogUpsertBulk) ClearDeletedAt() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetVersion sets the "version" field.
func (u *ChangelogUpsertBulk) SetVersion(v int) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *ChangelogUpsertBulk) AddVersion(v int) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateVersion() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateVersion()
	})
}

// SetUsername sets the "username" field.
func (u *ChangelogUpsertBulk) SetUsername(v string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateUsername() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateUsername()
	})
}

// SetConfig sets the "config" field.
func (u *ChangelogUpsertBulk) SetConfig(v string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetConfig(v)
	})
}

// UpdateConfig sets the "config" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateConfig() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateConfig()
	})
}

// ClearConfig clears the value of the "config" field.
func (u *ChangelogUpsertBulk) ClearConfig() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearConfig()
	})
}

// SetGitBranch sets the "git_branch" field.
func (u *ChangelogUpsertBulk) SetGitBranch(v string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitBranch(v)
	})
}

// UpdateGitBranch sets the "git_branch" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateGitBranch() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitBranch()
	})
}

// ClearGitBranch clears the value of the "git_branch" field.
func (u *ChangelogUpsertBulk) ClearGitBranch() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitBranch()
	})
}

// SetGitCommit sets the "git_commit" field.
func (u *ChangelogUpsertBulk) SetGitCommit(v string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommit(v)
	})
}

// UpdateGitCommit sets the "git_commit" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateGitCommit() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommit()
	})
}

// ClearGitCommit clears the value of the "git_commit" field.
func (u *ChangelogUpsertBulk) ClearGitCommit() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommit()
	})
}

// SetDockerImage sets the "docker_image" field.
func (u *ChangelogUpsertBulk) SetDockerImage(v []string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetDockerImage(v)
	})
}

// UpdateDockerImage sets the "docker_image" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateDockerImage() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateDockerImage()
	})
}

// ClearDockerImage clears the value of the "docker_image" field.
func (u *ChangelogUpsertBulk) ClearDockerImage() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearDockerImage()
	})
}

// SetEnvValues sets the "env_values" field.
func (u *ChangelogUpsertBulk) SetEnvValues(v []*types.KeyValue) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetEnvValues(v)
	})
}

// UpdateEnvValues sets the "env_values" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateEnvValues() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateEnvValues()
	})
}

// ClearEnvValues clears the value of the "env_values" field.
func (u *ChangelogUpsertBulk) ClearEnvValues() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearEnvValues()
	})
}

// SetExtraValues sets the "extra_values" field.
func (u *ChangelogUpsertBulk) SetExtraValues(v []*websocket.ExtraValue) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetExtraValues(v)
	})
}

// UpdateExtraValues sets the "extra_values" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateExtraValues() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateExtraValues()
	})
}

// ClearExtraValues clears the value of the "extra_values" field.
func (u *ChangelogUpsertBulk) ClearExtraValues() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearExtraValues()
	})
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (u *ChangelogUpsertBulk) SetFinalExtraValues(v []*websocket.ExtraValue) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetFinalExtraValues(v)
	})
}

// UpdateFinalExtraValues sets the "final_extra_values" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateFinalExtraValues() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateFinalExtraValues()
	})
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (u *ChangelogUpsertBulk) ClearFinalExtraValues() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearFinalExtraValues()
	})
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (u *ChangelogUpsertBulk) SetGitCommitWebURL(v string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitWebURL(v)
	})
}

// UpdateGitCommitWebURL sets the "git_commit_web_url" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateGitCommitWebURL() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitWebURL()
	})
}

// ClearGitCommitWebURL clears the value of the "git_commit_web_url" field.
func (u *ChangelogUpsertBulk) ClearGitCommitWebURL() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitWebURL()
	})
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (u *ChangelogUpsertBulk) SetGitCommitTitle(v string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitTitle(v)
	})
}

// UpdateGitCommitTitle sets the "git_commit_title" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateGitCommitTitle() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitTitle()
	})
}

// ClearGitCommitTitle clears the value of the "git_commit_title" field.
func (u *ChangelogUpsertBulk) ClearGitCommitTitle() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitTitle()
	})
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (u *ChangelogUpsertBulk) SetGitCommitAuthor(v string) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitAuthor(v)
	})
}

// UpdateGitCommitAuthor sets the "git_commit_author" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateGitCommitAuthor() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitAuthor()
	})
}

// ClearGitCommitAuthor clears the value of the "git_commit_author" field.
func (u *ChangelogUpsertBulk) ClearGitCommitAuthor() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitAuthor()
	})
}

// SetGitCommitDate sets the "git_commit_date" field.
func (u *ChangelogUpsertBulk) SetGitCommitDate(v time.Time) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetGitCommitDate(v)
	})
}

// UpdateGitCommitDate sets the "git_commit_date" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateGitCommitDate() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateGitCommitDate()
	})
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (u *ChangelogUpsertBulk) ClearGitCommitDate() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearGitCommitDate()
	})
}

// SetConfigChanged sets the "config_changed" field.
func (u *ChangelogUpsertBulk) SetConfigChanged(v bool) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetConfigChanged(v)
	})
}

// UpdateConfigChanged sets the "config_changed" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateConfigChanged() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateConfigChanged()
	})
}

// SetProjectID sets the "project_id" field.
func (u *ChangelogUpsertBulk) SetProjectID(v int) *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.SetProjectID(v)
	})
}

// UpdateProjectID sets the "project_id" field to the value that was provided on create.
func (u *ChangelogUpsertBulk) UpdateProjectID() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.UpdateProjectID()
	})
}

// ClearProjectID clears the value of the "project_id" field.
func (u *ChangelogUpsertBulk) ClearProjectID() *ChangelogUpsertBulk {
	return u.Update(func(s *ChangelogUpsert) {
		s.ClearProjectID()
	})
}

// Exec executes the query.
func (u *ChangelogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChangelogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChangelogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChangelogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
