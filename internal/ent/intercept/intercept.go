// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/duc-cnzj/mars/v5/internal/ent"
	"github.com/duc-cnzj/mars/v5/internal/ent/accesstoken"
	"github.com/duc-cnzj/mars/v5/internal/ent/cachelock"
	"github.com/duc-cnzj/mars/v5/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v5/internal/ent/dbcache"
	"github.com/duc-cnzj/mars/v5/internal/ent/event"
	"github.com/duc-cnzj/mars/v5/internal/ent/favorite"
	"github.com/duc-cnzj/mars/v5/internal/ent/file"
	"github.com/duc-cnzj/mars/v5/internal/ent/member"
	"github.com/duc-cnzj/mars/v5/internal/ent/namespace"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
	"github.com/duc-cnzj/mars/v5/internal/ent/repo"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AccessTokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type AccessTokenFunc func(context.Context, *ent.AccessTokenQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AccessTokenFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AccessTokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AccessTokenQuery", q)
}

// The TraverseAccessToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAccessToken func(context.Context, *ent.AccessTokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAccessToken) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAccessToken) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccessTokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AccessTokenQuery", q)
}

// The CacheLockFunc type is an adapter to allow the use of ordinary function as a Querier.
type CacheLockFunc func(context.Context, *ent.CacheLockQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CacheLockFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CacheLockQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CacheLockQuery", q)
}

// The TraverseCacheLock type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCacheLock func(context.Context, *ent.CacheLockQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCacheLock) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCacheLock) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CacheLockQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CacheLockQuery", q)
}

// The ChangelogFunc type is an adapter to allow the use of ordinary function as a Querier.
type ChangelogFunc func(context.Context, *ent.ChangelogQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ChangelogFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ChangelogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ChangelogQuery", q)
}

// The TraverseChangelog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseChangelog func(context.Context, *ent.ChangelogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseChangelog) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseChangelog) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChangelogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ChangelogQuery", q)
}

// The DBCacheFunc type is an adapter to allow the use of ordinary function as a Querier.
type DBCacheFunc func(context.Context, *ent.DBCacheQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DBCacheFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DBCacheQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DBCacheQuery", q)
}

// The TraverseDBCache type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDBCache func(context.Context, *ent.DBCacheQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDBCache) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDBCache) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DBCacheQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DBCacheQuery", q)
}

// The EventFunc type is an adapter to allow the use of ordinary function as a Querier.
type EventFunc func(context.Context, *ent.EventQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EventFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EventQuery", q)
}

// The TraverseEvent type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEvent func(context.Context, *ent.EventQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEvent) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEvent) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EventQuery", q)
}

// The FavoriteFunc type is an adapter to allow the use of ordinary function as a Querier.
type FavoriteFunc func(context.Context, *ent.FavoriteQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FavoriteFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FavoriteQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FavoriteQuery", q)
}

// The TraverseFavorite type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFavorite func(context.Context, *ent.FavoriteQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFavorite) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFavorite) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FavoriteQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FavoriteQuery", q)
}

// The FileFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileFunc func(context.Context, *ent.FileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The TraverseFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFile func(context.Context, *ent.FileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The MemberFunc type is an adapter to allow the use of ordinary function as a Querier.
type MemberFunc func(context.Context, *ent.MemberQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MemberFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MemberQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MemberQuery", q)
}

// The TraverseMember type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMember func(context.Context, *ent.MemberQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMember) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMember) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MemberQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MemberQuery", q)
}

// The NamespaceFunc type is an adapter to allow the use of ordinary function as a Querier.
type NamespaceFunc func(context.Context, *ent.NamespaceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f NamespaceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.NamespaceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.NamespaceQuery", q)
}

// The TraverseNamespace type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNamespace func(context.Context, *ent.NamespaceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNamespace) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNamespace) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NamespaceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.NamespaceQuery", q)
}

// The ProjectFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProjectFunc func(context.Context, *ent.ProjectQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProjectFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProjectQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProjectQuery", q)
}

// The TraverseProject type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProject func(context.Context, *ent.ProjectQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProject) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProject) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProjectQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProjectQuery", q)
}

// The RepoFunc type is an adapter to allow the use of ordinary function as a Querier.
type RepoFunc func(context.Context, *ent.RepoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RepoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RepoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RepoQuery", q)
}

// The TraverseRepo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRepo func(context.Context, *ent.RepoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRepo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRepo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RepoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RepoQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AccessTokenQuery:
		return &query[*ent.AccessTokenQuery, predicate.AccessToken, accesstoken.OrderOption]{typ: ent.TypeAccessToken, tq: q}, nil
	case *ent.CacheLockQuery:
		return &query[*ent.CacheLockQuery, predicate.CacheLock, cachelock.OrderOption]{typ: ent.TypeCacheLock, tq: q}, nil
	case *ent.ChangelogQuery:
		return &query[*ent.ChangelogQuery, predicate.Changelog, changelog.OrderOption]{typ: ent.TypeChangelog, tq: q}, nil
	case *ent.DBCacheQuery:
		return &query[*ent.DBCacheQuery, predicate.DBCache, dbcache.OrderOption]{typ: ent.TypeDBCache, tq: q}, nil
	case *ent.EventQuery:
		return &query[*ent.EventQuery, predicate.Event, event.OrderOption]{typ: ent.TypeEvent, tq: q}, nil
	case *ent.FavoriteQuery:
		return &query[*ent.FavoriteQuery, predicate.Favorite, favorite.OrderOption]{typ: ent.TypeFavorite, tq: q}, nil
	case *ent.FileQuery:
		return &query[*ent.FileQuery, predicate.File, file.OrderOption]{typ: ent.TypeFile, tq: q}, nil
	case *ent.MemberQuery:
		return &query[*ent.MemberQuery, predicate.Member, member.OrderOption]{typ: ent.TypeMember, tq: q}, nil
	case *ent.NamespaceQuery:
		return &query[*ent.NamespaceQuery, predicate.Namespace, namespace.OrderOption]{typ: ent.TypeNamespace, tq: q}, nil
	case *ent.ProjectQuery:
		return &query[*ent.ProjectQuery, predicate.Project, project.OrderOption]{typ: ent.TypeProject, tq: q}, nil
	case *ent.RepoQuery:
		return &query[*ent.RepoQuery, predicate.Repo, repo.OrderOption]{typ: ent.TypeRepo, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
