// Code generated by ent, DO NOT EDIT.

package changelog

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the changelog type in the database.
	Label = "changelog"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldGitBranch holds the string denoting the git_branch field in the database.
	FieldGitBranch = "git_branch"
	// FieldGitCommit holds the string denoting the git_commit field in the database.
	FieldGitCommit = "git_commit"
	// FieldDockerImage holds the string denoting the docker_image field in the database.
	FieldDockerImage = "docker_image"
	// FieldEnvValues holds the string denoting the env_values field in the database.
	FieldEnvValues = "env_values"
	// FieldExtraValues holds the string denoting the extra_values field in the database.
	FieldExtraValues = "extra_values"
	// FieldFinalExtraValues holds the string denoting the final_extra_values field in the database.
	FieldFinalExtraValues = "final_extra_values"
	// FieldGitCommitWebURL holds the string denoting the git_commit_web_url field in the database.
	FieldGitCommitWebURL = "git_commit_web_url"
	// FieldGitCommitTitle holds the string denoting the git_commit_title field in the database.
	FieldGitCommitTitle = "git_commit_title"
	// FieldGitCommitAuthor holds the string denoting the git_commit_author field in the database.
	FieldGitCommitAuthor = "git_commit_author"
	// FieldGitCommitDate holds the string denoting the git_commit_date field in the database.
	FieldGitCommitDate = "git_commit_date"
	// FieldConfigChanged holds the string denoting the config_changed field in the database.
	FieldConfigChanged = "config_changed"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the changelog in the database.
	Table = "changelogs"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "changelogs"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_id"
)

// Columns holds all SQL columns for changelog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldVersion,
	FieldUsername,
	FieldConfig,
	FieldGitBranch,
	FieldGitCommit,
	FieldDockerImage,
	FieldEnvValues,
	FieldExtraValues,
	FieldFinalExtraValues,
	FieldGitCommitWebURL,
	FieldGitCommitTitle,
	FieldGitCommitAuthor,
	FieldGitCommitDate,
	FieldConfigChanged,
	FieldProjectID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/duc-cnzj/mars/v5/internal/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// GitCommitTitleValidator is a validator for the "git_commit_title" field. It is called by the builders before save.
	GitCommitTitleValidator func(string) error
	// GitCommitAuthorValidator is a validator for the "git_commit_author" field. It is called by the builders before save.
	GitCommitAuthorValidator func(string) error
	// DefaultConfigChanged holds the default value on creation for the "config_changed" field.
	DefaultConfigChanged bool
)

// OrderOption defines the ordering options for the Changelog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByConfig orders the results by the config field.
func ByConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfig, opts...).ToFunc()
}

// ByGitBranch orders the results by the git_branch field.
func ByGitBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitBranch, opts...).ToFunc()
}

// ByGitCommit orders the results by the git_commit field.
func ByGitCommit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommit, opts...).ToFunc()
}

// ByGitCommitWebURL orders the results by the git_commit_web_url field.
func ByGitCommitWebURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitWebURL, opts...).ToFunc()
}

// ByGitCommitTitle orders the results by the git_commit_title field.
func ByGitCommitTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitTitle, opts...).ToFunc()
}

// ByGitCommitAuthor orders the results by the git_commit_author field.
func ByGitCommitAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitAuthor, opts...).ToFunc()
}

// ByGitCommitDate orders the results by the git_commit_date field.
func ByGitCommitDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGitCommitDate, opts...).ToFunc()
}

// ByConfigChanged orders the results by the config_changed field.
func ByConfigChanged(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigChanged, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
