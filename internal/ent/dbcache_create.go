// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/v5/internal/ent/dbcache"
)

// DBCacheCreate is the builder for creating a DBCache entity.
type DBCacheCreate struct {
	config
	mutation *DBCacheMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (dcc *DBCacheCreate) SetKey(s string) *DBCacheCreate {
	dcc.mutation.SetKey(s)
	return dcc
}

// SetValue sets the "value" field.
func (dcc *DBCacheCreate) SetValue(s string) *DBCacheCreate {
	dcc.mutation.SetValue(s)
	return dcc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dcc *DBCacheCreate) SetNillableValue(s *string) *DBCacheCreate {
	if s != nil {
		dcc.SetValue(*s)
	}
	return dcc
}

// SetExpiredAt sets the "expired_at" field.
func (dcc *DBCacheCreate) SetExpiredAt(t time.Time) *DBCacheCreate {
	dcc.mutation.SetExpiredAt(t)
	return dcc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (dcc *DBCacheCreate) SetNillableExpiredAt(t *time.Time) *DBCacheCreate {
	if t != nil {
		dcc.SetExpiredAt(*t)
	}
	return dcc
}

// Mutation returns the DBCacheMutation object of the builder.
func (dcc *DBCacheCreate) Mutation() *DBCacheMutation {
	return dcc.mutation
}

// Save creates the DBCache in the database.
func (dcc *DBCacheCreate) Save(ctx context.Context) (*DBCache, error) {
	return withHooks(ctx, dcc.sqlSave, dcc.mutation, dcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DBCacheCreate) SaveX(ctx context.Context) *DBCache {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DBCacheCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DBCacheCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DBCacheCreate) check() error {
	if _, ok := dcc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "DBCache.key"`)}
	}
	if v, ok := dcc.mutation.Key(); ok {
		if err := dbcache.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "DBCache.key": %w`, err)}
		}
	}
	return nil
}

func (dcc *DBCacheCreate) sqlSave(ctx context.Context) (*DBCache, error) {
	if err := dcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dcc.mutation.id = &_node.ID
	dcc.mutation.done = true
	return _node, nil
}

func (dcc *DBCacheCreate) createSpec() (*DBCache, *sqlgraph.CreateSpec) {
	var (
		_node = &DBCache{config: dcc.config}
		_spec = sqlgraph.NewCreateSpec(dbcache.Table, sqlgraph.NewFieldSpec(dbcache.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dcc.conflict
	if value, ok := dcc.mutation.Key(); ok {
		_spec.SetField(dbcache.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := dcc.mutation.Value(); ok {
		_spec.SetField(dbcache.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := dcc.mutation.ExpiredAt(); ok {
		_spec.SetField(dbcache.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DBCache.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DBCacheUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (dcc *DBCacheCreate) OnConflict(opts ...sql.ConflictOption) *DBCacheUpsertOne {
	dcc.conflict = opts
	return &DBCacheUpsertOne{
		create: dcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DBCache.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcc *DBCacheCreate) OnConflictColumns(columns ...string) *DBCacheUpsertOne {
	dcc.conflict = append(dcc.conflict, sql.ConflictColumns(columns...))
	return &DBCacheUpsertOne{
		create: dcc,
	}
}

type (
	// DBCacheUpsertOne is the builder for "upsert"-ing
	//  one DBCache node.
	DBCacheUpsertOne struct {
		create *DBCacheCreate
	}

	// DBCacheUpsert is the "OnConflict" setter.
	DBCacheUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *DBCacheUpsert) SetKey(v string) *DBCacheUpsert {
	u.Set(dbcache.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DBCacheUpsert) UpdateKey() *DBCacheUpsert {
	u.SetExcluded(dbcache.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *DBCacheUpsert) SetValue(v string) *DBCacheUpsert {
	u.Set(dbcache.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DBCacheUpsert) UpdateValue() *DBCacheUpsert {
	u.SetExcluded(dbcache.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *DBCacheUpsert) ClearValue() *DBCacheUpsert {
	u.SetNull(dbcache.FieldValue)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *DBCacheUpsert) SetExpiredAt(v time.Time) *DBCacheUpsert {
	u.Set(dbcache.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *DBCacheUpsert) UpdateExpiredAt() *DBCacheUpsert {
	u.SetExcluded(dbcache.FieldExpiredAt)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *DBCacheUpsert) ClearExpiredAt() *DBCacheUpsert {
	u.SetNull(dbcache.FieldExpiredAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.DBCache.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DBCacheUpsertOne) UpdateNewValues() *DBCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DBCache.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DBCacheUpsertOne) Ignore() *DBCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DBCacheUpsertOne) DoNothing() *DBCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DBCacheCreate.OnConflict
// documentation for more info.
func (u *DBCacheUpsertOne) Update(set func(*DBCacheUpsert)) *DBCacheUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DBCacheUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *DBCacheUpsertOne) SetKey(v string) *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DBCacheUpsertOne) UpdateKey() *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *DBCacheUpsertOne) SetValue(v string) *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DBCacheUpsertOne) UpdateValue() *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *DBCacheUpsertOne) ClearValue() *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.ClearValue()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *DBCacheUpsertOne) SetExpiredAt(v time.Time) *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *DBCacheUpsertOne) UpdateExpiredAt() *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *DBCacheUpsertOne) ClearExpiredAt() *DBCacheUpsertOne {
	return u.Update(func(s *DBCacheUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *DBCacheUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DBCacheCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DBCacheUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DBCacheUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DBCacheUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DBCacheCreateBulk is the builder for creating many DBCache entities in bulk.
type DBCacheCreateBulk struct {
	config
	err      error
	builders []*DBCacheCreate
	conflict []sql.ConflictOption
}

// Save creates the DBCache entities in the database.
func (dccb *DBCacheCreateBulk) Save(ctx context.Context) ([]*DBCache, error) {
	if dccb.err != nil {
		return nil, dccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DBCache, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DBCacheMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DBCacheCreateBulk) SaveX(ctx context.Context) []*DBCache {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DBCacheCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DBCacheCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DBCache.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DBCacheUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (dccb *DBCacheCreateBulk) OnConflict(opts ...sql.ConflictOption) *DBCacheUpsertBulk {
	dccb.conflict = opts
	return &DBCacheUpsertBulk{
		create: dccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DBCache.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dccb *DBCacheCreateBulk) OnConflictColumns(columns ...string) *DBCacheUpsertBulk {
	dccb.conflict = append(dccb.conflict, sql.ConflictColumns(columns...))
	return &DBCacheUpsertBulk{
		create: dccb,
	}
}

// DBCacheUpsertBulk is the builder for "upsert"-ing
// a bulk of DBCache nodes.
type DBCacheUpsertBulk struct {
	create *DBCacheCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DBCache.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DBCacheUpsertBulk) UpdateNewValues() *DBCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DBCache.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DBCacheUpsertBulk) Ignore() *DBCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DBCacheUpsertBulk) DoNothing() *DBCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DBCacheCreateBulk.OnConflict
// documentation for more info.
func (u *DBCacheUpsertBulk) Update(set func(*DBCacheUpsert)) *DBCacheUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DBCacheUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *DBCacheUpsertBulk) SetKey(v string) *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *DBCacheUpsertBulk) UpdateKey() *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *DBCacheUpsertBulk) SetValue(v string) *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *DBCacheUpsertBulk) UpdateValue() *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *DBCacheUpsertBulk) ClearValue() *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.ClearValue()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *DBCacheUpsertBulk) SetExpiredAt(v time.Time) *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *DBCacheUpsertBulk) UpdateExpiredAt() *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *DBCacheUpsertBulk) ClearExpiredAt() *DBCacheUpsertBulk {
	return u.Update(func(s *DBCacheUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *DBCacheUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DBCacheCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DBCacheCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DBCacheUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
