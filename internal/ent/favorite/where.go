// Code generated by ent, DO NOT EDIT.

package favorite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldEmail, v))
}

// NamespaceID applies equality check predicate on the "namespace_id" field. It's identical to NamespaceIDEQ.
func NamespaceID(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldNamespaceID, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Favorite {
	return predicate.Favorite(sql.FieldContainsFold(FieldEmail, v))
}

// NamespaceIDEQ applies the EQ predicate on the "namespace_id" field.
func NamespaceIDEQ(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldNamespaceID, v))
}

// NamespaceIDNEQ applies the NEQ predicate on the "namespace_id" field.
func NamespaceIDNEQ(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldNamespaceID, v))
}

// NamespaceIDIn applies the In predicate on the "namespace_id" field.
func NamespaceIDIn(vs ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldNamespaceID, vs...))
}

// NamespaceIDNotIn applies the NotIn predicate on the "namespace_id" field.
func NamespaceIDNotIn(vs ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldNamespaceID, vs...))
}

// NamespaceIDIsNil applies the IsNil predicate on the "namespace_id" field.
func NamespaceIDIsNil() predicate.Favorite {
	return predicate.Favorite(sql.FieldIsNull(FieldNamespaceID))
}

// NamespaceIDNotNil applies the NotNil predicate on the "namespace_id" field.
func NamespaceIDNotNil() predicate.Favorite {
	return predicate.Favorite(sql.FieldNotNull(FieldNamespaceID))
}

// HasNamespace applies the HasEdge predicate on the "namespace" edge.
func HasNamespace() predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NamespaceTable, NamespaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNamespaceWith applies the HasEdge predicate on the "namespace" edge with a given conditions (other predicates).
func HasNamespaceWith(preds ...predicate.Namespace) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := newNamespaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.NotPredicates(p))
}
