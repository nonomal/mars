// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v types.EventActionType) predicate.Event {
	vc := int32(v)
	return predicate.Event(sql.FieldEQ(FieldAction, vc))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUsername, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMessage, v))
}

// Old applies equality check predicate on the "old" field. It's identical to OldEQ.
func Old(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldOld, v))
}

// New applies equality check predicate on the "new" field. It's identical to NewEQ.
func New(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNew, v))
}

// HasDiff applies equality check predicate on the "has_diff" field. It's identical to HasDiffEQ.
func HasDiff(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldHasDiff, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDuration, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldFileID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldDeletedAt))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v types.EventActionType) predicate.Event {
	vc := int32(v)
	return predicate.Event(sql.FieldEQ(FieldAction, vc))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v types.EventActionType) predicate.Event {
	vc := int32(v)
	return predicate.Event(sql.FieldNEQ(FieldAction, vc))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...types.EventActionType) predicate.Event {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Event(sql.FieldIn(FieldAction, v...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...types.EventActionType) predicate.Event {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int32(vs[i])
	}
	return predicate.Event(sql.FieldNotIn(FieldAction, v...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v types.EventActionType) predicate.Event {
	vc := int32(v)
	return predicate.Event(sql.FieldGT(FieldAction, vc))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v types.EventActionType) predicate.Event {
	vc := int32(v)
	return predicate.Event(sql.FieldGTE(FieldAction, vc))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v types.EventActionType) predicate.Event {
	vc := int32(v)
	return predicate.Event(sql.FieldLT(FieldAction, vc))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v types.EventActionType) predicate.Event {
	vc := int32(v)
	return predicate.Event(sql.FieldLTE(FieldAction, vc))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldUsername, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldMessage, v))
}

// OldEQ applies the EQ predicate on the "old" field.
func OldEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldOld, v))
}

// OldNEQ applies the NEQ predicate on the "old" field.
func OldNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldOld, v))
}

// OldIn applies the In predicate on the "old" field.
func OldIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldOld, vs...))
}

// OldNotIn applies the NotIn predicate on the "old" field.
func OldNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldOld, vs...))
}

// OldGT applies the GT predicate on the "old" field.
func OldGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldOld, v))
}

// OldGTE applies the GTE predicate on the "old" field.
func OldGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldOld, v))
}

// OldLT applies the LT predicate on the "old" field.
func OldLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldOld, v))
}

// OldLTE applies the LTE predicate on the "old" field.
func OldLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldOld, v))
}

// OldContains applies the Contains predicate on the "old" field.
func OldContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldOld, v))
}

// OldHasPrefix applies the HasPrefix predicate on the "old" field.
func OldHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldOld, v))
}

// OldHasSuffix applies the HasSuffix predicate on the "old" field.
func OldHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldOld, v))
}

// OldIsNil applies the IsNil predicate on the "old" field.
func OldIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldOld))
}

// OldNotNil applies the NotNil predicate on the "old" field.
func OldNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldOld))
}

// OldEqualFold applies the EqualFold predicate on the "old" field.
func OldEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldOld, v))
}

// OldContainsFold applies the ContainsFold predicate on the "old" field.
func OldContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldOld, v))
}

// NewEQ applies the EQ predicate on the "new" field.
func NewEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldNew, v))
}

// NewNEQ applies the NEQ predicate on the "new" field.
func NewNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldNew, v))
}

// NewIn applies the In predicate on the "new" field.
func NewIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldNew, vs...))
}

// NewNotIn applies the NotIn predicate on the "new" field.
func NewNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldNew, vs...))
}

// NewGT applies the GT predicate on the "new" field.
func NewGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldNew, v))
}

// NewGTE applies the GTE predicate on the "new" field.
func NewGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldNew, v))
}

// NewLT applies the LT predicate on the "new" field.
func NewLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldNew, v))
}

// NewLTE applies the LTE predicate on the "new" field.
func NewLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldNew, v))
}

// NewContains applies the Contains predicate on the "new" field.
func NewContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldNew, v))
}

// NewHasPrefix applies the HasPrefix predicate on the "new" field.
func NewHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldNew, v))
}

// NewHasSuffix applies the HasSuffix predicate on the "new" field.
func NewHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldNew, v))
}

// NewIsNil applies the IsNil predicate on the "new" field.
func NewIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldNew))
}

// NewNotNil applies the NotNil predicate on the "new" field.
func NewNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldNew))
}

// NewEqualFold applies the EqualFold predicate on the "new" field.
func NewEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldNew, v))
}

// NewContainsFold applies the ContainsFold predicate on the "new" field.
func NewContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldNew, v))
}

// HasDiffEQ applies the EQ predicate on the "has_diff" field.
func HasDiffEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldHasDiff, v))
}

// HasDiffNEQ applies the NEQ predicate on the "has_diff" field.
func HasDiffNEQ(v bool) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldHasDiff, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldDuration, v))
}

// DurationContains applies the Contains predicate on the "duration" field.
func DurationContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldDuration, v))
}

// DurationHasPrefix applies the HasPrefix predicate on the "duration" field.
func DurationHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldDuration, v))
}

// DurationHasSuffix applies the HasSuffix predicate on the "duration" field.
func DurationHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldDuration, v))
}

// DurationEqualFold applies the EqualFold predicate on the "duration" field.
func DurationEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldDuration, v))
}

// DurationContainsFold applies the ContainsFold predicate on the "duration" field.
func DurationContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldDuration, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDIsNil applies the IsNil predicate on the "file_id" field.
func FileIDIsNil() predicate.Event {
	return predicate.Event(sql.FieldIsNull(FieldFileID))
}

// FileIDNotNil applies the NotNil predicate on the "file_id" field.
func FileIDNotNil() predicate.Event {
	return predicate.Event(sql.FieldNotNull(FieldFileID))
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}
