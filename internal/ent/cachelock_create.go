// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/v5/internal/ent/cachelock"
)

// CacheLockCreate is the builder for creating a CacheLock entity.
type CacheLockCreate struct {
	config
	mutation *CacheLockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (clc *CacheLockCreate) SetKey(s string) *CacheLockCreate {
	clc.mutation.SetKey(s)
	return clc
}

// SetOwner sets the "owner" field.
func (clc *CacheLockCreate) SetOwner(s string) *CacheLockCreate {
	clc.mutation.SetOwner(s)
	return clc
}

// SetExpiredAt sets the "expired_at" field.
func (clc *CacheLockCreate) SetExpiredAt(t time.Time) *CacheLockCreate {
	clc.mutation.SetExpiredAt(t)
	return clc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (clc *CacheLockCreate) SetNillableExpiredAt(t *time.Time) *CacheLockCreate {
	if t != nil {
		clc.SetExpiredAt(*t)
	}
	return clc
}

// Mutation returns the CacheLockMutation object of the builder.
func (clc *CacheLockCreate) Mutation() *CacheLockMutation {
	return clc.mutation
}

// Save creates the CacheLock in the database.
func (clc *CacheLockCreate) Save(ctx context.Context) (*CacheLock, error) {
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CacheLockCreate) SaveX(ctx context.Context) *CacheLock {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CacheLockCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CacheLockCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CacheLockCreate) check() error {
	if _, ok := clc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "CacheLock.key"`)}
	}
	if v, ok := clc.mutation.Key(); ok {
		if err := cachelock.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "CacheLock.key": %w`, err)}
		}
	}
	if _, ok := clc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "CacheLock.owner"`)}
	}
	if v, ok := clc.mutation.Owner(); ok {
		if err := cachelock.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "CacheLock.owner": %w`, err)}
		}
	}
	return nil
}

func (clc *CacheLockCreate) sqlSave(ctx context.Context) (*CacheLock, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CacheLockCreate) createSpec() (*CacheLock, *sqlgraph.CreateSpec) {
	var (
		_node = &CacheLock{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(cachelock.Table, sqlgraph.NewFieldSpec(cachelock.FieldID, field.TypeInt))
	)
	_spec.OnConflict = clc.conflict
	if value, ok := clc.mutation.Key(); ok {
		_spec.SetField(cachelock.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := clc.mutation.Owner(); ok {
		_spec.SetField(cachelock.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := clc.mutation.ExpiredAt(); ok {
		_spec.SetField(cachelock.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CacheLock.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CacheLockUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (clc *CacheLockCreate) OnConflict(opts ...sql.ConflictOption) *CacheLockUpsertOne {
	clc.conflict = opts
	return &CacheLockUpsertOne{
		create: clc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CacheLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clc *CacheLockCreate) OnConflictColumns(columns ...string) *CacheLockUpsertOne {
	clc.conflict = append(clc.conflict, sql.ConflictColumns(columns...))
	return &CacheLockUpsertOne{
		create: clc,
	}
}

type (
	// CacheLockUpsertOne is the builder for "upsert"-ing
	//  one CacheLock node.
	CacheLockUpsertOne struct {
		create *CacheLockCreate
	}

	// CacheLockUpsert is the "OnConflict" setter.
	CacheLockUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *CacheLockUpsert) SetKey(v string) *CacheLockUpsert {
	u.Set(cachelock.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CacheLockUpsert) UpdateKey() *CacheLockUpsert {
	u.SetExcluded(cachelock.FieldKey)
	return u
}

// SetOwner sets the "owner" field.
func (u *CacheLockUpsert) SetOwner(v string) *CacheLockUpsert {
	u.Set(cachelock.FieldOwner, v)
	return u
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *CacheLockUpsert) UpdateOwner() *CacheLockUpsert {
	u.SetExcluded(cachelock.FieldOwner)
	return u
}

// SetExpiredAt sets the "expired_at" field.
func (u *CacheLockUpsert) SetExpiredAt(v time.Time) *CacheLockUpsert {
	u.Set(cachelock.FieldExpiredAt, v)
	return u
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CacheLockUpsert) UpdateExpiredAt() *CacheLockUpsert {
	u.SetExcluded(cachelock.FieldExpiredAt)
	return u
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CacheLockUpsert) ClearExpiredAt() *CacheLockUpsert {
	u.SetNull(cachelock.FieldExpiredAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CacheLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CacheLockUpsertOne) UpdateNewValues() *CacheLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CacheLock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CacheLockUpsertOne) Ignore() *CacheLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CacheLockUpsertOne) DoNothing() *CacheLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CacheLockCreate.OnConflict
// documentation for more info.
func (u *CacheLockUpsertOne) Update(set func(*CacheLockUpsert)) *CacheLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CacheLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *CacheLockUpsertOne) SetKey(v string) *CacheLockUpsertOne {
	return u.Update(func(s *CacheLockUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CacheLockUpsertOne) UpdateKey() *CacheLockUpsertOne {
	return u.Update(func(s *CacheLockUpsert) {
		s.UpdateKey()
	})
}

// SetOwner sets the "owner" field.
func (u *CacheLockUpsertOne) SetOwner(v string) *CacheLockUpsertOne {
	return u.Update(func(s *CacheLockUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *CacheLockUpsertOne) UpdateOwner() *CacheLockUpsertOne {
	return u.Update(func(s *CacheLockUpsert) {
		s.UpdateOwner()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *CacheLockUpsertOne) SetExpiredAt(v time.Time) *CacheLockUpsertOne {
	return u.Update(func(s *CacheLockUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CacheLockUpsertOne) UpdateExpiredAt() *CacheLockUpsertOne {
	return u.Update(func(s *CacheLockUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CacheLockUpsertOne) ClearExpiredAt() *CacheLockUpsertOne {
	return u.Update(func(s *CacheLockUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *CacheLockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CacheLockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CacheLockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CacheLockUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CacheLockUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CacheLockCreateBulk is the builder for creating many CacheLock entities in bulk.
type CacheLockCreateBulk struct {
	config
	err      error
	builders []*CacheLockCreate
	conflict []sql.ConflictOption
}

// Save creates the CacheLock entities in the database.
func (clcb *CacheLockCreateBulk) Save(ctx context.Context) ([]*CacheLock, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CacheLock, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CacheLockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = clcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CacheLockCreateBulk) SaveX(ctx context.Context) []*CacheLock {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CacheLockCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CacheLockCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CacheLock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CacheLockUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (clcb *CacheLockCreateBulk) OnConflict(opts ...sql.ConflictOption) *CacheLockUpsertBulk {
	clcb.conflict = opts
	return &CacheLockUpsertBulk{
		create: clcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CacheLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clcb *CacheLockCreateBulk) OnConflictColumns(columns ...string) *CacheLockUpsertBulk {
	clcb.conflict = append(clcb.conflict, sql.ConflictColumns(columns...))
	return &CacheLockUpsertBulk{
		create: clcb,
	}
}

// CacheLockUpsertBulk is the builder for "upsert"-ing
// a bulk of CacheLock nodes.
type CacheLockUpsertBulk struct {
	create *CacheLockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CacheLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CacheLockUpsertBulk) UpdateNewValues() *CacheLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CacheLock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CacheLockUpsertBulk) Ignore() *CacheLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CacheLockUpsertBulk) DoNothing() *CacheLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CacheLockCreateBulk.OnConflict
// documentation for more info.
func (u *CacheLockUpsertBulk) Update(set func(*CacheLockUpsert)) *CacheLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CacheLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *CacheLockUpsertBulk) SetKey(v string) *CacheLockUpsertBulk {
	return u.Update(func(s *CacheLockUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *CacheLockUpsertBulk) UpdateKey() *CacheLockUpsertBulk {
	return u.Update(func(s *CacheLockUpsert) {
		s.UpdateKey()
	})
}

// SetOwner sets the "owner" field.
func (u *CacheLockUpsertBulk) SetOwner(v string) *CacheLockUpsertBulk {
	return u.Update(func(s *CacheLockUpsert) {
		s.SetOwner(v)
	})
}

// UpdateOwner sets the "owner" field to the value that was provided on create.
func (u *CacheLockUpsertBulk) UpdateOwner() *CacheLockUpsertBulk {
	return u.Update(func(s *CacheLockUpsert) {
		s.UpdateOwner()
	})
}

// SetExpiredAt sets the "expired_at" field.
func (u *CacheLockUpsertBulk) SetExpiredAt(v time.Time) *CacheLockUpsertBulk {
	return u.Update(func(s *CacheLockUpsert) {
		s.SetExpiredAt(v)
	})
}

// UpdateExpiredAt sets the "expired_at" field to the value that was provided on create.
func (u *CacheLockUpsertBulk) UpdateExpiredAt() *CacheLockUpsertBulk {
	return u.Update(func(s *CacheLockUpsert) {
		s.UpdateExpiredAt()
	})
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (u *CacheLockUpsertBulk) ClearExpiredAt() *CacheLockUpsertBulk {
	return u.Update(func(s *CacheLockUpsert) {
		s.ClearExpiredAt()
	})
}

// Exec executes the query.
func (u *CacheLockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CacheLockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CacheLockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CacheLockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
