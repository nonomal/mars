// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/v5/internal/ent/event"
	"github.com/duc-cnzj/mars/v5/internal/ent/file"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EventUpdate) SetDeletedAt(t time.Time) *EventUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDeletedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EventUpdate) ClearDeletedAt() *EventUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetAction sets the "action" field.
func (eu *EventUpdate) SetAction(tat types.EventActionType) *EventUpdate {
	eu.mutation.ResetAction()
	eu.mutation.SetAction(tat)
	return eu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (eu *EventUpdate) SetNillableAction(tat *types.EventActionType) *EventUpdate {
	if tat != nil {
		eu.SetAction(*tat)
	}
	return eu
}

// AddAction adds tat to the "action" field.
func (eu *EventUpdate) AddAction(tat types.EventActionType) *EventUpdate {
	eu.mutation.AddAction(tat)
	return eu
}

// SetUsername sets the "username" field.
func (eu *EventUpdate) SetUsername(s string) *EventUpdate {
	eu.mutation.SetUsername(s)
	return eu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (eu *EventUpdate) SetNillableUsername(s *string) *EventUpdate {
	if s != nil {
		eu.SetUsername(*s)
	}
	return eu
}

// SetMessage sets the "message" field.
func (eu *EventUpdate) SetMessage(s string) *EventUpdate {
	eu.mutation.SetMessage(s)
	return eu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (eu *EventUpdate) SetNillableMessage(s *string) *EventUpdate {
	if s != nil {
		eu.SetMessage(*s)
	}
	return eu
}

// SetOld sets the "old" field.
func (eu *EventUpdate) SetOld(s string) *EventUpdate {
	eu.mutation.SetOld(s)
	return eu
}

// SetNillableOld sets the "old" field if the given value is not nil.
func (eu *EventUpdate) SetNillableOld(s *string) *EventUpdate {
	if s != nil {
		eu.SetOld(*s)
	}
	return eu
}

// ClearOld clears the value of the "old" field.
func (eu *EventUpdate) ClearOld() *EventUpdate {
	eu.mutation.ClearOld()
	return eu
}

// SetNew sets the "new" field.
func (eu *EventUpdate) SetNew(s string) *EventUpdate {
	eu.mutation.SetNew(s)
	return eu
}

// SetNillableNew sets the "new" field if the given value is not nil.
func (eu *EventUpdate) SetNillableNew(s *string) *EventUpdate {
	if s != nil {
		eu.SetNew(*s)
	}
	return eu
}

// ClearNew clears the value of the "new" field.
func (eu *EventUpdate) ClearNew() *EventUpdate {
	eu.mutation.ClearNew()
	return eu
}

// SetHasDiff sets the "has_diff" field.
func (eu *EventUpdate) SetHasDiff(b bool) *EventUpdate {
	eu.mutation.SetHasDiff(b)
	return eu
}

// SetNillableHasDiff sets the "has_diff" field if the given value is not nil.
func (eu *EventUpdate) SetNillableHasDiff(b *bool) *EventUpdate {
	if b != nil {
		eu.SetHasDiff(*b)
	}
	return eu
}

// SetDuration sets the "duration" field.
func (eu *EventUpdate) SetDuration(s string) *EventUpdate {
	eu.mutation.SetDuration(s)
	return eu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDuration(s *string) *EventUpdate {
	if s != nil {
		eu.SetDuration(*s)
	}
	return eu
}

// SetFileID sets the "file_id" field.
func (eu *EventUpdate) SetFileID(i int) *EventUpdate {
	eu.mutation.SetFileID(i)
	return eu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableFileID(i *int) *EventUpdate {
	if i != nil {
		eu.SetFileID(*i)
	}
	return eu
}

// ClearFileID clears the value of the "file_id" field.
func (eu *EventUpdate) ClearFileID() *EventUpdate {
	eu.mutation.ClearFileID()
	return eu
}

// SetFile sets the "file" edge to the File entity.
func (eu *EventUpdate) SetFile(f *File) *EventUpdate {
	return eu.SetFileID(f.ID)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (eu *EventUpdate) ClearFile() *EventUpdate {
	eu.mutation.ClearFile()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Username(); ok {
		if err := event.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Event.username": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Message(); ok {
		if err := event.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Event.message": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Action(); ok {
		_spec.SetField(event.FieldAction, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedAction(); ok {
		_spec.AddField(event.FieldAction, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.Username(); ok {
		_spec.SetField(event.FieldUsername, field.TypeString, value)
	}
	if value, ok := eu.mutation.Message(); ok {
		_spec.SetField(event.FieldMessage, field.TypeString, value)
	}
	if value, ok := eu.mutation.Old(); ok {
		_spec.SetField(event.FieldOld, field.TypeString, value)
	}
	if eu.mutation.OldCleared() {
		_spec.ClearField(event.FieldOld, field.TypeString)
	}
	if value, ok := eu.mutation.New(); ok {
		_spec.SetField(event.FieldNew, field.TypeString, value)
	}
	if eu.mutation.NewCleared() {
		_spec.ClearField(event.FieldNew, field.TypeString)
	}
	if value, ok := eu.mutation.HasDiff(); ok {
		_spec.SetField(event.FieldHasDiff, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Duration(); ok {
		_spec.SetField(event.FieldDuration, field.TypeString, value)
	}
	if eu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EventUpdateOne) SetDeletedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDeletedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EventUpdateOne) ClearDeletedAt() *EventUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetAction sets the "action" field.
func (euo *EventUpdateOne) SetAction(tat types.EventActionType) *EventUpdateOne {
	euo.mutation.ResetAction()
	euo.mutation.SetAction(tat)
	return euo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableAction(tat *types.EventActionType) *EventUpdateOne {
	if tat != nil {
		euo.SetAction(*tat)
	}
	return euo
}

// AddAction adds tat to the "action" field.
func (euo *EventUpdateOne) AddAction(tat types.EventActionType) *EventUpdateOne {
	euo.mutation.AddAction(tat)
	return euo
}

// SetUsername sets the "username" field.
func (euo *EventUpdateOne) SetUsername(s string) *EventUpdateOne {
	euo.mutation.SetUsername(s)
	return euo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUsername(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetUsername(*s)
	}
	return euo
}

// SetMessage sets the "message" field.
func (euo *EventUpdateOne) SetMessage(s string) *EventUpdateOne {
	euo.mutation.SetMessage(s)
	return euo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableMessage(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetMessage(*s)
	}
	return euo
}

// SetOld sets the "old" field.
func (euo *EventUpdateOne) SetOld(s string) *EventUpdateOne {
	euo.mutation.SetOld(s)
	return euo
}

// SetNillableOld sets the "old" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableOld(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetOld(*s)
	}
	return euo
}

// ClearOld clears the value of the "old" field.
func (euo *EventUpdateOne) ClearOld() *EventUpdateOne {
	euo.mutation.ClearOld()
	return euo
}

// SetNew sets the "new" field.
func (euo *EventUpdateOne) SetNew(s string) *EventUpdateOne {
	euo.mutation.SetNew(s)
	return euo
}

// SetNillableNew sets the "new" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableNew(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetNew(*s)
	}
	return euo
}

// ClearNew clears the value of the "new" field.
func (euo *EventUpdateOne) ClearNew() *EventUpdateOne {
	euo.mutation.ClearNew()
	return euo
}

// SetHasDiff sets the "has_diff" field.
func (euo *EventUpdateOne) SetHasDiff(b bool) *EventUpdateOne {
	euo.mutation.SetHasDiff(b)
	return euo
}

// SetNillableHasDiff sets the "has_diff" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableHasDiff(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetHasDiff(*b)
	}
	return euo
}

// SetDuration sets the "duration" field.
func (euo *EventUpdateOne) SetDuration(s string) *EventUpdateOne {
	euo.mutation.SetDuration(s)
	return euo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDuration(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDuration(*s)
	}
	return euo
}

// SetFileID sets the "file_id" field.
func (euo *EventUpdateOne) SetFileID(i int) *EventUpdateOne {
	euo.mutation.SetFileID(i)
	return euo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableFileID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetFileID(*i)
	}
	return euo
}

// ClearFileID clears the value of the "file_id" field.
func (euo *EventUpdateOne) ClearFileID() *EventUpdateOne {
	euo.mutation.ClearFileID()
	return euo
}

// SetFile sets the "file" edge to the File entity.
func (euo *EventUpdateOne) SetFile(f *File) *EventUpdateOne {
	return euo.SetFileID(f.ID)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (euo *EventUpdateOne) ClearFile() *EventUpdateOne {
	euo.mutation.ClearFile()
	return euo
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized event.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Username(); ok {
		if err := event.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Event.username": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Message(); ok {
		if err := event.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Event.message": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(event.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(event.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Action(); ok {
		_spec.SetField(event.FieldAction, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedAction(); ok {
		_spec.AddField(event.FieldAction, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.Username(); ok {
		_spec.SetField(event.FieldUsername, field.TypeString, value)
	}
	if value, ok := euo.mutation.Message(); ok {
		_spec.SetField(event.FieldMessage, field.TypeString, value)
	}
	if value, ok := euo.mutation.Old(); ok {
		_spec.SetField(event.FieldOld, field.TypeString, value)
	}
	if euo.mutation.OldCleared() {
		_spec.ClearField(event.FieldOld, field.TypeString)
	}
	if value, ok := euo.mutation.New(); ok {
		_spec.SetField(event.FieldNew, field.TypeString, value)
	}
	if euo.mutation.NewCleared() {
		_spec.ClearField(event.FieldNew, field.TypeString)
	}
	if value, ok := euo.mutation.HasDiff(); ok {
		_spec.SetField(event.FieldHasDiff, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Duration(); ok {
		_spec.SetField(event.FieldDuration, field.TypeString, value)
	}
	if euo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.FileTable,
			Columns: []string{event.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
