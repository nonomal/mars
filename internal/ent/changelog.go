// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/api/v5/websocket"
	"github.com/duc-cnzj/mars/v5/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
)

// Changelog is the model entity for the Changelog schema.
type Changelog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// 修改人
	Username string `json:"username,omitempty"`
	// 用户提交的配置
	Config string `json:"config,omitempty"`
	// GitBranch holds the value of the "git_branch" field.
	GitBranch string `json:"git_branch,omitempty"`
	// GitCommit holds the value of the "git_commit" field.
	GitCommit string `json:"git_commit,omitempty"`
	// DockerImage holds the value of the "docker_image" field.
	DockerImage []string `json:"docker_image,omitempty"`
	// 可用的环境变量值
	EnvValues []*types.KeyValue `json:"env_values,omitempty"`
	// 用户表单传入的额外值
	ExtraValues []*websocket.ExtraValue `json:"extra_values,omitempty"`
	// 用户表单传入的额外值 + 系统默认的额外值
	FinalExtraValues []*websocket.ExtraValue `json:"final_extra_values,omitempty"`
	// GitCommitWebURL holds the value of the "git_commit_web_url" field.
	GitCommitWebURL string `json:"git_commit_web_url,omitempty"`
	// GitCommitTitle holds the value of the "git_commit_title" field.
	GitCommitTitle string `json:"git_commit_title,omitempty"`
	// GitCommitAuthor holds the value of the "git_commit_author" field.
	GitCommitAuthor string `json:"git_commit_author,omitempty"`
	// GitCommitDate holds the value of the "git_commit_date" field.
	GitCommitDate *time.Time `json:"git_commit_date,omitempty"`
	// ConfigChanged holds the value of the "config_changed" field.
	ConfigChanged bool `json:"config_changed,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID int `json:"project_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChangelogQuery when eager-loading is set.
	Edges        ChangelogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChangelogEdges holds the relations/edges for other nodes in the graph.
type ChangelogEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChangelogEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Changelog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case changelog.FieldDockerImage, changelog.FieldEnvValues, changelog.FieldExtraValues, changelog.FieldFinalExtraValues:
			values[i] = new([]byte)
		case changelog.FieldConfigChanged:
			values[i] = new(sql.NullBool)
		case changelog.FieldID, changelog.FieldVersion, changelog.FieldProjectID:
			values[i] = new(sql.NullInt64)
		case changelog.FieldUsername, changelog.FieldConfig, changelog.FieldGitBranch, changelog.FieldGitCommit, changelog.FieldGitCommitWebURL, changelog.FieldGitCommitTitle, changelog.FieldGitCommitAuthor:
			values[i] = new(sql.NullString)
		case changelog.FieldCreatedAt, changelog.FieldUpdatedAt, changelog.FieldDeletedAt, changelog.FieldGitCommitDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Changelog fields.
func (c *Changelog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case changelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case changelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case changelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case changelog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case changelog.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				c.Version = int(value.Int64)
			}
		case changelog.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				c.Username = value.String
			}
		case changelog.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				c.Config = value.String
			}
		case changelog.FieldGitBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_branch", values[i])
			} else if value.Valid {
				c.GitBranch = value.String
			}
		case changelog.FieldGitCommit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit", values[i])
			} else if value.Valid {
				c.GitCommit = value.String
			}
		case changelog.FieldDockerImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field docker_image", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.DockerImage); err != nil {
					return fmt.Errorf("unmarshal field docker_image: %w", err)
				}
			}
		case changelog.FieldEnvValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field env_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.EnvValues); err != nil {
					return fmt.Errorf("unmarshal field env_values: %w", err)
				}
			}
		case changelog.FieldExtraValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ExtraValues); err != nil {
					return fmt.Errorf("unmarshal field extra_values: %w", err)
				}
			}
		case changelog.FieldFinalExtraValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field final_extra_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.FinalExtraValues); err != nil {
					return fmt.Errorf("unmarshal field final_extra_values: %w", err)
				}
			}
		case changelog.FieldGitCommitWebURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_web_url", values[i])
			} else if value.Valid {
				c.GitCommitWebURL = value.String
			}
		case changelog.FieldGitCommitTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_title", values[i])
			} else if value.Valid {
				c.GitCommitTitle = value.String
			}
		case changelog.FieldGitCommitAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_author", values[i])
			} else if value.Valid {
				c.GitCommitAuthor = value.String
			}
		case changelog.FieldGitCommitDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_date", values[i])
			} else if value.Valid {
				c.GitCommitDate = new(time.Time)
				*c.GitCommitDate = value.Time
			}
		case changelog.FieldConfigChanged:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field config_changed", values[i])
			} else if value.Valid {
				c.ConfigChanged = value.Bool
			}
		case changelog.FieldProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				c.ProjectID = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Changelog.
// This includes values selected through modifiers, order, etc.
func (c *Changelog) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the Changelog entity.
func (c *Changelog) QueryProject() *ProjectQuery {
	return NewChangelogClient(c.config).QueryProject(c)
}

// Update returns a builder for updating this Changelog.
// Note that you need to call Changelog.Unwrap() before calling this method if this Changelog
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Changelog) Update() *ChangelogUpdateOne {
	return NewChangelogClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Changelog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Changelog) Unwrap() *Changelog {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Changelog is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Changelog) String() string {
	var builder strings.Builder
	builder.WriteString("Changelog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", c.Version))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(c.Username)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(c.Config)
	builder.WriteString(", ")
	builder.WriteString("git_branch=")
	builder.WriteString(c.GitBranch)
	builder.WriteString(", ")
	builder.WriteString("git_commit=")
	builder.WriteString(c.GitCommit)
	builder.WriteString(", ")
	builder.WriteString("docker_image=")
	builder.WriteString(fmt.Sprintf("%v", c.DockerImage))
	builder.WriteString(", ")
	builder.WriteString("env_values=")
	builder.WriteString(fmt.Sprintf("%v", c.EnvValues))
	builder.WriteString(", ")
	builder.WriteString("extra_values=")
	builder.WriteString(fmt.Sprintf("%v", c.ExtraValues))
	builder.WriteString(", ")
	builder.WriteString("final_extra_values=")
	builder.WriteString(fmt.Sprintf("%v", c.FinalExtraValues))
	builder.WriteString(", ")
	builder.WriteString("git_commit_web_url=")
	builder.WriteString(c.GitCommitWebURL)
	builder.WriteString(", ")
	builder.WriteString("git_commit_title=")
	builder.WriteString(c.GitCommitTitle)
	builder.WriteString(", ")
	builder.WriteString("git_commit_author=")
	builder.WriteString(c.GitCommitAuthor)
	builder.WriteString(", ")
	if v := c.GitCommitDate; v != nil {
		builder.WriteString("git_commit_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("config_changed=")
	builder.WriteString(fmt.Sprintf("%v", c.ConfigChanged))
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ProjectID))
	builder.WriteByte(')')
	return builder.String()
}

// Changelogs is a parsable slice of Changelog.
type Changelogs []*Changelog
