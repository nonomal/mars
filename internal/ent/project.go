// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/api/v5/websocket"
	"github.com/duc-cnzj/mars/v5/internal/ent/namespace"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
	"github.com/duc-cnzj/mars/v5/internal/ent/repo"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 项目名
	Name string `json:"name,omitempty"`
	// GitProjectID holds the value of the "git_project_id" field.
	GitProjectID int `json:"git_project_id,omitempty"`
	// git 分支
	GitBranch string `json:"git_branch,omitempty"`
	// git commit
	GitCommit string `json:"git_commit,omitempty"`
	// Config holds the value of the "config" field.
	Config string `json:"config,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// OverrideValues holds the value of the "override_values" field.
	OverrideValues string `json:"override_values,omitempty"`
	// docker 镜像
	DockerImage []string `json:"docker_image,omitempty"`
	// pod 选择器
	PodSelectors []string `json:"pod_selectors,omitempty"`
	// Atomic holds the value of the "atomic" field.
	Atomic bool `json:"atomic,omitempty"`
	// 部署状态
	DeployStatus types.Deploy `json:"deploy_status,omitempty"`
	// 环境变量值
	EnvValues []*types.KeyValue `json:"env_values,omitempty"`
	// 额外值
	ExtraValues []*websocket.ExtraValue `json:"extra_values,omitempty"`
	// 用户表单传入的额外值 + 系统默认的额外值
	FinalExtraValues []*websocket.ExtraValue `json:"final_extra_values,omitempty"`
	// 版本
	Version int `json:"version,omitempty"`
	// ConfigType holds the value of the "config_type" field.
	ConfigType string `json:"config_type,omitempty"`
	// manifest
	Manifest []string `json:"manifest,omitempty"`
	// GitCommitWebURL holds the value of the "git_commit_web_url" field.
	GitCommitWebURL string `json:"git_commit_web_url,omitempty"`
	// GitCommitTitle holds the value of the "git_commit_title" field.
	GitCommitTitle string `json:"git_commit_title,omitempty"`
	// GitCommitAuthor holds the value of the "git_commit_author" field.
	GitCommitAuthor string `json:"git_commit_author,omitempty"`
	// GitCommitDate holds the value of the "git_commit_date" field.
	GitCommitDate *time.Time `json:"git_commit_date,omitempty"`
	// NamespaceID holds the value of the "namespace_id" field.
	NamespaceID int `json:"namespace_id,omitempty"`
	// RepoID holds the value of the "repo_id" field.
	RepoID int `json:"repo_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Changelogs holds the value of the changelogs edge.
	Changelogs []*Changelog `json:"changelogs,omitempty"`
	// Repo holds the value of the repo edge.
	Repo *Repo `json:"repo,omitempty"`
	// Namespace holds the value of the namespace edge.
	Namespace *Namespace `json:"namespace,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ChangelogsOrErr returns the Changelogs value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ChangelogsOrErr() ([]*Changelog, error) {
	if e.loadedTypes[0] {
		return e.Changelogs, nil
	}
	return nil, &NotLoadedError{edge: "changelogs"}
}

// RepoOrErr returns the Repo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) RepoOrErr() (*Repo, error) {
	if e.Repo != nil {
		return e.Repo, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: repo.Label}
	}
	return nil, &NotLoadedError{edge: "repo"}
}

// NamespaceOrErr returns the Namespace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) NamespaceOrErr() (*Namespace, error) {
	if e.Namespace != nil {
		return e.Namespace, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: namespace.Label}
	}
	return nil, &NotLoadedError{edge: "namespace"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldDockerImage, project.FieldPodSelectors, project.FieldEnvValues, project.FieldExtraValues, project.FieldFinalExtraValues, project.FieldManifest:
			values[i] = new([]byte)
		case project.FieldAtomic:
			values[i] = new(sql.NullBool)
		case project.FieldID, project.FieldGitProjectID, project.FieldDeployStatus, project.FieldVersion, project.FieldNamespaceID, project.FieldRepoID:
			values[i] = new(sql.NullInt64)
		case project.FieldName, project.FieldGitBranch, project.FieldGitCommit, project.FieldConfig, project.FieldCreator, project.FieldOverrideValues, project.FieldConfigType, project.FieldGitCommitWebURL, project.FieldGitCommitTitle, project.FieldGitCommitAuthor:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt, project.FieldDeletedAt, project.FieldGitCommitDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case project.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = new(time.Time)
				*pr.DeletedAt = value.Time
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldGitProjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field git_project_id", values[i])
			} else if value.Valid {
				pr.GitProjectID = int(value.Int64)
			}
		case project.FieldGitBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_branch", values[i])
			} else if value.Valid {
				pr.GitBranch = value.String
			}
		case project.FieldGitCommit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit", values[i])
			} else if value.Valid {
				pr.GitCommit = value.String
			}
		case project.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				pr.Config = value.String
			}
		case project.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				pr.Creator = value.String
			}
		case project.FieldOverrideValues:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field override_values", values[i])
			} else if value.Valid {
				pr.OverrideValues = value.String
			}
		case project.FieldDockerImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field docker_image", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.DockerImage); err != nil {
					return fmt.Errorf("unmarshal field docker_image: %w", err)
				}
			}
		case project.FieldPodSelectors:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pod_selectors", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.PodSelectors); err != nil {
					return fmt.Errorf("unmarshal field pod_selectors: %w", err)
				}
			}
		case project.FieldAtomic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field atomic", values[i])
			} else if value.Valid {
				pr.Atomic = value.Bool
			}
		case project.FieldDeployStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deploy_status", values[i])
			} else if value.Valid {
				pr.DeployStatus = types.Deploy(value.Int64)
			}
		case project.FieldEnvValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field env_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.EnvValues); err != nil {
					return fmt.Errorf("unmarshal field env_values: %w", err)
				}
			}
		case project.FieldExtraValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.ExtraValues); err != nil {
					return fmt.Errorf("unmarshal field extra_values: %w", err)
				}
			}
		case project.FieldFinalExtraValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field final_extra_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.FinalExtraValues); err != nil {
					return fmt.Errorf("unmarshal field final_extra_values: %w", err)
				}
			}
		case project.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pr.Version = int(value.Int64)
			}
		case project.FieldConfigType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_type", values[i])
			} else if value.Valid {
				pr.ConfigType = value.String
			}
		case project.FieldManifest:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manifest", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Manifest); err != nil {
					return fmt.Errorf("unmarshal field manifest: %w", err)
				}
			}
		case project.FieldGitCommitWebURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_web_url", values[i])
			} else if value.Valid {
				pr.GitCommitWebURL = value.String
			}
		case project.FieldGitCommitTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_title", values[i])
			} else if value.Valid {
				pr.GitCommitTitle = value.String
			}
		case project.FieldGitCommitAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_author", values[i])
			} else if value.Valid {
				pr.GitCommitAuthor = value.String
			}
		case project.FieldGitCommitDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field git_commit_date", values[i])
			} else if value.Valid {
				pr.GitCommitDate = new(time.Time)
				*pr.GitCommitDate = value.Time
			}
		case project.FieldNamespaceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field namespace_id", values[i])
			} else if value.Valid {
				pr.NamespaceID = int(value.Int64)
			}
		case project.FieldRepoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repo_id", values[i])
			} else if value.Valid {
				pr.RepoID = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryChangelogs queries the "changelogs" edge of the Project entity.
func (pr *Project) QueryChangelogs() *ChangelogQuery {
	return NewProjectClient(pr.config).QueryChangelogs(pr)
}

// QueryRepo queries the "repo" edge of the Project entity.
func (pr *Project) QueryRepo() *RepoQuery {
	return NewProjectClient(pr.config).QueryRepo(pr)
}

// QueryNamespace queries the "namespace" edge of the Project entity.
func (pr *Project) QueryNamespace() *NamespaceQuery {
	return NewProjectClient(pr.config).QueryNamespace(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("git_project_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.GitProjectID))
	builder.WriteString(", ")
	builder.WriteString("git_branch=")
	builder.WriteString(pr.GitBranch)
	builder.WriteString(", ")
	builder.WriteString("git_commit=")
	builder.WriteString(pr.GitCommit)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(pr.Config)
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(pr.Creator)
	builder.WriteString(", ")
	builder.WriteString("override_values=")
	builder.WriteString(pr.OverrideValues)
	builder.WriteString(", ")
	builder.WriteString("docker_image=")
	builder.WriteString(fmt.Sprintf("%v", pr.DockerImage))
	builder.WriteString(", ")
	builder.WriteString("pod_selectors=")
	builder.WriteString(fmt.Sprintf("%v", pr.PodSelectors))
	builder.WriteString(", ")
	builder.WriteString("atomic=")
	builder.WriteString(fmt.Sprintf("%v", pr.Atomic))
	builder.WriteString(", ")
	builder.WriteString("deploy_status=")
	builder.WriteString(fmt.Sprintf("%v", pr.DeployStatus))
	builder.WriteString(", ")
	builder.WriteString("env_values=")
	builder.WriteString(fmt.Sprintf("%v", pr.EnvValues))
	builder.WriteString(", ")
	builder.WriteString("extra_values=")
	builder.WriteString(fmt.Sprintf("%v", pr.ExtraValues))
	builder.WriteString(", ")
	builder.WriteString("final_extra_values=")
	builder.WriteString(fmt.Sprintf("%v", pr.FinalExtraValues))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", pr.Version))
	builder.WriteString(", ")
	builder.WriteString("config_type=")
	builder.WriteString(pr.ConfigType)
	builder.WriteString(", ")
	builder.WriteString("manifest=")
	builder.WriteString(fmt.Sprintf("%v", pr.Manifest))
	builder.WriteString(", ")
	builder.WriteString("git_commit_web_url=")
	builder.WriteString(pr.GitCommitWebURL)
	builder.WriteString(", ")
	builder.WriteString("git_commit_title=")
	builder.WriteString(pr.GitCommitTitle)
	builder.WriteString(", ")
	builder.WriteString("git_commit_author=")
	builder.WriteString(pr.GitCommitAuthor)
	builder.WriteString(", ")
	if v := pr.GitCommitDate; v != nil {
		builder.WriteString("git_commit_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("namespace_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.NamespaceID))
	builder.WriteString(", ")
	builder.WriteString("repo_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.RepoID))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
