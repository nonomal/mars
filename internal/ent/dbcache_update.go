// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/v5/internal/ent/dbcache"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
)

// DBCacheUpdate is the builder for updating DBCache entities.
type DBCacheUpdate struct {
	config
	hooks    []Hook
	mutation *DBCacheMutation
}

// Where appends a list predicates to the DBCacheUpdate builder.
func (dcu *DBCacheUpdate) Where(ps ...predicate.DBCache) *DBCacheUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetKey sets the "key" field.
func (dcu *DBCacheUpdate) SetKey(s string) *DBCacheUpdate {
	dcu.mutation.SetKey(s)
	return dcu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (dcu *DBCacheUpdate) SetNillableKey(s *string) *DBCacheUpdate {
	if s != nil {
		dcu.SetKey(*s)
	}
	return dcu
}

// SetValue sets the "value" field.
func (dcu *DBCacheUpdate) SetValue(s string) *DBCacheUpdate {
	dcu.mutation.SetValue(s)
	return dcu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dcu *DBCacheUpdate) SetNillableValue(s *string) *DBCacheUpdate {
	if s != nil {
		dcu.SetValue(*s)
	}
	return dcu
}

// ClearValue clears the value of the "value" field.
func (dcu *DBCacheUpdate) ClearValue() *DBCacheUpdate {
	dcu.mutation.ClearValue()
	return dcu
}

// SetExpiredAt sets the "expired_at" field.
func (dcu *DBCacheUpdate) SetExpiredAt(t time.Time) *DBCacheUpdate {
	dcu.mutation.SetExpiredAt(t)
	return dcu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (dcu *DBCacheUpdate) SetNillableExpiredAt(t *time.Time) *DBCacheUpdate {
	if t != nil {
		dcu.SetExpiredAt(*t)
	}
	return dcu
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (dcu *DBCacheUpdate) ClearExpiredAt() *DBCacheUpdate {
	dcu.mutation.ClearExpiredAt()
	return dcu
}

// Mutation returns the DBCacheMutation object of the builder.
func (dcu *DBCacheUpdate) Mutation() *DBCacheMutation {
	return dcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DBCacheUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DBCacheUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DBCacheUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DBCacheUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DBCacheUpdate) check() error {
	if v, ok := dcu.mutation.Key(); ok {
		if err := dbcache.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "DBCache.key": %w`, err)}
		}
	}
	return nil
}

func (dcu *DBCacheUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dbcache.Table, dbcache.Columns, sqlgraph.NewFieldSpec(dbcache.FieldID, field.TypeInt))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.Key(); ok {
		_spec.SetField(dbcache.FieldKey, field.TypeString, value)
	}
	if value, ok := dcu.mutation.Value(); ok {
		_spec.SetField(dbcache.FieldValue, field.TypeString, value)
	}
	if dcu.mutation.ValueCleared() {
		_spec.ClearField(dbcache.FieldValue, field.TypeString)
	}
	if value, ok := dcu.mutation.ExpiredAt(); ok {
		_spec.SetField(dbcache.FieldExpiredAt, field.TypeTime, value)
	}
	if dcu.mutation.ExpiredAtCleared() {
		_spec.ClearField(dbcache.FieldExpiredAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbcache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DBCacheUpdateOne is the builder for updating a single DBCache entity.
type DBCacheUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DBCacheMutation
}

// SetKey sets the "key" field.
func (dcuo *DBCacheUpdateOne) SetKey(s string) *DBCacheUpdateOne {
	dcuo.mutation.SetKey(s)
	return dcuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (dcuo *DBCacheUpdateOne) SetNillableKey(s *string) *DBCacheUpdateOne {
	if s != nil {
		dcuo.SetKey(*s)
	}
	return dcuo
}

// SetValue sets the "value" field.
func (dcuo *DBCacheUpdateOne) SetValue(s string) *DBCacheUpdateOne {
	dcuo.mutation.SetValue(s)
	return dcuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dcuo *DBCacheUpdateOne) SetNillableValue(s *string) *DBCacheUpdateOne {
	if s != nil {
		dcuo.SetValue(*s)
	}
	return dcuo
}

// ClearValue clears the value of the "value" field.
func (dcuo *DBCacheUpdateOne) ClearValue() *DBCacheUpdateOne {
	dcuo.mutation.ClearValue()
	return dcuo
}

// SetExpiredAt sets the "expired_at" field.
func (dcuo *DBCacheUpdateOne) SetExpiredAt(t time.Time) *DBCacheUpdateOne {
	dcuo.mutation.SetExpiredAt(t)
	return dcuo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (dcuo *DBCacheUpdateOne) SetNillableExpiredAt(t *time.Time) *DBCacheUpdateOne {
	if t != nil {
		dcuo.SetExpiredAt(*t)
	}
	return dcuo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (dcuo *DBCacheUpdateOne) ClearExpiredAt() *DBCacheUpdateOne {
	dcuo.mutation.ClearExpiredAt()
	return dcuo
}

// Mutation returns the DBCacheMutation object of the builder.
func (dcuo *DBCacheUpdateOne) Mutation() *DBCacheMutation {
	return dcuo.mutation
}

// Where appends a list predicates to the DBCacheUpdate builder.
func (dcuo *DBCacheUpdateOne) Where(ps ...predicate.DBCache) *DBCacheUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DBCacheUpdateOne) Select(field string, fields ...string) *DBCacheUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DBCache entity.
func (dcuo *DBCacheUpdateOne) Save(ctx context.Context) (*DBCache, error) {
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DBCacheUpdateOne) SaveX(ctx context.Context) *DBCache {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DBCacheUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DBCacheUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DBCacheUpdateOne) check() error {
	if v, ok := dcuo.mutation.Key(); ok {
		if err := dbcache.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "DBCache.key": %w`, err)}
		}
	}
	return nil
}

func (dcuo *DBCacheUpdateOne) sqlSave(ctx context.Context) (_node *DBCache, err error) {
	if err := dcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dbcache.Table, dbcache.Columns, sqlgraph.NewFieldSpec(dbcache.FieldID, field.TypeInt))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DBCache.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbcache.FieldID)
		for _, f := range fields {
			if !dbcache.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbcache.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.Key(); ok {
		_spec.SetField(dbcache.FieldKey, field.TypeString, value)
	}
	if value, ok := dcuo.mutation.Value(); ok {
		_spec.SetField(dbcache.FieldValue, field.TypeString, value)
	}
	if dcuo.mutation.ValueCleared() {
		_spec.ClearField(dbcache.FieldValue, field.TypeString)
	}
	if value, ok := dcuo.mutation.ExpiredAt(); ok {
		_spec.SetField(dbcache.FieldExpiredAt, field.TypeTime, value)
	}
	if dcuo.mutation.ExpiredAtCleared() {
		_spec.ClearField(dbcache.FieldExpiredAt, field.TypeTime)
	}
	_node = &DBCache{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbcache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
