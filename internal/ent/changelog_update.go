// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v5/types"
	"github.com/duc-cnzj/mars/api/v5/websocket"
	"github.com/duc-cnzj/mars/v5/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
	"github.com/duc-cnzj/mars/v5/internal/ent/project"
)

// ChangelogUpdate is the builder for updating Changelog entities.
type ChangelogUpdate struct {
	config
	hooks    []Hook
	mutation *ChangelogMutation
}

// Where appends a list predicates to the ChangelogUpdate builder.
func (cu *ChangelogUpdate) Where(ps ...predicate.Changelog) *ChangelogUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChangelogUpdate) SetUpdatedAt(t time.Time) *ChangelogUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ChangelogUpdate) SetDeletedAt(t time.Time) *ChangelogUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableDeletedAt(t *time.Time) *ChangelogUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ChangelogUpdate) ClearDeletedAt() *ChangelogUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetVersion sets the "version" field.
func (cu *ChangelogUpdate) SetVersion(i int) *ChangelogUpdate {
	cu.mutation.ResetVersion()
	cu.mutation.SetVersion(i)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableVersion(i *int) *ChangelogUpdate {
	if i != nil {
		cu.SetVersion(*i)
	}
	return cu
}

// AddVersion adds i to the "version" field.
func (cu *ChangelogUpdate) AddVersion(i int) *ChangelogUpdate {
	cu.mutation.AddVersion(i)
	return cu
}

// SetUsername sets the "username" field.
func (cu *ChangelogUpdate) SetUsername(s string) *ChangelogUpdate {
	cu.mutation.SetUsername(s)
	return cu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableUsername(s *string) *ChangelogUpdate {
	if s != nil {
		cu.SetUsername(*s)
	}
	return cu
}

// SetConfig sets the "config" field.
func (cu *ChangelogUpdate) SetConfig(s string) *ChangelogUpdate {
	cu.mutation.SetConfig(s)
	return cu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableConfig(s *string) *ChangelogUpdate {
	if s != nil {
		cu.SetConfig(*s)
	}
	return cu
}

// ClearConfig clears the value of the "config" field.
func (cu *ChangelogUpdate) ClearConfig() *ChangelogUpdate {
	cu.mutation.ClearConfig()
	return cu
}

// SetGitBranch sets the "git_branch" field.
func (cu *ChangelogUpdate) SetGitBranch(s string) *ChangelogUpdate {
	cu.mutation.SetGitBranch(s)
	return cu
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableGitBranch(s *string) *ChangelogUpdate {
	if s != nil {
		cu.SetGitBranch(*s)
	}
	return cu
}

// ClearGitBranch clears the value of the "git_branch" field.
func (cu *ChangelogUpdate) ClearGitBranch() *ChangelogUpdate {
	cu.mutation.ClearGitBranch()
	return cu
}

// SetGitCommit sets the "git_commit" field.
func (cu *ChangelogUpdate) SetGitCommit(s string) *ChangelogUpdate {
	cu.mutation.SetGitCommit(s)
	return cu
}

// SetNillableGitCommit sets the "git_commit" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableGitCommit(s *string) *ChangelogUpdate {
	if s != nil {
		cu.SetGitCommit(*s)
	}
	return cu
}

// ClearGitCommit clears the value of the "git_commit" field.
func (cu *ChangelogUpdate) ClearGitCommit() *ChangelogUpdate {
	cu.mutation.ClearGitCommit()
	return cu
}

// SetDockerImage sets the "docker_image" field.
func (cu *ChangelogUpdate) SetDockerImage(s []string) *ChangelogUpdate {
	cu.mutation.SetDockerImage(s)
	return cu
}

// AppendDockerImage appends s to the "docker_image" field.
func (cu *ChangelogUpdate) AppendDockerImage(s []string) *ChangelogUpdate {
	cu.mutation.AppendDockerImage(s)
	return cu
}

// ClearDockerImage clears the value of the "docker_image" field.
func (cu *ChangelogUpdate) ClearDockerImage() *ChangelogUpdate {
	cu.mutation.ClearDockerImage()
	return cu
}

// SetEnvValues sets the "env_values" field.
func (cu *ChangelogUpdate) SetEnvValues(tv []*types.KeyValue) *ChangelogUpdate {
	cu.mutation.SetEnvValues(tv)
	return cu
}

// AppendEnvValues appends tv to the "env_values" field.
func (cu *ChangelogUpdate) AppendEnvValues(tv []*types.KeyValue) *ChangelogUpdate {
	cu.mutation.AppendEnvValues(tv)
	return cu
}

// ClearEnvValues clears the value of the "env_values" field.
func (cu *ChangelogUpdate) ClearEnvValues() *ChangelogUpdate {
	cu.mutation.ClearEnvValues()
	return cu
}

// SetExtraValues sets the "extra_values" field.
func (cu *ChangelogUpdate) SetExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdate {
	cu.mutation.SetExtraValues(wv)
	return cu
}

// AppendExtraValues appends wv to the "extra_values" field.
func (cu *ChangelogUpdate) AppendExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdate {
	cu.mutation.AppendExtraValues(wv)
	return cu
}

// ClearExtraValues clears the value of the "extra_values" field.
func (cu *ChangelogUpdate) ClearExtraValues() *ChangelogUpdate {
	cu.mutation.ClearExtraValues()
	return cu
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (cu *ChangelogUpdate) SetFinalExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdate {
	cu.mutation.SetFinalExtraValues(wv)
	return cu
}

// AppendFinalExtraValues appends wv to the "final_extra_values" field.
func (cu *ChangelogUpdate) AppendFinalExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdate {
	cu.mutation.AppendFinalExtraValues(wv)
	return cu
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (cu *ChangelogUpdate) ClearFinalExtraValues() *ChangelogUpdate {
	cu.mutation.ClearFinalExtraValues()
	return cu
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (cu *ChangelogUpdate) SetGitCommitWebURL(s string) *ChangelogUpdate {
	cu.mutation.SetGitCommitWebURL(s)
	return cu
}

// SetNillableGitCommitWebURL sets the "git_commit_web_url" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableGitCommitWebURL(s *string) *ChangelogUpdate {
	if s != nil {
		cu.SetGitCommitWebURL(*s)
	}
	return cu
}

// ClearGitCommitWebURL clears the value of the "git_commit_web_url" field.
func (cu *ChangelogUpdate) ClearGitCommitWebURL() *ChangelogUpdate {
	cu.mutation.ClearGitCommitWebURL()
	return cu
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (cu *ChangelogUpdate) SetGitCommitTitle(s string) *ChangelogUpdate {
	cu.mutation.SetGitCommitTitle(s)
	return cu
}

// SetNillableGitCommitTitle sets the "git_commit_title" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableGitCommitTitle(s *string) *ChangelogUpdate {
	if s != nil {
		cu.SetGitCommitTitle(*s)
	}
	return cu
}

// ClearGitCommitTitle clears the value of the "git_commit_title" field.
func (cu *ChangelogUpdate) ClearGitCommitTitle() *ChangelogUpdate {
	cu.mutation.ClearGitCommitTitle()
	return cu
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (cu *ChangelogUpdate) SetGitCommitAuthor(s string) *ChangelogUpdate {
	cu.mutation.SetGitCommitAuthor(s)
	return cu
}

// SetNillableGitCommitAuthor sets the "git_commit_author" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableGitCommitAuthor(s *string) *ChangelogUpdate {
	if s != nil {
		cu.SetGitCommitAuthor(*s)
	}
	return cu
}

// ClearGitCommitAuthor clears the value of the "git_commit_author" field.
func (cu *ChangelogUpdate) ClearGitCommitAuthor() *ChangelogUpdate {
	cu.mutation.ClearGitCommitAuthor()
	return cu
}

// SetGitCommitDate sets the "git_commit_date" field.
func (cu *ChangelogUpdate) SetGitCommitDate(t time.Time) *ChangelogUpdate {
	cu.mutation.SetGitCommitDate(t)
	return cu
}

// SetNillableGitCommitDate sets the "git_commit_date" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableGitCommitDate(t *time.Time) *ChangelogUpdate {
	if t != nil {
		cu.SetGitCommitDate(*t)
	}
	return cu
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (cu *ChangelogUpdate) ClearGitCommitDate() *ChangelogUpdate {
	cu.mutation.ClearGitCommitDate()
	return cu
}

// SetConfigChanged sets the "config_changed" field.
func (cu *ChangelogUpdate) SetConfigChanged(b bool) *ChangelogUpdate {
	cu.mutation.SetConfigChanged(b)
	return cu
}

// SetNillableConfigChanged sets the "config_changed" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableConfigChanged(b *bool) *ChangelogUpdate {
	if b != nil {
		cu.SetConfigChanged(*b)
	}
	return cu
}

// SetProjectID sets the "project_id" field.
func (cu *ChangelogUpdate) SetProjectID(i int) *ChangelogUpdate {
	cu.mutation.SetProjectID(i)
	return cu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (cu *ChangelogUpdate) SetNillableProjectID(i *int) *ChangelogUpdate {
	if i != nil {
		cu.SetProjectID(*i)
	}
	return cu
}

// ClearProjectID clears the value of the "project_id" field.
func (cu *ChangelogUpdate) ClearProjectID() *ChangelogUpdate {
	cu.mutation.ClearProjectID()
	return cu
}

// SetProject sets the "project" edge to the Project entity.
func (cu *ChangelogUpdate) SetProject(p *Project) *ChangelogUpdate {
	return cu.SetProjectID(p.ID)
}

// Mutation returns the ChangelogMutation object of the builder.
func (cu *ChangelogUpdate) Mutation() *ChangelogMutation {
	return cu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (cu *ChangelogUpdate) ClearProject() *ChangelogUpdate {
	cu.mutation.ClearProject()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChangelogUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChangelogUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChangelogUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChangelogUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChangelogUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if changelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changelog.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChangelogUpdate) check() error {
	if v, ok := cu.mutation.Username(); ok {
		if err := changelog.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Changelog.username": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GitCommitTitle(); ok {
		if err := changelog.GitCommitTitleValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_title", err: fmt.Errorf(`ent: validator failed for field "Changelog.git_commit_title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GitCommitAuthor(); ok {
		if err := changelog.GitCommitAuthorValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_author", err: fmt.Errorf(`ent: validator failed for field "Changelog.git_commit_author": %w`, err)}
		}
	}
	return nil
}

func (cu *ChangelogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(changelog.Table, changelog.Columns, sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(changelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(changelog.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(changelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(changelog.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVersion(); ok {
		_spec.AddField(changelog.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Username(); ok {
		_spec.SetField(changelog.FieldUsername, field.TypeString, value)
	}
	if value, ok := cu.mutation.Config(); ok {
		_spec.SetField(changelog.FieldConfig, field.TypeString, value)
	}
	if cu.mutation.ConfigCleared() {
		_spec.ClearField(changelog.FieldConfig, field.TypeString)
	}
	if value, ok := cu.mutation.GitBranch(); ok {
		_spec.SetField(changelog.FieldGitBranch, field.TypeString, value)
	}
	if cu.mutation.GitBranchCleared() {
		_spec.ClearField(changelog.FieldGitBranch, field.TypeString)
	}
	if value, ok := cu.mutation.GitCommit(); ok {
		_spec.SetField(changelog.FieldGitCommit, field.TypeString, value)
	}
	if cu.mutation.GitCommitCleared() {
		_spec.ClearField(changelog.FieldGitCommit, field.TypeString)
	}
	if value, ok := cu.mutation.DockerImage(); ok {
		_spec.SetField(changelog.FieldDockerImage, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedDockerImage(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldDockerImage, value)
		})
	}
	if cu.mutation.DockerImageCleared() {
		_spec.ClearField(changelog.FieldDockerImage, field.TypeJSON)
	}
	if value, ok := cu.mutation.EnvValues(); ok {
		_spec.SetField(changelog.FieldEnvValues, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedEnvValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldEnvValues, value)
		})
	}
	if cu.mutation.EnvValuesCleared() {
		_spec.ClearField(changelog.FieldEnvValues, field.TypeJSON)
	}
	if value, ok := cu.mutation.ExtraValues(); ok {
		_spec.SetField(changelog.FieldExtraValues, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldExtraValues, value)
		})
	}
	if cu.mutation.ExtraValuesCleared() {
		_spec.ClearField(changelog.FieldExtraValues, field.TypeJSON)
	}
	if value, ok := cu.mutation.FinalExtraValues(); ok {
		_spec.SetField(changelog.FieldFinalExtraValues, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedFinalExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldFinalExtraValues, value)
		})
	}
	if cu.mutation.FinalExtraValuesCleared() {
		_spec.ClearField(changelog.FieldFinalExtraValues, field.TypeJSON)
	}
	if value, ok := cu.mutation.GitCommitWebURL(); ok {
		_spec.SetField(changelog.FieldGitCommitWebURL, field.TypeString, value)
	}
	if cu.mutation.GitCommitWebURLCleared() {
		_spec.ClearField(changelog.FieldGitCommitWebURL, field.TypeString)
	}
	if value, ok := cu.mutation.GitCommitTitle(); ok {
		_spec.SetField(changelog.FieldGitCommitTitle, field.TypeString, value)
	}
	if cu.mutation.GitCommitTitleCleared() {
		_spec.ClearField(changelog.FieldGitCommitTitle, field.TypeString)
	}
	if value, ok := cu.mutation.GitCommitAuthor(); ok {
		_spec.SetField(changelog.FieldGitCommitAuthor, field.TypeString, value)
	}
	if cu.mutation.GitCommitAuthorCleared() {
		_spec.ClearField(changelog.FieldGitCommitAuthor, field.TypeString)
	}
	if value, ok := cu.mutation.GitCommitDate(); ok {
		_spec.SetField(changelog.FieldGitCommitDate, field.TypeTime, value)
	}
	if cu.mutation.GitCommitDateCleared() {
		_spec.ClearField(changelog.FieldGitCommitDate, field.TypeTime)
	}
	if value, ok := cu.mutation.ConfigChanged(); ok {
		_spec.SetField(changelog.FieldConfigChanged, field.TypeBool, value)
	}
	if cu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changelog.ProjectTable,
			Columns: []string{changelog.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changelog.ProjectTable,
			Columns: []string{changelog.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChangelogUpdateOne is the builder for updating a single Changelog entity.
type ChangelogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChangelogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChangelogUpdateOne) SetUpdatedAt(t time.Time) *ChangelogUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ChangelogUpdateOne) SetDeletedAt(t time.Time) *ChangelogUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableDeletedAt(t *time.Time) *ChangelogUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ChangelogUpdateOne) ClearDeletedAt() *ChangelogUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *ChangelogUpdateOne) SetVersion(i int) *ChangelogUpdateOne {
	cuo.mutation.ResetVersion()
	cuo.mutation.SetVersion(i)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableVersion(i *int) *ChangelogUpdateOne {
	if i != nil {
		cuo.SetVersion(*i)
	}
	return cuo
}

// AddVersion adds i to the "version" field.
func (cuo *ChangelogUpdateOne) AddVersion(i int) *ChangelogUpdateOne {
	cuo.mutation.AddVersion(i)
	return cuo
}

// SetUsername sets the "username" field.
func (cuo *ChangelogUpdateOne) SetUsername(s string) *ChangelogUpdateOne {
	cuo.mutation.SetUsername(s)
	return cuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableUsername(s *string) *ChangelogUpdateOne {
	if s != nil {
		cuo.SetUsername(*s)
	}
	return cuo
}

// SetConfig sets the "config" field.
func (cuo *ChangelogUpdateOne) SetConfig(s string) *ChangelogUpdateOne {
	cuo.mutation.SetConfig(s)
	return cuo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableConfig(s *string) *ChangelogUpdateOne {
	if s != nil {
		cuo.SetConfig(*s)
	}
	return cuo
}

// ClearConfig clears the value of the "config" field.
func (cuo *ChangelogUpdateOne) ClearConfig() *ChangelogUpdateOne {
	cuo.mutation.ClearConfig()
	return cuo
}

// SetGitBranch sets the "git_branch" field.
func (cuo *ChangelogUpdateOne) SetGitBranch(s string) *ChangelogUpdateOne {
	cuo.mutation.SetGitBranch(s)
	return cuo
}

// SetNillableGitBranch sets the "git_branch" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableGitBranch(s *string) *ChangelogUpdateOne {
	if s != nil {
		cuo.SetGitBranch(*s)
	}
	return cuo
}

// ClearGitBranch clears the value of the "git_branch" field.
func (cuo *ChangelogUpdateOne) ClearGitBranch() *ChangelogUpdateOne {
	cuo.mutation.ClearGitBranch()
	return cuo
}

// SetGitCommit sets the "git_commit" field.
func (cuo *ChangelogUpdateOne) SetGitCommit(s string) *ChangelogUpdateOne {
	cuo.mutation.SetGitCommit(s)
	return cuo
}

// SetNillableGitCommit sets the "git_commit" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableGitCommit(s *string) *ChangelogUpdateOne {
	if s != nil {
		cuo.SetGitCommit(*s)
	}
	return cuo
}

// ClearGitCommit clears the value of the "git_commit" field.
func (cuo *ChangelogUpdateOne) ClearGitCommit() *ChangelogUpdateOne {
	cuo.mutation.ClearGitCommit()
	return cuo
}

// SetDockerImage sets the "docker_image" field.
func (cuo *ChangelogUpdateOne) SetDockerImage(s []string) *ChangelogUpdateOne {
	cuo.mutation.SetDockerImage(s)
	return cuo
}

// AppendDockerImage appends s to the "docker_image" field.
func (cuo *ChangelogUpdateOne) AppendDockerImage(s []string) *ChangelogUpdateOne {
	cuo.mutation.AppendDockerImage(s)
	return cuo
}

// ClearDockerImage clears the value of the "docker_image" field.
func (cuo *ChangelogUpdateOne) ClearDockerImage() *ChangelogUpdateOne {
	cuo.mutation.ClearDockerImage()
	return cuo
}

// SetEnvValues sets the "env_values" field.
func (cuo *ChangelogUpdateOne) SetEnvValues(tv []*types.KeyValue) *ChangelogUpdateOne {
	cuo.mutation.SetEnvValues(tv)
	return cuo
}

// AppendEnvValues appends tv to the "env_values" field.
func (cuo *ChangelogUpdateOne) AppendEnvValues(tv []*types.KeyValue) *ChangelogUpdateOne {
	cuo.mutation.AppendEnvValues(tv)
	return cuo
}

// ClearEnvValues clears the value of the "env_values" field.
func (cuo *ChangelogUpdateOne) ClearEnvValues() *ChangelogUpdateOne {
	cuo.mutation.ClearEnvValues()
	return cuo
}

// SetExtraValues sets the "extra_values" field.
func (cuo *ChangelogUpdateOne) SetExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdateOne {
	cuo.mutation.SetExtraValues(wv)
	return cuo
}

// AppendExtraValues appends wv to the "extra_values" field.
func (cuo *ChangelogUpdateOne) AppendExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdateOne {
	cuo.mutation.AppendExtraValues(wv)
	return cuo
}

// ClearExtraValues clears the value of the "extra_values" field.
func (cuo *ChangelogUpdateOne) ClearExtraValues() *ChangelogUpdateOne {
	cuo.mutation.ClearExtraValues()
	return cuo
}

// SetFinalExtraValues sets the "final_extra_values" field.
func (cuo *ChangelogUpdateOne) SetFinalExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdateOne {
	cuo.mutation.SetFinalExtraValues(wv)
	return cuo
}

// AppendFinalExtraValues appends wv to the "final_extra_values" field.
func (cuo *ChangelogUpdateOne) AppendFinalExtraValues(wv []*websocket.ExtraValue) *ChangelogUpdateOne {
	cuo.mutation.AppendFinalExtraValues(wv)
	return cuo
}

// ClearFinalExtraValues clears the value of the "final_extra_values" field.
func (cuo *ChangelogUpdateOne) ClearFinalExtraValues() *ChangelogUpdateOne {
	cuo.mutation.ClearFinalExtraValues()
	return cuo
}

// SetGitCommitWebURL sets the "git_commit_web_url" field.
func (cuo *ChangelogUpdateOne) SetGitCommitWebURL(s string) *ChangelogUpdateOne {
	cuo.mutation.SetGitCommitWebURL(s)
	return cuo
}

// SetNillableGitCommitWebURL sets the "git_commit_web_url" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableGitCommitWebURL(s *string) *ChangelogUpdateOne {
	if s != nil {
		cuo.SetGitCommitWebURL(*s)
	}
	return cuo
}

// ClearGitCommitWebURL clears the value of the "git_commit_web_url" field.
func (cuo *ChangelogUpdateOne) ClearGitCommitWebURL() *ChangelogUpdateOne {
	cuo.mutation.ClearGitCommitWebURL()
	return cuo
}

// SetGitCommitTitle sets the "git_commit_title" field.
func (cuo *ChangelogUpdateOne) SetGitCommitTitle(s string) *ChangelogUpdateOne {
	cuo.mutation.SetGitCommitTitle(s)
	return cuo
}

// SetNillableGitCommitTitle sets the "git_commit_title" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableGitCommitTitle(s *string) *ChangelogUpdateOne {
	if s != nil {
		cuo.SetGitCommitTitle(*s)
	}
	return cuo
}

// ClearGitCommitTitle clears the value of the "git_commit_title" field.
func (cuo *ChangelogUpdateOne) ClearGitCommitTitle() *ChangelogUpdateOne {
	cuo.mutation.ClearGitCommitTitle()
	return cuo
}

// SetGitCommitAuthor sets the "git_commit_author" field.
func (cuo *ChangelogUpdateOne) SetGitCommitAuthor(s string) *ChangelogUpdateOne {
	cuo.mutation.SetGitCommitAuthor(s)
	return cuo
}

// SetNillableGitCommitAuthor sets the "git_commit_author" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableGitCommitAuthor(s *string) *ChangelogUpdateOne {
	if s != nil {
		cuo.SetGitCommitAuthor(*s)
	}
	return cuo
}

// ClearGitCommitAuthor clears the value of the "git_commit_author" field.
func (cuo *ChangelogUpdateOne) ClearGitCommitAuthor() *ChangelogUpdateOne {
	cuo.mutation.ClearGitCommitAuthor()
	return cuo
}

// SetGitCommitDate sets the "git_commit_date" field.
func (cuo *ChangelogUpdateOne) SetGitCommitDate(t time.Time) *ChangelogUpdateOne {
	cuo.mutation.SetGitCommitDate(t)
	return cuo
}

// SetNillableGitCommitDate sets the "git_commit_date" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableGitCommitDate(t *time.Time) *ChangelogUpdateOne {
	if t != nil {
		cuo.SetGitCommitDate(*t)
	}
	return cuo
}

// ClearGitCommitDate clears the value of the "git_commit_date" field.
func (cuo *ChangelogUpdateOne) ClearGitCommitDate() *ChangelogUpdateOne {
	cuo.mutation.ClearGitCommitDate()
	return cuo
}

// SetConfigChanged sets the "config_changed" field.
func (cuo *ChangelogUpdateOne) SetConfigChanged(b bool) *ChangelogUpdateOne {
	cuo.mutation.SetConfigChanged(b)
	return cuo
}

// SetNillableConfigChanged sets the "config_changed" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableConfigChanged(b *bool) *ChangelogUpdateOne {
	if b != nil {
		cuo.SetConfigChanged(*b)
	}
	return cuo
}

// SetProjectID sets the "project_id" field.
func (cuo *ChangelogUpdateOne) SetProjectID(i int) *ChangelogUpdateOne {
	cuo.mutation.SetProjectID(i)
	return cuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (cuo *ChangelogUpdateOne) SetNillableProjectID(i *int) *ChangelogUpdateOne {
	if i != nil {
		cuo.SetProjectID(*i)
	}
	return cuo
}

// ClearProjectID clears the value of the "project_id" field.
func (cuo *ChangelogUpdateOne) ClearProjectID() *ChangelogUpdateOne {
	cuo.mutation.ClearProjectID()
	return cuo
}

// SetProject sets the "project" edge to the Project entity.
func (cuo *ChangelogUpdateOne) SetProject(p *Project) *ChangelogUpdateOne {
	return cuo.SetProjectID(p.ID)
}

// Mutation returns the ChangelogMutation object of the builder.
func (cuo *ChangelogUpdateOne) Mutation() *ChangelogMutation {
	return cuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (cuo *ChangelogUpdateOne) ClearProject() *ChangelogUpdateOne {
	cuo.mutation.ClearProject()
	return cuo
}

// Where appends a list predicates to the ChangelogUpdate builder.
func (cuo *ChangelogUpdateOne) Where(ps ...predicate.Changelog) *ChangelogUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChangelogUpdateOne) Select(field string, fields ...string) *ChangelogUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Changelog entity.
func (cuo *ChangelogUpdateOne) Save(ctx context.Context) (*Changelog, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChangelogUpdateOne) SaveX(ctx context.Context) *Changelog {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChangelogUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChangelogUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChangelogUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if changelog.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized changelog.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := changelog.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChangelogUpdateOne) check() error {
	if v, ok := cuo.mutation.Username(); ok {
		if err := changelog.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Changelog.username": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GitCommitTitle(); ok {
		if err := changelog.GitCommitTitleValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_title", err: fmt.Errorf(`ent: validator failed for field "Changelog.git_commit_title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GitCommitAuthor(); ok {
		if err := changelog.GitCommitAuthorValidator(v); err != nil {
			return &ValidationError{Name: "git_commit_author", err: fmt.Errorf(`ent: validator failed for field "Changelog.git_commit_author": %w`, err)}
		}
	}
	return nil
}

func (cuo *ChangelogUpdateOne) sqlSave(ctx context.Context) (_node *Changelog, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(changelog.Table, changelog.Columns, sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Changelog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, changelog.FieldID)
		for _, f := range fields {
			if !changelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != changelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(changelog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(changelog.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(changelog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(changelog.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVersion(); ok {
		_spec.AddField(changelog.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Username(); ok {
		_spec.SetField(changelog.FieldUsername, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Config(); ok {
		_spec.SetField(changelog.FieldConfig, field.TypeString, value)
	}
	if cuo.mutation.ConfigCleared() {
		_spec.ClearField(changelog.FieldConfig, field.TypeString)
	}
	if value, ok := cuo.mutation.GitBranch(); ok {
		_spec.SetField(changelog.FieldGitBranch, field.TypeString, value)
	}
	if cuo.mutation.GitBranchCleared() {
		_spec.ClearField(changelog.FieldGitBranch, field.TypeString)
	}
	if value, ok := cuo.mutation.GitCommit(); ok {
		_spec.SetField(changelog.FieldGitCommit, field.TypeString, value)
	}
	if cuo.mutation.GitCommitCleared() {
		_spec.ClearField(changelog.FieldGitCommit, field.TypeString)
	}
	if value, ok := cuo.mutation.DockerImage(); ok {
		_spec.SetField(changelog.FieldDockerImage, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedDockerImage(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldDockerImage, value)
		})
	}
	if cuo.mutation.DockerImageCleared() {
		_spec.ClearField(changelog.FieldDockerImage, field.TypeJSON)
	}
	if value, ok := cuo.mutation.EnvValues(); ok {
		_spec.SetField(changelog.FieldEnvValues, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedEnvValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldEnvValues, value)
		})
	}
	if cuo.mutation.EnvValuesCleared() {
		_spec.ClearField(changelog.FieldEnvValues, field.TypeJSON)
	}
	if value, ok := cuo.mutation.ExtraValues(); ok {
		_spec.SetField(changelog.FieldExtraValues, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldExtraValues, value)
		})
	}
	if cuo.mutation.ExtraValuesCleared() {
		_spec.ClearField(changelog.FieldExtraValues, field.TypeJSON)
	}
	if value, ok := cuo.mutation.FinalExtraValues(); ok {
		_spec.SetField(changelog.FieldFinalExtraValues, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedFinalExtraValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, changelog.FieldFinalExtraValues, value)
		})
	}
	if cuo.mutation.FinalExtraValuesCleared() {
		_spec.ClearField(changelog.FieldFinalExtraValues, field.TypeJSON)
	}
	if value, ok := cuo.mutation.GitCommitWebURL(); ok {
		_spec.SetField(changelog.FieldGitCommitWebURL, field.TypeString, value)
	}
	if cuo.mutation.GitCommitWebURLCleared() {
		_spec.ClearField(changelog.FieldGitCommitWebURL, field.TypeString)
	}
	if value, ok := cuo.mutation.GitCommitTitle(); ok {
		_spec.SetField(changelog.FieldGitCommitTitle, field.TypeString, value)
	}
	if cuo.mutation.GitCommitTitleCleared() {
		_spec.ClearField(changelog.FieldGitCommitTitle, field.TypeString)
	}
	if value, ok := cuo.mutation.GitCommitAuthor(); ok {
		_spec.SetField(changelog.FieldGitCommitAuthor, field.TypeString, value)
	}
	if cuo.mutation.GitCommitAuthorCleared() {
		_spec.ClearField(changelog.FieldGitCommitAuthor, field.TypeString)
	}
	if value, ok := cuo.mutation.GitCommitDate(); ok {
		_spec.SetField(changelog.FieldGitCommitDate, field.TypeTime, value)
	}
	if cuo.mutation.GitCommitDateCleared() {
		_spec.ClearField(changelog.FieldGitCommitDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.ConfigChanged(); ok {
		_spec.SetField(changelog.FieldConfigChanged, field.TypeBool, value)
	}
	if cuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changelog.ProjectTable,
			Columns: []string{changelog.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   changelog.ProjectTable,
			Columns: []string{changelog.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Changelog{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{changelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
