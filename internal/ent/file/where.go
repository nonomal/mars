// Code generated by ent, DO NOT EDIT.

package file

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
	"github.com/duc-cnzj/mars/v5/internal/ent/schema/schematype"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDeletedAt, v))
}

// UploadType applies equality check predicate on the "upload_type" field. It's identical to UploadTypeEQ.
func UploadType(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldEQ(FieldUploadType, vc))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPath, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v uint64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSize, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUsername, v))
}

// Namespace applies equality check predicate on the "namespace" field. It's identical to NamespaceEQ.
func Namespace(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldNamespace, v))
}

// Pod applies equality check predicate on the "pod" field. It's identical to PodEQ.
func Pod(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPod, v))
}

// Container applies equality check predicate on the "container" field. It's identical to ContainerEQ.
func Container(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldContainer, v))
}

// ContainerPath applies equality check predicate on the "container_path" field. It's identical to ContainerPathEQ.
func ContainerPath(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldContainerPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldDeletedAt))
}

// UploadTypeEQ applies the EQ predicate on the "upload_type" field.
func UploadTypeEQ(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldEQ(FieldUploadType, vc))
}

// UploadTypeNEQ applies the NEQ predicate on the "upload_type" field.
func UploadTypeNEQ(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldNEQ(FieldUploadType, vc))
}

// UploadTypeIn applies the In predicate on the "upload_type" field.
func UploadTypeIn(vs ...schematype.UploadType) predicate.File {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.File(sql.FieldIn(FieldUploadType, v...))
}

// UploadTypeNotIn applies the NotIn predicate on the "upload_type" field.
func UploadTypeNotIn(vs ...schematype.UploadType) predicate.File {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.File(sql.FieldNotIn(FieldUploadType, v...))
}

// UploadTypeGT applies the GT predicate on the "upload_type" field.
func UploadTypeGT(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldGT(FieldUploadType, vc))
}

// UploadTypeGTE applies the GTE predicate on the "upload_type" field.
func UploadTypeGTE(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldGTE(FieldUploadType, vc))
}

// UploadTypeLT applies the LT predicate on the "upload_type" field.
func UploadTypeLT(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldLT(FieldUploadType, vc))
}

// UploadTypeLTE applies the LTE predicate on the "upload_type" field.
func UploadTypeLTE(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldLTE(FieldUploadType, vc))
}

// UploadTypeContains applies the Contains predicate on the "upload_type" field.
func UploadTypeContains(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldContains(FieldUploadType, vc))
}

// UploadTypeHasPrefix applies the HasPrefix predicate on the "upload_type" field.
func UploadTypeHasPrefix(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldHasPrefix(FieldUploadType, vc))
}

// UploadTypeHasSuffix applies the HasSuffix predicate on the "upload_type" field.
func UploadTypeHasSuffix(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldHasSuffix(FieldUploadType, vc))
}

// UploadTypeEqualFold applies the EqualFold predicate on the "upload_type" field.
func UploadTypeEqualFold(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldEqualFold(FieldUploadType, vc))
}

// UploadTypeContainsFold applies the ContainsFold predicate on the "upload_type" field.
func UploadTypeContainsFold(v schematype.UploadType) predicate.File {
	vc := string(v)
	return predicate.File(sql.FieldContainsFold(FieldUploadType, vc))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldPath, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v uint64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v uint64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...uint64) predicate.File {
	return predicate.File(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...uint64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v uint64) predicate.File {
	return predicate.File(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v uint64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v uint64) predicate.File {
	return predicate.File(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v uint64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSize, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldUsername, v))
}

// NamespaceEQ applies the EQ predicate on the "namespace" field.
func NamespaceEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldNamespace, v))
}

// NamespaceNEQ applies the NEQ predicate on the "namespace" field.
func NamespaceNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldNamespace, v))
}

// NamespaceIn applies the In predicate on the "namespace" field.
func NamespaceIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldNamespace, vs...))
}

// NamespaceNotIn applies the NotIn predicate on the "namespace" field.
func NamespaceNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldNamespace, vs...))
}

// NamespaceGT applies the GT predicate on the "namespace" field.
func NamespaceGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldNamespace, v))
}

// NamespaceGTE applies the GTE predicate on the "namespace" field.
func NamespaceGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldNamespace, v))
}

// NamespaceLT applies the LT predicate on the "namespace" field.
func NamespaceLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldNamespace, v))
}

// NamespaceLTE applies the LTE predicate on the "namespace" field.
func NamespaceLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldNamespace, v))
}

// NamespaceContains applies the Contains predicate on the "namespace" field.
func NamespaceContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldNamespace, v))
}

// NamespaceHasPrefix applies the HasPrefix predicate on the "namespace" field.
func NamespaceHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldNamespace, v))
}

// NamespaceHasSuffix applies the HasSuffix predicate on the "namespace" field.
func NamespaceHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldNamespace, v))
}

// NamespaceEqualFold applies the EqualFold predicate on the "namespace" field.
func NamespaceEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldNamespace, v))
}

// NamespaceContainsFold applies the ContainsFold predicate on the "namespace" field.
func NamespaceContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldNamespace, v))
}

// PodEQ applies the EQ predicate on the "pod" field.
func PodEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPod, v))
}

// PodNEQ applies the NEQ predicate on the "pod" field.
func PodNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldPod, v))
}

// PodIn applies the In predicate on the "pod" field.
func PodIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldPod, vs...))
}

// PodNotIn applies the NotIn predicate on the "pod" field.
func PodNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldPod, vs...))
}

// PodGT applies the GT predicate on the "pod" field.
func PodGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldPod, v))
}

// PodGTE applies the GTE predicate on the "pod" field.
func PodGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldPod, v))
}

// PodLT applies the LT predicate on the "pod" field.
func PodLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldPod, v))
}

// PodLTE applies the LTE predicate on the "pod" field.
func PodLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldPod, v))
}

// PodContains applies the Contains predicate on the "pod" field.
func PodContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldPod, v))
}

// PodHasPrefix applies the HasPrefix predicate on the "pod" field.
func PodHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldPod, v))
}

// PodHasSuffix applies the HasSuffix predicate on the "pod" field.
func PodHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldPod, v))
}

// PodEqualFold applies the EqualFold predicate on the "pod" field.
func PodEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldPod, v))
}

// PodContainsFold applies the ContainsFold predicate on the "pod" field.
func PodContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldPod, v))
}

// ContainerEQ applies the EQ predicate on the "container" field.
func ContainerEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldContainer, v))
}

// ContainerNEQ applies the NEQ predicate on the "container" field.
func ContainerNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldContainer, v))
}

// ContainerIn applies the In predicate on the "container" field.
func ContainerIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldContainer, vs...))
}

// ContainerNotIn applies the NotIn predicate on the "container" field.
func ContainerNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldContainer, vs...))
}

// ContainerGT applies the GT predicate on the "container" field.
func ContainerGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldContainer, v))
}

// ContainerGTE applies the GTE predicate on the "container" field.
func ContainerGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldContainer, v))
}

// ContainerLT applies the LT predicate on the "container" field.
func ContainerLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldContainer, v))
}

// ContainerLTE applies the LTE predicate on the "container" field.
func ContainerLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldContainer, v))
}

// ContainerContains applies the Contains predicate on the "container" field.
func ContainerContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldContainer, v))
}

// ContainerHasPrefix applies the HasPrefix predicate on the "container" field.
func ContainerHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldContainer, v))
}

// ContainerHasSuffix applies the HasSuffix predicate on the "container" field.
func ContainerHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldContainer, v))
}

// ContainerEqualFold applies the EqualFold predicate on the "container" field.
func ContainerEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldContainer, v))
}

// ContainerContainsFold applies the ContainsFold predicate on the "container" field.
func ContainerContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldContainer, v))
}

// ContainerPathEQ applies the EQ predicate on the "container_path" field.
func ContainerPathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldContainerPath, v))
}

// ContainerPathNEQ applies the NEQ predicate on the "container_path" field.
func ContainerPathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldContainerPath, v))
}

// ContainerPathIn applies the In predicate on the "container_path" field.
func ContainerPathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldContainerPath, vs...))
}

// ContainerPathNotIn applies the NotIn predicate on the "container_path" field.
func ContainerPathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldContainerPath, vs...))
}

// ContainerPathGT applies the GT predicate on the "container_path" field.
func ContainerPathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldContainerPath, v))
}

// ContainerPathGTE applies the GTE predicate on the "container_path" field.
func ContainerPathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldContainerPath, v))
}

// ContainerPathLT applies the LT predicate on the "container_path" field.
func ContainerPathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldContainerPath, v))
}

// ContainerPathLTE applies the LTE predicate on the "container_path" field.
func ContainerPathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldContainerPath, v))
}

// ContainerPathContains applies the Contains predicate on the "container_path" field.
func ContainerPathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldContainerPath, v))
}

// ContainerPathHasPrefix applies the HasPrefix predicate on the "container_path" field.
func ContainerPathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldContainerPath, v))
}

// ContainerPathHasSuffix applies the HasSuffix predicate on the "container_path" field.
func ContainerPathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldContainerPath, v))
}

// ContainerPathEqualFold applies the EqualFold predicate on the "container_path" field.
func ContainerPathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldContainerPath, v))
}

// ContainerPathContainsFold applies the ContainsFold predicate on the "container_path" field.
func ContainerPathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldContainerPath, v))
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
