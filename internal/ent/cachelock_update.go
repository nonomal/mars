// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/v5/internal/ent/cachelock"
	"github.com/duc-cnzj/mars/v5/internal/ent/predicate"
)

// CacheLockUpdate is the builder for updating CacheLock entities.
type CacheLockUpdate struct {
	config
	hooks    []Hook
	mutation *CacheLockMutation
}

// Where appends a list predicates to the CacheLockUpdate builder.
func (clu *CacheLockUpdate) Where(ps ...predicate.CacheLock) *CacheLockUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetKey sets the "key" field.
func (clu *CacheLockUpdate) SetKey(s string) *CacheLockUpdate {
	clu.mutation.SetKey(s)
	return clu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (clu *CacheLockUpdate) SetNillableKey(s *string) *CacheLockUpdate {
	if s != nil {
		clu.SetKey(*s)
	}
	return clu
}

// SetOwner sets the "owner" field.
func (clu *CacheLockUpdate) SetOwner(s string) *CacheLockUpdate {
	clu.mutation.SetOwner(s)
	return clu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (clu *CacheLockUpdate) SetNillableOwner(s *string) *CacheLockUpdate {
	if s != nil {
		clu.SetOwner(*s)
	}
	return clu
}

// SetExpiredAt sets the "expired_at" field.
func (clu *CacheLockUpdate) SetExpiredAt(t time.Time) *CacheLockUpdate {
	clu.mutation.SetExpiredAt(t)
	return clu
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (clu *CacheLockUpdate) SetNillableExpiredAt(t *time.Time) *CacheLockUpdate {
	if t != nil {
		clu.SetExpiredAt(*t)
	}
	return clu
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (clu *CacheLockUpdate) ClearExpiredAt() *CacheLockUpdate {
	clu.mutation.ClearExpiredAt()
	return clu
}

// Mutation returns the CacheLockMutation object of the builder.
func (clu *CacheLockUpdate) Mutation() *CacheLockMutation {
	return clu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *CacheLockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *CacheLockUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *CacheLockUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *CacheLockUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *CacheLockUpdate) check() error {
	if v, ok := clu.mutation.Key(); ok {
		if err := cachelock.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "CacheLock.key": %w`, err)}
		}
	}
	if v, ok := clu.mutation.Owner(); ok {
		if err := cachelock.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "CacheLock.owner": %w`, err)}
		}
	}
	return nil
}

func (clu *CacheLockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cachelock.Table, cachelock.Columns, sqlgraph.NewFieldSpec(cachelock.FieldID, field.TypeInt))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.Key(); ok {
		_spec.SetField(cachelock.FieldKey, field.TypeString, value)
	}
	if value, ok := clu.mutation.Owner(); ok {
		_spec.SetField(cachelock.FieldOwner, field.TypeString, value)
	}
	if value, ok := clu.mutation.ExpiredAt(); ok {
		_spec.SetField(cachelock.FieldExpiredAt, field.TypeTime, value)
	}
	if clu.mutation.ExpiredAtCleared() {
		_spec.ClearField(cachelock.FieldExpiredAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachelock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// CacheLockUpdateOne is the builder for updating a single CacheLock entity.
type CacheLockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CacheLockMutation
}

// SetKey sets the "key" field.
func (cluo *CacheLockUpdateOne) SetKey(s string) *CacheLockUpdateOne {
	cluo.mutation.SetKey(s)
	return cluo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cluo *CacheLockUpdateOne) SetNillableKey(s *string) *CacheLockUpdateOne {
	if s != nil {
		cluo.SetKey(*s)
	}
	return cluo
}

// SetOwner sets the "owner" field.
func (cluo *CacheLockUpdateOne) SetOwner(s string) *CacheLockUpdateOne {
	cluo.mutation.SetOwner(s)
	return cluo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (cluo *CacheLockUpdateOne) SetNillableOwner(s *string) *CacheLockUpdateOne {
	if s != nil {
		cluo.SetOwner(*s)
	}
	return cluo
}

// SetExpiredAt sets the "expired_at" field.
func (cluo *CacheLockUpdateOne) SetExpiredAt(t time.Time) *CacheLockUpdateOne {
	cluo.mutation.SetExpiredAt(t)
	return cluo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (cluo *CacheLockUpdateOne) SetNillableExpiredAt(t *time.Time) *CacheLockUpdateOne {
	if t != nil {
		cluo.SetExpiredAt(*t)
	}
	return cluo
}

// ClearExpiredAt clears the value of the "expired_at" field.
func (cluo *CacheLockUpdateOne) ClearExpiredAt() *CacheLockUpdateOne {
	cluo.mutation.ClearExpiredAt()
	return cluo
}

// Mutation returns the CacheLockMutation object of the builder.
func (cluo *CacheLockUpdateOne) Mutation() *CacheLockMutation {
	return cluo.mutation
}

// Where appends a list predicates to the CacheLockUpdate builder.
func (cluo *CacheLockUpdateOne) Where(ps ...predicate.CacheLock) *CacheLockUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *CacheLockUpdateOne) Select(field string, fields ...string) *CacheLockUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated CacheLock entity.
func (cluo *CacheLockUpdateOne) Save(ctx context.Context) (*CacheLock, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *CacheLockUpdateOne) SaveX(ctx context.Context) *CacheLock {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *CacheLockUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *CacheLockUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *CacheLockUpdateOne) check() error {
	if v, ok := cluo.mutation.Key(); ok {
		if err := cachelock.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "CacheLock.key": %w`, err)}
		}
	}
	if v, ok := cluo.mutation.Owner(); ok {
		if err := cachelock.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "CacheLock.owner": %w`, err)}
		}
	}
	return nil
}

func (cluo *CacheLockUpdateOne) sqlSave(ctx context.Context) (_node *CacheLock, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cachelock.Table, cachelock.Columns, sqlgraph.NewFieldSpec(cachelock.FieldID, field.TypeInt))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CacheLock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cachelock.FieldID)
		for _, f := range fields {
			if !cachelock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cachelock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.Key(); ok {
		_spec.SetField(cachelock.FieldKey, field.TypeString, value)
	}
	if value, ok := cluo.mutation.Owner(); ok {
		_spec.SetField(cachelock.FieldOwner, field.TypeString, value)
	}
	if value, ok := cluo.mutation.ExpiredAt(); ok {
		_spec.SetField(cachelock.FieldExpiredAt, field.TypeTime, value)
	}
	if cluo.mutation.ExpiredAtCleared() {
		_spec.ClearField(cachelock.FieldExpiredAt, field.TypeTime)
	}
	_node = &CacheLock{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachelock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
