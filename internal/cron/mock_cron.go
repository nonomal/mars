// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v5/internal/cron (interfaces: Runner,Manager,Command)
//
// Generated by this command:
//
//	mockgen -destination ./mock_cron.go -package cron github.com/duc-cnzj/mars/v5/internal/cron Runner,Manager,Command
//

// Package cron is a generated GoMock package.
package cron

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// AddCommand mocks base method.
func (m *MockRunner) AddCommand(arg0, arg1 string, arg2 func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommand", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCommand indicates an expected call of AddCommand.
func (mr *MockRunnerMockRecorder) AddCommand(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommand", reflect.TypeOf((*MockRunner)(nil).AddCommand), arg0, arg1, arg2)
}

// Run mocks base method.
func (m *MockRunner) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRunnerMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), arg0)
}

// Shutdown mocks base method.
func (m *MockRunner) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRunnerMockRecorder) Shutdown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRunner)(nil).Shutdown), arg0)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockManager) List() []Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]Command)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockManagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockManager)(nil).List))
}

// NewCommand mocks base method.
func (m *MockManager) NewCommand(arg0 string, arg1 func() error) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommand", arg0, arg1)
	ret0, _ := ret[0].(Command)
	return ret0
}

// NewCommand indicates an expected call of NewCommand.
func (mr *MockManagerMockRecorder) NewCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommand", reflect.TypeOf((*MockManager)(nil).NewCommand), arg0, arg1)
}

// Run mocks base method.
func (m *MockManager) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockManagerMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockManager)(nil).Run), arg0)
}

// Shutdown mocks base method.
func (m *MockManager) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockManagerMockRecorder) Shutdown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockManager)(nil).Shutdown), arg0)
}

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// At mocks base method.
func (m *MockCommand) At(arg0 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "At", arg0)
	ret0, _ := ret[0].(Command)
	return ret0
}

// At indicates an expected call of At.
func (mr *MockCommandMockRecorder) At(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "At", reflect.TypeOf((*MockCommand)(nil).At), arg0)
}

// Cron mocks base method.
func (m *MockCommand) Cron(arg0 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cron", arg0)
	ret0, _ := ret[0].(Command)
	return ret0
}

// Cron indicates an expected call of Cron.
func (mr *MockCommandMockRecorder) Cron(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cron", reflect.TypeOf((*MockCommand)(nil).Cron), arg0)
}

// Daily mocks base method.
func (m *MockCommand) Daily() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Daily")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Daily indicates an expected call of Daily.
func (mr *MockCommandMockRecorder) Daily() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Daily", reflect.TypeOf((*MockCommand)(nil).Daily))
}

// DailyAt mocks base method.
func (m *MockCommand) DailyAt(arg0 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DailyAt", arg0)
	ret0, _ := ret[0].(Command)
	return ret0
}

// DailyAt indicates an expected call of DailyAt.
func (mr *MockCommandMockRecorder) DailyAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DailyAt", reflect.TypeOf((*MockCommand)(nil).DailyAt), arg0)
}

// Days mocks base method.
func (m *MockCommand) Days(arg0 []int) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Days", arg0)
	ret0, _ := ret[0].(Command)
	return ret0
}

// Days indicates an expected call of Days.
func (mr *MockCommandMockRecorder) Days(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Days", reflect.TypeOf((*MockCommand)(nil).Days), arg0)
}

// EveryFifteenMinutes mocks base method.
func (m *MockCommand) EveryFifteenMinutes() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryFifteenMinutes")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryFifteenMinutes indicates an expected call of EveryFifteenMinutes.
func (mr *MockCommandMockRecorder) EveryFifteenMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryFifteenMinutes", reflect.TypeOf((*MockCommand)(nil).EveryFifteenMinutes))
}

// EveryFifteenSeconds mocks base method.
func (m *MockCommand) EveryFifteenSeconds() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryFifteenSeconds")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryFifteenSeconds indicates an expected call of EveryFifteenSeconds.
func (mr *MockCommandMockRecorder) EveryFifteenSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryFifteenSeconds", reflect.TypeOf((*MockCommand)(nil).EveryFifteenSeconds))
}

// EveryFiveMinutes mocks base method.
func (m *MockCommand) EveryFiveMinutes() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryFiveMinutes")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryFiveMinutes indicates an expected call of EveryFiveMinutes.
func (mr *MockCommandMockRecorder) EveryFiveMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryFiveMinutes", reflect.TypeOf((*MockCommand)(nil).EveryFiveMinutes))
}

// EveryFiveSeconds mocks base method.
func (m *MockCommand) EveryFiveSeconds() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryFiveSeconds")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryFiveSeconds indicates an expected call of EveryFiveSeconds.
func (mr *MockCommandMockRecorder) EveryFiveSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryFiveSeconds", reflect.TypeOf((*MockCommand)(nil).EveryFiveSeconds))
}

// EveryFourHours mocks base method.
func (m *MockCommand) EveryFourHours() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryFourHours")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryFourHours indicates an expected call of EveryFourHours.
func (mr *MockCommandMockRecorder) EveryFourHours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryFourHours", reflect.TypeOf((*MockCommand)(nil).EveryFourHours))
}

// EveryFourMinutes mocks base method.
func (m *MockCommand) EveryFourMinutes() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryFourMinutes")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryFourMinutes indicates an expected call of EveryFourMinutes.
func (mr *MockCommandMockRecorder) EveryFourMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryFourMinutes", reflect.TypeOf((*MockCommand)(nil).EveryFourMinutes))
}

// EveryFourSeconds mocks base method.
func (m *MockCommand) EveryFourSeconds() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryFourSeconds")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryFourSeconds indicates an expected call of EveryFourSeconds.
func (mr *MockCommandMockRecorder) EveryFourSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryFourSeconds", reflect.TypeOf((*MockCommand)(nil).EveryFourSeconds))
}

// EveryMinute mocks base method.
func (m *MockCommand) EveryMinute() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryMinute")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryMinute indicates an expected call of EveryMinute.
func (mr *MockCommandMockRecorder) EveryMinute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryMinute", reflect.TypeOf((*MockCommand)(nil).EveryMinute))
}

// EverySecond mocks base method.
func (m *MockCommand) EverySecond() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EverySecond")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EverySecond indicates an expected call of EverySecond.
func (mr *MockCommandMockRecorder) EverySecond() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EverySecond", reflect.TypeOf((*MockCommand)(nil).EverySecond))
}

// EverySixHours mocks base method.
func (m *MockCommand) EverySixHours() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EverySixHours")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EverySixHours indicates an expected call of EverySixHours.
func (mr *MockCommandMockRecorder) EverySixHours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EverySixHours", reflect.TypeOf((*MockCommand)(nil).EverySixHours))
}

// EveryTenMinutes mocks base method.
func (m *MockCommand) EveryTenMinutes() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryTenMinutes")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryTenMinutes indicates an expected call of EveryTenMinutes.
func (mr *MockCommandMockRecorder) EveryTenMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryTenMinutes", reflect.TypeOf((*MockCommand)(nil).EveryTenMinutes))
}

// EveryTenSeconds mocks base method.
func (m *MockCommand) EveryTenSeconds() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryTenSeconds")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryTenSeconds indicates an expected call of EveryTenSeconds.
func (mr *MockCommandMockRecorder) EveryTenSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryTenSeconds", reflect.TypeOf((*MockCommand)(nil).EveryTenSeconds))
}

// EveryThirtyMinutes mocks base method.
func (m *MockCommand) EveryThirtyMinutes() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryThirtyMinutes")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryThirtyMinutes indicates an expected call of EveryThirtyMinutes.
func (mr *MockCommandMockRecorder) EveryThirtyMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryThirtyMinutes", reflect.TypeOf((*MockCommand)(nil).EveryThirtyMinutes))
}

// EveryThirtySeconds mocks base method.
func (m *MockCommand) EveryThirtySeconds() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryThirtySeconds")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryThirtySeconds indicates an expected call of EveryThirtySeconds.
func (mr *MockCommandMockRecorder) EveryThirtySeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryThirtySeconds", reflect.TypeOf((*MockCommand)(nil).EveryThirtySeconds))
}

// EveryThreeHours mocks base method.
func (m *MockCommand) EveryThreeHours() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryThreeHours")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryThreeHours indicates an expected call of EveryThreeHours.
func (mr *MockCommandMockRecorder) EveryThreeHours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryThreeHours", reflect.TypeOf((*MockCommand)(nil).EveryThreeHours))
}

// EveryThreeMinutes mocks base method.
func (m *MockCommand) EveryThreeMinutes() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryThreeMinutes")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryThreeMinutes indicates an expected call of EveryThreeMinutes.
func (mr *MockCommandMockRecorder) EveryThreeMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryThreeMinutes", reflect.TypeOf((*MockCommand)(nil).EveryThreeMinutes))
}

// EveryThreeSeconds mocks base method.
func (m *MockCommand) EveryThreeSeconds() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryThreeSeconds")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryThreeSeconds indicates an expected call of EveryThreeSeconds.
func (mr *MockCommandMockRecorder) EveryThreeSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryThreeSeconds", reflect.TypeOf((*MockCommand)(nil).EveryThreeSeconds))
}

// EveryTwoHours mocks base method.
func (m *MockCommand) EveryTwoHours() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryTwoHours")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryTwoHours indicates an expected call of EveryTwoHours.
func (mr *MockCommandMockRecorder) EveryTwoHours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryTwoHours", reflect.TypeOf((*MockCommand)(nil).EveryTwoHours))
}

// EveryTwoMinutes mocks base method.
func (m *MockCommand) EveryTwoMinutes() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryTwoMinutes")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryTwoMinutes indicates an expected call of EveryTwoMinutes.
func (mr *MockCommandMockRecorder) EveryTwoMinutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryTwoMinutes", reflect.TypeOf((*MockCommand)(nil).EveryTwoMinutes))
}

// EveryTwoSeconds mocks base method.
func (m *MockCommand) EveryTwoSeconds() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EveryTwoSeconds")
	ret0, _ := ret[0].(Command)
	return ret0
}

// EveryTwoSeconds indicates an expected call of EveryTwoSeconds.
func (mr *MockCommandMockRecorder) EveryTwoSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EveryTwoSeconds", reflect.TypeOf((*MockCommand)(nil).EveryTwoSeconds))
}

// Expression mocks base method.
func (m *MockCommand) Expression() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expression")
	ret0, _ := ret[0].(string)
	return ret0
}

// Expression indicates an expected call of Expression.
func (mr *MockCommandMockRecorder) Expression() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expression", reflect.TypeOf((*MockCommand)(nil).Expression))
}

// Fridays mocks base method.
func (m *MockCommand) Fridays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fridays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Fridays indicates an expected call of Fridays.
func (mr *MockCommandMockRecorder) Fridays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fridays", reflect.TypeOf((*MockCommand)(nil).Fridays))
}

// Func mocks base method.
func (m *MockCommand) Func() func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Func")
	ret0, _ := ret[0].(func())
	return ret0
}

// Func indicates an expected call of Func.
func (mr *MockCommandMockRecorder) Func() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Func", reflect.TypeOf((*MockCommand)(nil).Func))
}

// Hourly mocks base method.
func (m *MockCommand) Hourly() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hourly")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Hourly indicates an expected call of Hourly.
func (mr *MockCommandMockRecorder) Hourly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hourly", reflect.TypeOf((*MockCommand)(nil).Hourly))
}

// HourlyAt mocks base method.
func (m *MockCommand) HourlyAt(arg0 []int) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HourlyAt", arg0)
	ret0, _ := ret[0].(Command)
	return ret0
}

// HourlyAt indicates an expected call of HourlyAt.
func (mr *MockCommandMockRecorder) HourlyAt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HourlyAt", reflect.TypeOf((*MockCommand)(nil).HourlyAt), arg0)
}

// LastDayOfMonth mocks base method.
func (m *MockCommand) LastDayOfMonth(arg0 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastDayOfMonth", arg0)
	ret0, _ := ret[0].(Command)
	return ret0
}

// LastDayOfMonth indicates an expected call of LastDayOfMonth.
func (mr *MockCommandMockRecorder) LastDayOfMonth(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastDayOfMonth", reflect.TypeOf((*MockCommand)(nil).LastDayOfMonth), arg0)
}

// Mondays mocks base method.
func (m *MockCommand) Mondays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mondays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Mondays indicates an expected call of Mondays.
func (mr *MockCommandMockRecorder) Mondays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mondays", reflect.TypeOf((*MockCommand)(nil).Mondays))
}

// Monthly mocks base method.
func (m *MockCommand) Monthly() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Monthly")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Monthly indicates an expected call of Monthly.
func (mr *MockCommandMockRecorder) Monthly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Monthly", reflect.TypeOf((*MockCommand)(nil).Monthly))
}

// MonthlyOn mocks base method.
func (m *MockCommand) MonthlyOn(arg0, arg1 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MonthlyOn", arg0, arg1)
	ret0, _ := ret[0].(Command)
	return ret0
}

// MonthlyOn indicates an expected call of MonthlyOn.
func (mr *MockCommandMockRecorder) MonthlyOn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonthlyOn", reflect.TypeOf((*MockCommand)(nil).MonthlyOn), arg0, arg1)
}

// Name mocks base method.
func (m *MockCommand) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCommandMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCommand)(nil).Name))
}

// Quarterly mocks base method.
func (m *MockCommand) Quarterly() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quarterly")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Quarterly indicates an expected call of Quarterly.
func (mr *MockCommandMockRecorder) Quarterly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quarterly", reflect.TypeOf((*MockCommand)(nil).Quarterly))
}

// QuarterlyOn mocks base method.
func (m *MockCommand) QuarterlyOn(arg0, arg1 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuarterlyOn", arg0, arg1)
	ret0, _ := ret[0].(Command)
	return ret0
}

// QuarterlyOn indicates an expected call of QuarterlyOn.
func (mr *MockCommandMockRecorder) QuarterlyOn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuarterlyOn", reflect.TypeOf((*MockCommand)(nil).QuarterlyOn), arg0, arg1)
}

// Saturdays mocks base method.
func (m *MockCommand) Saturdays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Saturdays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Saturdays indicates an expected call of Saturdays.
func (mr *MockCommandMockRecorder) Saturdays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Saturdays", reflect.TypeOf((*MockCommand)(nil).Saturdays))
}

// Sundays mocks base method.
func (m *MockCommand) Sundays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sundays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Sundays indicates an expected call of Sundays.
func (mr *MockCommandMockRecorder) Sundays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sundays", reflect.TypeOf((*MockCommand)(nil).Sundays))
}

// Thursdays mocks base method.
func (m *MockCommand) Thursdays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Thursdays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Thursdays indicates an expected call of Thursdays.
func (mr *MockCommandMockRecorder) Thursdays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Thursdays", reflect.TypeOf((*MockCommand)(nil).Thursdays))
}

// Tuesdays mocks base method.
func (m *MockCommand) Tuesdays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tuesdays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Tuesdays indicates an expected call of Tuesdays.
func (mr *MockCommandMockRecorder) Tuesdays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tuesdays", reflect.TypeOf((*MockCommand)(nil).Tuesdays))
}

// Wednesdays mocks base method.
func (m *MockCommand) Wednesdays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wednesdays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Wednesdays indicates an expected call of Wednesdays.
func (mr *MockCommandMockRecorder) Wednesdays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wednesdays", reflect.TypeOf((*MockCommand)(nil).Wednesdays))
}

// Weekdays mocks base method.
func (m *MockCommand) Weekdays() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weekdays")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Weekdays indicates an expected call of Weekdays.
func (mr *MockCommandMockRecorder) Weekdays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weekdays", reflect.TypeOf((*MockCommand)(nil).Weekdays))
}

// Weekends mocks base method.
func (m *MockCommand) Weekends() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weekends")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Weekends indicates an expected call of Weekends.
func (mr *MockCommandMockRecorder) Weekends() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weekends", reflect.TypeOf((*MockCommand)(nil).Weekends))
}

// Weekly mocks base method.
func (m *MockCommand) Weekly() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weekly")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Weekly indicates an expected call of Weekly.
func (mr *MockCommandMockRecorder) Weekly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weekly", reflect.TypeOf((*MockCommand)(nil).Weekly))
}

// WeeklyOn mocks base method.
func (m *MockCommand) WeeklyOn(arg0 int, arg1 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeeklyOn", arg0, arg1)
	ret0, _ := ret[0].(Command)
	return ret0
}

// WeeklyOn indicates an expected call of WeeklyOn.
func (mr *MockCommandMockRecorder) WeeklyOn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeeklyOn", reflect.TypeOf((*MockCommand)(nil).WeeklyOn), arg0, arg1)
}

// Yearly mocks base method.
func (m *MockCommand) Yearly() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Yearly")
	ret0, _ := ret[0].(Command)
	return ret0
}

// Yearly indicates an expected call of Yearly.
func (mr *MockCommandMockRecorder) Yearly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Yearly", reflect.TypeOf((*MockCommand)(nil).Yearly))
}

// YearlyOn mocks base method.
func (m *MockCommand) YearlyOn(arg0, arg1, arg2 string) Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YearlyOn", arg0, arg1, arg2)
	ret0, _ := ret[0].(Command)
	return ret0
}

// YearlyOn indicates an expected call of YearlyOn.
func (mr *MockCommandMockRecorder) YearlyOn(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YearlyOn", reflect.TypeOf((*MockCommand)(nil).YearlyOn), arg0, arg1, arg2)
}
