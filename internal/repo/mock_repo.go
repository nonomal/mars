// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v5/internal/repo (interfaces: ProjectRepo,GitRepo,AccessTokenRepo,EventRepo,AuthRepo,ChangelogRepo,K8sRepo,EndpointRepo,FileRepo,RepoRepo,PictureRepo,NamespaceRepo,HelmerRepo,Recorder,ExecutorManager,Executor)
//
// Generated by this command:
//
//	mockgen -destination ./mock_repo.go -package repo github.com/duc-cnzj/mars/v5/internal/repo ProjectRepo,GitRepo,AccessTokenRepo,EventRepo,AuthRepo,ChangelogRepo,K8sRepo,EndpointRepo,FileRepo,RepoRepo,PictureRepo,NamespaceRepo,HelmerRepo,Recorder,ExecutorManager,Executor
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	types "github.com/duc-cnzj/mars/api/v5/types"
	application "github.com/duc-cnzj/mars/v5/internal/application"
	data "github.com/duc-cnzj/mars/v5/internal/data"
	schematype "github.com/duc-cnzj/mars/v5/internal/ent/schema/schematype"
	event "github.com/duc-cnzj/mars/v5/internal/event"
	uploader "github.com/duc-cnzj/mars/v5/internal/uploader"
	k8s "github.com/duc-cnzj/mars/v5/internal/util/k8s"
	pagination "github.com/duc-cnzj/mars/v5/internal/util/pagination"
	gomock "go.uber.org/mock/gomock"
	chart "helm.sh/helm/v3/pkg/chart"
	values "helm.sh/helm/v3/pkg/cli/values"
	release "helm.sh/helm/v3/pkg/release"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/api/events/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
)

// MockProjectRepo is a mock of ProjectRepo interface.
type MockProjectRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepoMockRecorder
}

// MockProjectRepoMockRecorder is the mock recorder for MockProjectRepo.
type MockProjectRepoMockRecorder struct {
	mock *MockProjectRepo
}

// NewMockProjectRepo creates a new mock instance.
func NewMockProjectRepo(ctrl *gomock.Controller) *MockProjectRepo {
	mock := &MockProjectRepo{ctrl: ctrl}
	mock.recorder = &MockProjectRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepo) EXPECT() *MockProjectRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectRepo) Create(arg0 context.Context, arg1 *CreateProjectInput) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockProjectRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectRepoMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectRepo)(nil).Delete), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockProjectRepo) FindByName(arg0 context.Context, arg1 string, arg2 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockProjectRepoMockRecorder) FindByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockProjectRepo)(nil).FindByName), arg0, arg1, arg2)
}

// FindByVersion mocks base method.
func (m *MockProjectRepo) FindByVersion(arg0 context.Context, arg1, arg2 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVersion indicates an expected call of FindByVersion.
func (mr *MockProjectRepoMockRecorder) FindByVersion(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVersion", reflect.TypeOf((*MockProjectRepo)(nil).FindByVersion), arg0, arg1, arg2)
}

// GetAllActiveContainers mocks base method.
func (m *MockProjectRepo) GetAllActiveContainers(arg0 context.Context, arg1 int) ([]*types.StateContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveContainers", arg0, arg1)
	ret0, _ := ret[0].([]*types.StateContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveContainers indicates an expected call of GetAllActiveContainers.
func (mr *MockProjectRepoMockRecorder) GetAllActiveContainers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveContainers", reflect.TypeOf((*MockProjectRepo)(nil).GetAllActiveContainers), arg0, arg1)
}

// GetPreOccupiedLenByValuesYaml mocks base method.
func (m *MockProjectRepo) GetPreOccupiedLenByValuesYaml(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreOccupiedLenByValuesYaml", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPreOccupiedLenByValuesYaml indicates an expected call of GetPreOccupiedLenByValuesYaml.
func (mr *MockProjectRepoMockRecorder) GetPreOccupiedLenByValuesYaml(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreOccupiedLenByValuesYaml", reflect.TypeOf((*MockProjectRepo)(nil).GetPreOccupiedLenByValuesYaml), arg0)
}

// GetProjectEndpointsInNamespace mocks base method.
func (m *MockProjectRepo) GetProjectEndpointsInNamespace(arg0 context.Context, arg1 string, arg2 ...int) ([]*types.ServiceEndpoint, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectEndpointsInNamespace", varargs...)
	ret0, _ := ret[0].([]*types.ServiceEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectEndpointsInNamespace indicates an expected call of GetProjectEndpointsInNamespace.
func (mr *MockProjectRepoMockRecorder) GetProjectEndpointsInNamespace(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectEndpointsInNamespace", reflect.TypeOf((*MockProjectRepo)(nil).GetProjectEndpointsInNamespace), varargs...)
}

// List mocks base method.
func (m *MockProjectRepo) List(arg0 context.Context, arg1 *ListProjectInput) ([]*Project, *pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*Project)
	ret1, _ := ret[1].(*pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockProjectRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectRepo)(nil).List), arg0, arg1)
}

// Show mocks base method.
func (m *MockProjectRepo) Show(arg0 context.Context, arg1 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockProjectRepoMockRecorder) Show(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockProjectRepo)(nil).Show), arg0, arg1)
}

// UpdateDeployStatus mocks base method.
func (m *MockProjectRepo) UpdateDeployStatus(arg0 context.Context, arg1 int, arg2 types.Deploy) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployStatus indicates an expected call of UpdateDeployStatus.
func (mr *MockProjectRepoMockRecorder) UpdateDeployStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployStatus", reflect.TypeOf((*MockProjectRepo)(nil).UpdateDeployStatus), arg0, arg1, arg2)
}

// UpdateProject mocks base method.
func (m *MockProjectRepo) UpdateProject(arg0 context.Context, arg1 *UpdateProjectInput) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectRepoMockRecorder) UpdateProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectRepo)(nil).UpdateProject), arg0, arg1)
}

// UpdateStatusByVersion mocks base method.
func (m *MockProjectRepo) UpdateStatusByVersion(arg0 context.Context, arg1 int, arg2 types.Deploy, arg3 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByVersion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusByVersion indicates an expected call of UpdateStatusByVersion.
func (mr *MockProjectRepoMockRecorder) UpdateStatusByVersion(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByVersion", reflect.TypeOf((*MockProjectRepo)(nil).UpdateStatusByVersion), arg0, arg1, arg2, arg3)
}

// UpdateVersion mocks base method.
func (m *MockProjectRepo) UpdateVersion(arg0 context.Context, arg1, arg2 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVersion indicates an expected call of UpdateVersion.
func (mr *MockProjectRepoMockRecorder) UpdateVersion(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersion", reflect.TypeOf((*MockProjectRepo)(nil).UpdateVersion), arg0, arg1, arg2)
}

// Version mocks base method.
func (m *MockProjectRepo) Version(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockProjectRepoMockRecorder) Version(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockProjectRepo)(nil).Version), arg0, arg1)
}

// MockGitRepo is a mock of GitRepo interface.
type MockGitRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepoMockRecorder
}

// MockGitRepoMockRecorder is the mock recorder for MockGitRepo.
type MockGitRepoMockRecorder struct {
	mock *MockGitRepo
}

// NewMockGitRepo creates a new mock instance.
func NewMockGitRepo(ctrl *gomock.Controller) *MockGitRepo {
	mock := &MockGitRepo{ctrl: ctrl}
	mock.recorder = &MockGitRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepo) EXPECT() *MockGitRepoMockRecorder {
	return m.recorder
}

// AllBranches mocks base method.
func (m *MockGitRepo) AllBranches(arg0 context.Context, arg1 int, arg2 bool) ([]*Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBranches", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBranches indicates an expected call of AllBranches.
func (mr *MockGitRepoMockRecorder) AllBranches(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBranches", reflect.TypeOf((*MockGitRepo)(nil).AllBranches), arg0, arg1, arg2)
}

// AllProjects mocks base method.
func (m *MockGitRepo) AllProjects(arg0 context.Context, arg1 bool) ([]*GitProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllProjects", arg0, arg1)
	ret0, _ := ret[0].([]*GitProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProjects indicates an expected call of AllProjects.
func (mr *MockGitRepoMockRecorder) AllProjects(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProjects", reflect.TypeOf((*MockGitRepo)(nil).AllProjects), arg0, arg1)
}

// GetByProjectID mocks base method.
func (m *MockGitRepo) GetByProjectID(arg0 context.Context, arg1 int) (*GitProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProjectID", arg0, arg1)
	ret0, _ := ret[0].(*GitProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProjectID indicates an expected call of GetByProjectID.
func (mr *MockGitRepoMockRecorder) GetByProjectID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProjectID", reflect.TypeOf((*MockGitRepo)(nil).GetByProjectID), arg0, arg1)
}

// GetChartValuesYaml mocks base method.
func (m *MockGitRepo) GetChartValuesYaml(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartValuesYaml", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartValuesYaml indicates an expected call of GetChartValuesYaml.
func (mr *MockGitRepoMockRecorder) GetChartValuesYaml(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartValuesYaml", reflect.TypeOf((*MockGitRepo)(nil).GetChartValuesYaml), arg0, arg1)
}

// GetCommit mocks base method.
func (m *MockGitRepo) GetCommit(arg0 context.Context, arg1 int, arg2 string) (*Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockGitRepoMockRecorder) GetCommit(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockGitRepo)(nil).GetCommit), arg0, arg1, arg2)
}

// GetCommitPipeline mocks base method.
func (m *MockGitRepo) GetCommitPipeline(arg0 context.Context, arg1 int, arg2, arg3 string) (*Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitPipeline", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitPipeline indicates an expected call of GetCommitPipeline.
func (mr *MockGitRepoMockRecorder) GetCommitPipeline(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitPipeline", reflect.TypeOf((*MockGitRepo)(nil).GetCommitPipeline), arg0, arg1, arg2, arg3)
}

// GetFileContentWithBranch mocks base method.
func (m *MockGitRepo) GetFileContentWithBranch(arg0 context.Context, arg1 int, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContentWithBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContentWithBranch indicates an expected call of GetFileContentWithBranch.
func (mr *MockGitRepoMockRecorder) GetFileContentWithBranch(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContentWithBranch", reflect.TypeOf((*MockGitRepo)(nil).GetFileContentWithBranch), arg0, arg1, arg2, arg3)
}

// GetProject mocks base method.
func (m *MockGitRepo) GetProject(arg0 context.Context, arg1 int) (*GitProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*GitProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockGitRepoMockRecorder) GetProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockGitRepo)(nil).GetProject), arg0, arg1)
}

// ListCommits mocks base method.
func (m *MockGitRepo) ListCommits(arg0 context.Context, arg1 int, arg2 string) ([]*Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockGitRepoMockRecorder) ListCommits(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGitRepo)(nil).ListCommits), arg0, arg1, arg2)
}

// MockAccessTokenRepo is a mock of AccessTokenRepo interface.
type MockAccessTokenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenRepoMockRecorder
}

// MockAccessTokenRepoMockRecorder is the mock recorder for MockAccessTokenRepo.
type MockAccessTokenRepoMockRecorder struct {
	mock *MockAccessTokenRepo
}

// NewMockAccessTokenRepo creates a new mock instance.
func NewMockAccessTokenRepo(ctrl *gomock.Controller) *MockAccessTokenRepo {
	mock := &MockAccessTokenRepo{ctrl: ctrl}
	mock.recorder = &MockAccessTokenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenRepo) EXPECT() *MockAccessTokenRepoMockRecorder {
	return m.recorder
}

// Grant mocks base method.
func (m *MockAccessTokenRepo) Grant(arg0 context.Context, arg1 *GrantAccessTokenInput) (*AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Grant", arg0, arg1)
	ret0, _ := ret[0].(*AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Grant indicates an expected call of Grant.
func (mr *MockAccessTokenRepoMockRecorder) Grant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Grant", reflect.TypeOf((*MockAccessTokenRepo)(nil).Grant), arg0, arg1)
}

// Lease mocks base method.
func (m *MockAccessTokenRepo) Lease(arg0 context.Context, arg1 string, arg2 int32) (*AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lease", arg0, arg1, arg2)
	ret0, _ := ret[0].(*AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lease indicates an expected call of Lease.
func (mr *MockAccessTokenRepoMockRecorder) Lease(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lease", reflect.TypeOf((*MockAccessTokenRepo)(nil).Lease), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockAccessTokenRepo) List(arg0 context.Context, arg1 *ListAccessTokenInput) ([]*AccessToken, *pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*AccessToken)
	ret1, _ := ret[1].(*pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockAccessTokenRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessTokenRepo)(nil).List), arg0, arg1)
}

// Revoke mocks base method.
func (m *MockAccessTokenRepo) Revoke(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockAccessTokenRepoMockRecorder) Revoke(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockAccessTokenRepo)(nil).Revoke), arg0, arg1)
}

// MockEventRepo is a mock of EventRepo interface.
type MockEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepoMockRecorder
}

// MockEventRepoMockRecorder is the mock recorder for MockEventRepo.
type MockEventRepoMockRecorder struct {
	mock *MockEventRepo
}

// NewMockEventRepo creates a new mock instance.
func NewMockEventRepo(ctrl *gomock.Controller) *MockEventRepo {
	mock := &MockEventRepo{ctrl: ctrl}
	mock.recorder = &MockEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepo) EXPECT() *MockEventRepoMockRecorder {
	return m.recorder
}

// AuditLog mocks base method.
func (m *MockEventRepo) AuditLog(arg0 types.EventActionType, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuditLog", arg0, arg1, arg2)
}

// AuditLog indicates an expected call of AuditLog.
func (mr *MockEventRepoMockRecorder) AuditLog(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditLog", reflect.TypeOf((*MockEventRepo)(nil).AuditLog), arg0, arg1, arg2)
}

// AuditLogWithChange mocks base method.
func (m *MockEventRepo) AuditLogWithChange(arg0 types.EventActionType, arg1, arg2 string, arg3, arg4 YamlPrettier) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuditLogWithChange", arg0, arg1, arg2, arg3, arg4)
}

// AuditLogWithChange indicates an expected call of AuditLogWithChange.
func (mr *MockEventRepoMockRecorder) AuditLogWithChange(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditLogWithChange", reflect.TypeOf((*MockEventRepo)(nil).AuditLogWithChange), arg0, arg1, arg2, arg3, arg4)
}

// AuditLogWithRequest mocks base method.
func (m *MockEventRepo) AuditLogWithRequest(arg0 types.EventActionType, arg1, arg2 string, arg3 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuditLogWithRequest", arg0, arg1, arg2, arg3)
}

// AuditLogWithRequest indicates an expected call of AuditLogWithRequest.
func (mr *MockEventRepoMockRecorder) AuditLogWithRequest(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditLogWithRequest", reflect.TypeOf((*MockEventRepo)(nil).AuditLogWithRequest), arg0, arg1, arg2, arg3)
}

// Dispatch mocks base method.
func (m *MockEventRepo) Dispatch(arg0 event.Event, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispatch", arg0, arg1)
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockEventRepoMockRecorder) Dispatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockEventRepo)(nil).Dispatch), arg0, arg1)
}

// FileAuditLog mocks base method.
func (m *MockEventRepo) FileAuditLog(arg0 types.EventActionType, arg1, arg2 string, arg3 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileAuditLog", arg0, arg1, arg2, arg3)
}

// FileAuditLog indicates an expected call of FileAuditLog.
func (mr *MockEventRepoMockRecorder) FileAuditLog(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAuditLog", reflect.TypeOf((*MockEventRepo)(nil).FileAuditLog), arg0, arg1, arg2, arg3)
}

// FileAuditLogWithDuration mocks base method.
func (m *MockEventRepo) FileAuditLogWithDuration(arg0 types.EventActionType, arg1, arg2 string, arg3 int, arg4 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileAuditLogWithDuration", arg0, arg1, arg2, arg3, arg4)
}

// FileAuditLogWithDuration indicates an expected call of FileAuditLogWithDuration.
func (mr *MockEventRepoMockRecorder) FileAuditLogWithDuration(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAuditLogWithDuration", reflect.TypeOf((*MockEventRepo)(nil).FileAuditLogWithDuration), arg0, arg1, arg2, arg3, arg4)
}

// HandleAuditLog mocks base method.
func (m *MockEventRepo) HandleAuditLog(arg0 any, arg1 event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAuditLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAuditLog indicates an expected call of HandleAuditLog.
func (mr *MockEventRepoMockRecorder) HandleAuditLog(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAuditLog", reflect.TypeOf((*MockEventRepo)(nil).HandleAuditLog), arg0, arg1)
}

// List mocks base method.
func (m *MockEventRepo) List(arg0 context.Context, arg1 *ListEventInput) ([]*Event, *pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*Event)
	ret1, _ := ret[1].(*pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockEventRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventRepo)(nil).List), arg0, arg1)
}

// Show mocks base method.
func (m *MockEventRepo) Show(arg0 context.Context, arg1 int) (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockEventRepoMockRecorder) Show(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockEventRepo)(nil).Show), arg0, arg1)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthRepo) Login(arg0 context.Context, arg1 *LoginInput) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthRepoMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthRepo)(nil).Login), arg0, arg1)
}

// Settings mocks base method.
func (m *MockAuthRepo) Settings(arg0 context.Context) (data.OidcConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Settings", arg0)
	ret0, _ := ret[0].(data.OidcConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Settings indicates an expected call of Settings.
func (mr *MockAuthRepoMockRecorder) Settings(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockAuthRepo)(nil).Settings), arg0)
}

// Sign mocks base method.
func (m *MockAuthRepo) Sign(arg0 context.Context, arg1 *schematype.UserInfo) (*LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockAuthRepoMockRecorder) Sign(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockAuthRepo)(nil).Sign), arg0, arg1)
}

// VerifyToken mocks base method.
func (m *MockAuthRepo) VerifyToken(arg0 context.Context, arg1 string) (*schematype.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0, arg1)
	ret0, _ := ret[0].(*schematype.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthRepoMockRecorder) VerifyToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthRepo)(nil).VerifyToken), arg0, arg1)
}

// MockChangelogRepo is a mock of ChangelogRepo interface.
type MockChangelogRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChangelogRepoMockRecorder
}

// MockChangelogRepoMockRecorder is the mock recorder for MockChangelogRepo.
type MockChangelogRepoMockRecorder struct {
	mock *MockChangelogRepo
}

// NewMockChangelogRepo creates a new mock instance.
func NewMockChangelogRepo(ctrl *gomock.Controller) *MockChangelogRepo {
	mock := &MockChangelogRepo{ctrl: ctrl}
	mock.recorder = &MockChangelogRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangelogRepo) EXPECT() *MockChangelogRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChangelogRepo) Create(arg0 context.Context, arg1 *CreateChangeLogInput) (*Changelog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Changelog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChangelogRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChangelogRepo)(nil).Create), arg0, arg1)
}

// FindLastChangeByProjectID mocks base method.
func (m *MockChangelogRepo) FindLastChangeByProjectID(arg0 context.Context, arg1 int) (*Changelog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastChangeByProjectID", arg0, arg1)
	ret0, _ := ret[0].(*Changelog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastChangeByProjectID indicates an expected call of FindLastChangeByProjectID.
func (mr *MockChangelogRepoMockRecorder) FindLastChangeByProjectID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastChangeByProjectID", reflect.TypeOf((*MockChangelogRepo)(nil).FindLastChangeByProjectID), arg0, arg1)
}

// FindLastChangelogsByProjectID mocks base method.
func (m *MockChangelogRepo) FindLastChangelogsByProjectID(arg0 context.Context, arg1 *FindLastChangelogsByProjectIDChangeLogInput) ([]*Changelog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastChangelogsByProjectID", arg0, arg1)
	ret0, _ := ret[0].([]*Changelog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastChangelogsByProjectID indicates an expected call of FindLastChangelogsByProjectID.
func (mr *MockChangelogRepoMockRecorder) FindLastChangelogsByProjectID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastChangelogsByProjectID", reflect.TypeOf((*MockChangelogRepo)(nil).FindLastChangelogsByProjectID), arg0, arg1)
}

// MockK8sRepo is a mock of K8sRepo interface.
type MockK8sRepo struct {
	ctrl     *gomock.Controller
	recorder *MockK8sRepoMockRecorder
}

// MockK8sRepoMockRecorder is the mock recorder for MockK8sRepo.
type MockK8sRepoMockRecorder struct {
	mock *MockK8sRepo
}

// NewMockK8sRepo creates a new mock instance.
func NewMockK8sRepo(ctrl *gomock.Controller) *MockK8sRepo {
	mock := &MockK8sRepo{ctrl: ctrl}
	mock.recorder = &MockK8sRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sRepo) EXPECT() *MockK8sRepoMockRecorder {
	return m.recorder
}

// AddTlsSecret mocks base method.
func (m *MockK8sRepo) AddTlsSecret(arg0, arg1, arg2, arg3 string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTlsSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTlsSecret indicates an expected call of AddTlsSecret.
func (mr *MockK8sRepoMockRecorder) AddTlsSecret(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTlsSecret", reflect.TypeOf((*MockK8sRepo)(nil).AddTlsSecret), arg0, arg1, arg2, arg3)
}

// ClusterInfo mocks base method.
func (m *MockK8sRepo) ClusterInfo() *ClusterInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterInfo")
	ret0, _ := ret[0].(*ClusterInfo)
	return ret0
}

// ClusterInfo indicates an expected call of ClusterInfo.
func (mr *MockK8sRepoMockRecorder) ClusterInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockK8sRepo)(nil).ClusterInfo))
}

// CopyFileToPod mocks base method.
func (m *MockK8sRepo) CopyFileToPod(arg0 context.Context, arg1 *CopyFileToPodInput) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFileToPod", arg0, arg1)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFileToPod indicates an expected call of CopyFileToPod.
func (mr *MockK8sRepoMockRecorder) CopyFileToPod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFileToPod", reflect.TypeOf((*MockK8sRepo)(nil).CopyFileToPod), arg0, arg1)
}

// CopyFromPod mocks base method.
func (m *MockK8sRepo) CopyFromPod(arg0 context.Context, arg1 *CopyFromPodInput) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromPod", arg0, arg1)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFromPod indicates an expected call of CopyFromPod.
func (mr *MockK8sRepoMockRecorder) CopyFromPod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromPod", reflect.TypeOf((*MockK8sRepo)(nil).CopyFromPod), arg0, arg1)
}

// CreateDockerSecret mocks base method.
func (m *MockK8sRepo) CreateDockerSecret(arg0 context.Context, arg1 string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerSecret", arg0, arg1)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerSecret indicates an expected call of CreateDockerSecret.
func (mr *MockK8sRepoMockRecorder) CreateDockerSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerSecret", reflect.TypeOf((*MockK8sRepo)(nil).CreateDockerSecret), arg0, arg1)
}

// CreateNamespace mocks base method.
func (m *MockK8sRepo) CreateNamespace(arg0 context.Context, arg1 string) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockK8sRepoMockRecorder) CreateNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockK8sRepo)(nil).CreateNamespace), arg0, arg1)
}

// DeleteNamespace mocks base method.
func (m *MockK8sRepo) DeleteNamespace(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockK8sRepoMockRecorder) DeleteNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockK8sRepo)(nil).DeleteNamespace), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockK8sRepo) DeleteSecret(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockK8sRepoMockRecorder) DeleteSecret(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockK8sRepo)(nil).DeleteSecret), arg0, arg1, arg2)
}

// Execute mocks base method.
func (m *MockK8sRepo) Execute(arg0 context.Context, arg1 *Container, arg2 *ExecuteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockK8sRepoMockRecorder) Execute(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockK8sRepo)(nil).Execute), arg0, arg1, arg2)
}

// FindDefaultContainer mocks base method.
func (m *MockK8sRepo) FindDefaultContainer(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDefaultContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDefaultContainer indicates an expected call of FindDefaultContainer.
func (mr *MockK8sRepoMockRecorder) FindDefaultContainer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDefaultContainer", reflect.TypeOf((*MockK8sRepo)(nil).FindDefaultContainer), arg0, arg1, arg2)
}

// GetAllPodMetrics mocks base method.
func (m *MockK8sRepo) GetAllPodMetrics(arg0 context.Context, arg1 *Project) []v1beta1.PodMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPodMetrics", arg0, arg1)
	ret0, _ := ret[0].([]v1beta1.PodMetrics)
	return ret0
}

// GetAllPodMetrics indicates an expected call of GetAllPodMetrics.
func (mr *MockK8sRepoMockRecorder) GetAllPodMetrics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPodMetrics", reflect.TypeOf((*MockK8sRepo)(nil).GetAllPodMetrics), arg0, arg1)
}

// GetCpuAndMemory mocks base method.
func (m *MockK8sRepo) GetCpuAndMemory(arg0 context.Context, arg1 []v1beta1.PodMetrics) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAndMemory", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetCpuAndMemory indicates an expected call of GetCpuAndMemory.
func (mr *MockK8sRepoMockRecorder) GetCpuAndMemory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAndMemory", reflect.TypeOf((*MockK8sRepo)(nil).GetCpuAndMemory), arg0, arg1)
}

// GetCpuAndMemoryInNamespace mocks base method.
func (m *MockK8sRepo) GetCpuAndMemoryInNamespace(arg0 context.Context, arg1 string) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAndMemoryInNamespace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetCpuAndMemoryInNamespace indicates an expected call of GetCpuAndMemoryInNamespace.
func (mr *MockK8sRepoMockRecorder) GetCpuAndMemoryInNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAndMemoryInNamespace", reflect.TypeOf((*MockK8sRepo)(nil).GetCpuAndMemoryInNamespace), arg0, arg1)
}

// GetCpuAndMemoryQuantity mocks base method.
func (m *MockK8sRepo) GetCpuAndMemoryQuantity(arg0 v1beta1.PodMetrics) (*resource.Quantity, *resource.Quantity) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuAndMemoryQuantity", arg0)
	ret0, _ := ret[0].(*resource.Quantity)
	ret1, _ := ret[1].(*resource.Quantity)
	return ret0, ret1
}

// GetCpuAndMemoryQuantity indicates an expected call of GetCpuAndMemoryQuantity.
func (mr *MockK8sRepoMockRecorder) GetCpuAndMemoryQuantity(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuAndMemoryQuantity", reflect.TypeOf((*MockK8sRepo)(nil).GetCpuAndMemoryQuantity), arg0)
}

// GetNamespace mocks base method.
func (m *MockK8sRepo) GetNamespace(arg0 context.Context, arg1 string) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockK8sRepoMockRecorder) GetNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockK8sRepo)(nil).GetNamespace), arg0, arg1)
}

// GetPod mocks base method.
func (m *MockK8sRepo) GetPod(arg0, arg1 string) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", arg0, arg1)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockK8sRepoMockRecorder) GetPod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockK8sRepo)(nil).GetPod), arg0, arg1)
}

// GetPodLogs mocks base method.
func (m *MockK8sRepo) GetPodLogs(arg0 context.Context, arg1, arg2 string, arg3 *v1.PodLogOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodLogs indicates an expected call of GetPodLogs.
func (mr *MockK8sRepoMockRecorder) GetPodLogs(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodLogs", reflect.TypeOf((*MockK8sRepo)(nil).GetPodLogs), arg0, arg1, arg2, arg3)
}

// GetPodMetrics mocks base method.
func (m *MockK8sRepo) GetPodMetrics(arg0 context.Context, arg1, arg2 string) (*v1beta1.PodMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodMetrics", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1beta1.PodMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodMetrics indicates an expected call of GetPodMetrics.
func (mr *MockK8sRepoMockRecorder) GetPodMetrics(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodMetrics", reflect.TypeOf((*MockK8sRepo)(nil).GetPodMetrics), arg0, arg1, arg2)
}

// GetPodSelectorsByManifest mocks base method.
func (m *MockK8sRepo) GetPodSelectorsByManifest(arg0 []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodSelectorsByManifest", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPodSelectorsByManifest indicates an expected call of GetPodSelectorsByManifest.
func (mr *MockK8sRepoMockRecorder) GetPodSelectorsByManifest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodSelectorsByManifest", reflect.TypeOf((*MockK8sRepo)(nil).GetPodSelectorsByManifest), arg0)
}

// IsPodRunning mocks base method.
func (m *MockK8sRepo) IsPodRunning(arg0, arg1 string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPodRunning", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// IsPodRunning indicates an expected call of IsPodRunning.
func (mr *MockK8sRepoMockRecorder) IsPodRunning(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPodRunning", reflect.TypeOf((*MockK8sRepo)(nil).IsPodRunning), arg0, arg1)
}

// ListEvents mocks base method.
func (m *MockK8sRepo) ListEvents(arg0 string) ([]*v10.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0)
	ret0, _ := ret[0].([]*v10.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockK8sRepoMockRecorder) ListEvents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockK8sRepo)(nil).ListEvents), arg0)
}

// LogStream mocks base method.
func (m *MockK8sRepo) LogStream(arg0 context.Context, arg1, arg2, arg3 string) (chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogStream indicates an expected call of LogStream.
func (mr *MockK8sRepoMockRecorder) LogStream(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogStream", reflect.TypeOf((*MockK8sRepo)(nil).LogStream), arg0, arg1, arg2, arg3)
}

// SplitManifests mocks base method.
func (m *MockK8sRepo) SplitManifests(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitManifests", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// SplitManifests indicates an expected call of SplitManifests.
func (mr *MockK8sRepoMockRecorder) SplitManifests(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitManifests", reflect.TypeOf((*MockK8sRepo)(nil).SplitManifests), arg0)
}

// MockEndpointRepo is a mock of EndpointRepo interface.
type MockEndpointRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointRepoMockRecorder
}

// MockEndpointRepoMockRecorder is the mock recorder for MockEndpointRepo.
type MockEndpointRepoMockRecorder struct {
	mock *MockEndpointRepo
}

// NewMockEndpointRepo creates a new mock instance.
func NewMockEndpointRepo(ctrl *gomock.Controller) *MockEndpointRepo {
	mock := &MockEndpointRepo{ctrl: ctrl}
	mock.recorder = &MockEndpointRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointRepo) EXPECT() *MockEndpointRepoMockRecorder {
	return m.recorder
}

// InNamespace mocks base method.
func (m *MockEndpointRepo) InNamespace(arg0 context.Context, arg1 int) ([]*types.ServiceEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InNamespace", arg0, arg1)
	ret0, _ := ret[0].([]*types.ServiceEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InNamespace indicates an expected call of InNamespace.
func (mr *MockEndpointRepoMockRecorder) InNamespace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InNamespace", reflect.TypeOf((*MockEndpointRepo)(nil).InNamespace), arg0, arg1)
}

// InProject mocks base method.
func (m *MockEndpointRepo) InProject(arg0 context.Context, arg1 int) ([]*types.ServiceEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InProject", arg0, arg1)
	ret0, _ := ret[0].([]*types.ServiceEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InProject indicates an expected call of InProject.
func (mr *MockEndpointRepoMockRecorder) InProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProject", reflect.TypeOf((*MockEndpointRepo)(nil).InProject), arg0, arg1)
}

// MockFileRepo is a mock of FileRepo interface.
type MockFileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepoMockRecorder
}

// MockFileRepoMockRecorder is the mock recorder for MockFileRepo.
type MockFileRepoMockRecorder struct {
	mock *MockFileRepo
}

// NewMockFileRepo creates a new mock instance.
func NewMockFileRepo(ctrl *gomock.Controller) *MockFileRepo {
	mock := &MockFileRepo{ctrl: ctrl}
	mock.recorder = &MockFileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepo) EXPECT() *MockFileRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileRepo) Create(arg0 context.Context, arg1 *CreateFileInput) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockFileRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileRepoMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileRepo)(nil).Delete), arg0, arg1)
}

// DiskInfo mocks base method.
func (m *MockFileRepo) DiskInfo(arg0 bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskInfo", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskInfo indicates an expected call of DiskInfo.
func (mr *MockFileRepoMockRecorder) DiskInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskInfo", reflect.TypeOf((*MockFileRepo)(nil).DiskInfo), arg0)
}

// GetByID mocks base method.
func (m *MockFileRepo) GetByID(arg0 context.Context, arg1 int) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFileRepoMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFileRepo)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockFileRepo) List(arg0 context.Context, arg1 *ListFileInput) ([]*File, *pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*File)
	ret1, _ := ret[1].(*pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFileRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFileRepo)(nil).List), arg0, arg1)
}

// MaxUploadSize mocks base method.
func (m *MockFileRepo) MaxUploadSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxUploadSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MaxUploadSize indicates an expected call of MaxUploadSize.
func (mr *MockFileRepoMockRecorder) MaxUploadSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxUploadSize", reflect.TypeOf((*MockFileRepo)(nil).MaxUploadSize))
}

// NewDisk mocks base method.
func (m *MockFileRepo) NewDisk(arg0 string) uploader.Uploader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDisk", arg0)
	ret0, _ := ret[0].(uploader.Uploader)
	return ret0
}

// NewDisk indicates an expected call of NewDisk.
func (mr *MockFileRepoMockRecorder) NewDisk(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDisk", reflect.TypeOf((*MockFileRepo)(nil).NewDisk), arg0)
}

// NewFile mocks base method.
func (m *MockFileRepo) NewFile(arg0 string) (uploader.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFile", arg0)
	ret0, _ := ret[0].(uploader.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFile indicates an expected call of NewFile.
func (mr *MockFileRepoMockRecorder) NewFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFile", reflect.TypeOf((*MockFileRepo)(nil).NewFile), arg0)
}

// NewRecorder mocks base method.
func (m *MockFileRepo) NewRecorder(arg0 *schematype.UserInfo, arg1 *Container) Recorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRecorder", arg0, arg1)
	ret0, _ := ret[0].(Recorder)
	return ret0
}

// NewRecorder indicates an expected call of NewRecorder.
func (mr *MockFileRepoMockRecorder) NewRecorder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRecorder", reflect.TypeOf((*MockFileRepo)(nil).NewRecorder), arg0, arg1)
}

// ShowRecords mocks base method.
func (m *MockFileRepo) ShowRecords(arg0 context.Context, arg1 int) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowRecords", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowRecords indicates an expected call of ShowRecords.
func (mr *MockFileRepoMockRecorder) ShowRecords(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowRecords", reflect.TypeOf((*MockFileRepo)(nil).ShowRecords), arg0, arg1)
}

// StreamUploadFile mocks base method.
func (m *MockFileRepo) StreamUploadFile(arg0 context.Context, arg1 *StreamUploadFileRequest) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamUploadFile", arg0, arg1)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamUploadFile indicates an expected call of StreamUploadFile.
func (mr *MockFileRepoMockRecorder) StreamUploadFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamUploadFile", reflect.TypeOf((*MockFileRepo)(nil).StreamUploadFile), arg0, arg1)
}

// Update mocks base method.
func (m *MockFileRepo) Update(arg0 context.Context, arg1 *UpdateFileRequest) (*File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFileRepoMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFileRepo)(nil).Update), arg0, arg1)
}

// MockRepoRepo is a mock of RepoRepo interface.
type MockRepoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoRepoMockRecorder
}

// MockRepoRepoMockRecorder is the mock recorder for MockRepoRepo.
type MockRepoRepoMockRecorder struct {
	mock *MockRepoRepo
}

// NewMockRepoRepo creates a new mock instance.
func NewMockRepoRepo(ctrl *gomock.Controller) *MockRepoRepo {
	mock := &MockRepoRepo{ctrl: ctrl}
	mock.recorder = &MockRepoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoRepo) EXPECT() *MockRepoRepoMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockRepoRepo) All(arg0 context.Context, arg1 *AllRepoRequest) ([]*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].([]*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockRepoRepoMockRecorder) All(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockRepoRepo)(nil).All), arg0, arg1)
}

// Clone mocks base method.
func (m *MockRepoRepo) Clone(arg0 context.Context, arg1 *CloneRepoInput) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", arg0, arg1)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockRepoRepoMockRecorder) Clone(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockRepoRepo)(nil).Clone), arg0, arg1)
}

// Create mocks base method.
func (m *MockRepoRepo) Create(arg0 context.Context, arg1 *CreateRepoInput) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepoRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRepoRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepoRepoMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepoRepo)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockRepoRepo) Get(arg0 context.Context, arg1 int) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepoRepoMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepoRepo)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockRepoRepo) List(arg0 context.Context, arg1 *ListRepoRequest) ([]*Repo, *pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*Repo)
	ret1, _ := ret[1].(*pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRepoRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepoRepo)(nil).List), arg0, arg1)
}

// Show mocks base method.
func (m *MockRepoRepo) Show(arg0 context.Context, arg1 int) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockRepoRepoMockRecorder) Show(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockRepoRepo)(nil).Show), arg0, arg1)
}

// ToggleEnabled mocks base method.
func (m *MockRepoRepo) ToggleEnabled(arg0 context.Context, arg1 int, arg2 bool) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleEnabled", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleEnabled indicates an expected call of ToggleEnabled.
func (mr *MockRepoRepoMockRecorder) ToggleEnabled(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleEnabled", reflect.TypeOf((*MockRepoRepo)(nil).ToggleEnabled), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockRepoRepo) Update(arg0 context.Context, arg1 *UpdateRepoInput) (*Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepoRepoMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoRepo)(nil).Update), arg0, arg1)
}

// MockPictureRepo is a mock of PictureRepo interface.
type MockPictureRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPictureRepoMockRecorder
}

// MockPictureRepoMockRecorder is the mock recorder for MockPictureRepo.
type MockPictureRepoMockRecorder struct {
	mock *MockPictureRepo
}

// NewMockPictureRepo creates a new mock instance.
func NewMockPictureRepo(ctrl *gomock.Controller) *MockPictureRepo {
	mock := &MockPictureRepo{ctrl: ctrl}
	mock.recorder = &MockPictureRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPictureRepo) EXPECT() *MockPictureRepoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPictureRepo) Get(arg0 context.Context, arg1 bool) (*application.PictureItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*application.PictureItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPictureRepoMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPictureRepo)(nil).Get), arg0, arg1)
}

// MockNamespaceRepo is a mock of NamespaceRepo interface.
type MockNamespaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceRepoMockRecorder
}

// MockNamespaceRepoMockRecorder is the mock recorder for MockNamespaceRepo.
type MockNamespaceRepoMockRecorder struct {
	mock *MockNamespaceRepo
}

// NewMockNamespaceRepo creates a new mock instance.
func NewMockNamespaceRepo(ctrl *gomock.Controller) *MockNamespaceRepo {
	mock := &MockNamespaceRepo{ctrl: ctrl}
	mock.recorder = &MockNamespaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceRepo) EXPECT() *MockNamespaceRepoMockRecorder {
	return m.recorder
}

// CanAccess mocks base method.
func (m *MockNamespaceRepo) CanAccess(arg0 context.Context, arg1 int, arg2 *schematype.UserInfo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanAccess indicates an expected call of CanAccess.
func (mr *MockNamespaceRepoMockRecorder) CanAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanAccess", reflect.TypeOf((*MockNamespaceRepo)(nil).CanAccess), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockNamespaceRepo) Create(arg0 context.Context, arg1 *CreateNamespaceInput) (*Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNamespaceRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNamespaceRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockNamespaceRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNamespaceRepoMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNamespaceRepo)(nil).Delete), arg0, arg1)
}

// Favorite mocks base method.
func (m *MockNamespaceRepo) Favorite(arg0 context.Context, arg1 *FavoriteNamespaceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Favorite", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Favorite indicates an expected call of Favorite.
func (mr *MockNamespaceRepoMockRecorder) Favorite(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Favorite", reflect.TypeOf((*MockNamespaceRepo)(nil).Favorite), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockNamespaceRepo) FindByName(arg0 context.Context, arg1 string) (*Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(*Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockNamespaceRepoMockRecorder) FindByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockNamespaceRepo)(nil).FindByName), arg0, arg1)
}

// GetMarsNamespace mocks base method.
func (m *MockNamespaceRepo) GetMarsNamespace(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarsNamespace", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMarsNamespace indicates an expected call of GetMarsNamespace.
func (mr *MockNamespaceRepoMockRecorder) GetMarsNamespace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarsNamespace", reflect.TypeOf((*MockNamespaceRepo)(nil).GetMarsNamespace), arg0)
}

// IsOwner mocks base method.
func (m *MockNamespaceRepo) IsOwner(arg0 context.Context, arg1 int, arg2 *schematype.UserInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockNamespaceRepoMockRecorder) IsOwner(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockNamespaceRepo)(nil).IsOwner), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockNamespaceRepo) List(arg0 context.Context, arg1 *ListNamespaceInput) ([]*Namespace, *pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*Namespace)
	ret1, _ := ret[1].(*pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockNamespaceRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNamespaceRepo)(nil).List), arg0, arg1)
}

// Show mocks base method.
func (m *MockNamespaceRepo) Show(arg0 context.Context, arg1 int) (*Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockNamespaceRepoMockRecorder) Show(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockNamespaceRepo)(nil).Show), arg0, arg1)
}

// SyncMembers mocks base method.
func (m *MockNamespaceRepo) SyncMembers(arg0 context.Context, arg1 int, arg2 []string) (*Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncMembers indicates an expected call of SyncMembers.
func (mr *MockNamespaceRepoMockRecorder) SyncMembers(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncMembers", reflect.TypeOf((*MockNamespaceRepo)(nil).SyncMembers), arg0, arg1, arg2)
}

// Transfer mocks base method.
func (m *MockNamespaceRepo) Transfer(arg0 context.Context, arg1 int, arg2 string) (*Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockNamespaceRepoMockRecorder) Transfer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockNamespaceRepo)(nil).Transfer), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockNamespaceRepo) Update(arg0 context.Context, arg1 *UpdateNamespaceInput) (*Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNamespaceRepoMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNamespaceRepo)(nil).Update), arg0, arg1)
}

// UpdatePrivate mocks base method.
func (m *MockNamespaceRepo) UpdatePrivate(arg0 context.Context, arg1 int, arg2 bool) (*Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivate indicates an expected call of UpdatePrivate.
func (mr *MockNamespaceRepoMockRecorder) UpdatePrivate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivate", reflect.TypeOf((*MockNamespaceRepo)(nil).UpdatePrivate), arg0, arg1, arg2)
}

// MockHelmerRepo is a mock of HelmerRepo interface.
type MockHelmerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHelmerRepoMockRecorder
}

// MockHelmerRepoMockRecorder is the mock recorder for MockHelmerRepo.
type MockHelmerRepoMockRecorder struct {
	mock *MockHelmerRepo
}

// NewMockHelmerRepo creates a new mock instance.
func NewMockHelmerRepo(ctrl *gomock.Controller) *MockHelmerRepo {
	mock := &MockHelmerRepo{ctrl: ctrl}
	mock.recorder = &MockHelmerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmerRepo) EXPECT() *MockHelmerRepoMockRecorder {
	return m.recorder
}

// PackageChart mocks base method.
func (m *MockHelmerRepo) PackageChart(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageChart", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageChart indicates an expected call of PackageChart.
func (mr *MockHelmerRepoMockRecorder) PackageChart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageChart", reflect.TypeOf((*MockHelmerRepo)(nil).PackageChart), arg0, arg1)
}

// ReleaseStatus mocks base method.
func (m *MockHelmerRepo) ReleaseStatus(arg0, arg1 string) types.Deploy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseStatus", arg0, arg1)
	ret0, _ := ret[0].(types.Deploy)
	return ret0
}

// ReleaseStatus indicates an expected call of ReleaseStatus.
func (mr *MockHelmerRepoMockRecorder) ReleaseStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseStatus", reflect.TypeOf((*MockHelmerRepo)(nil).ReleaseStatus), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockHelmerRepo) Rollback(arg0, arg1 string, arg2 bool, arg3 LogFn, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockHelmerRepoMockRecorder) Rollback(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockHelmerRepo)(nil).Rollback), arg0, arg1, arg2, arg3, arg4)
}

// Uninstall mocks base method.
func (m *MockHelmerRepo) Uninstall(arg0, arg1 string, arg2 LogFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockHelmerRepoMockRecorder) Uninstall(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockHelmerRepo)(nil).Uninstall), arg0, arg1, arg2)
}

// UpgradeOrInstall mocks base method.
func (m *MockHelmerRepo) UpgradeOrInstall(arg0 context.Context, arg1, arg2 string, arg3 *chart.Chart, arg4 *values.Options, arg5 WrapLogFn, arg6 bool, arg7 int64, arg8 bool, arg9 string) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeOrInstall", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeOrInstall indicates an expected call of UpgradeOrInstall.
func (mr *MockHelmerRepoMockRecorder) UpgradeOrInstall(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeOrInstall", reflect.TypeOf((*MockHelmerRepo)(nil).UpgradeOrInstall), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// MockRecorder is a mock of Recorder interface.
type MockRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockRecorderMockRecorder
}

// MockRecorderMockRecorder is the mock recorder for MockRecorder.
type MockRecorderMockRecorder struct {
	mock *MockRecorder
}

// NewMockRecorder creates a new mock instance.
func NewMockRecorder(ctrl *gomock.Controller) *MockRecorder {
	mock := &MockRecorder{ctrl: ctrl}
	mock.recorder = &MockRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecorder) EXPECT() *MockRecorderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRecorder) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRecorderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRecorder)(nil).Close))
}

// Container mocks base method.
func (m *MockRecorder) Container() *Container {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Container")
	ret0, _ := ret[0].(*Container)
	return ret0
}

// Container indicates an expected call of Container.
func (mr *MockRecorderMockRecorder) Container() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Container", reflect.TypeOf((*MockRecorder)(nil).Container))
}

// Duration mocks base method.
func (m *MockRecorder) Duration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Duration indicates an expected call of Duration.
func (mr *MockRecorderMockRecorder) Duration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockRecorder)(nil).Duration))
}

// File mocks base method.
func (m *MockRecorder) File() *File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File")
	ret0, _ := ret[0].(*File)
	return ret0
}

// File indicates an expected call of File.
func (mr *MockRecorderMockRecorder) File() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockRecorder)(nil).File))
}

// GetShell mocks base method.
func (m *MockRecorder) GetShell() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShell")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShell indicates an expected call of GetShell.
func (mr *MockRecorderMockRecorder) GetShell() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShell", reflect.TypeOf((*MockRecorder)(nil).GetShell))
}

// Resize mocks base method.
func (m *MockRecorder) Resize(arg0, arg1 uint16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resize", arg0, arg1)
}

// Resize indicates an expected call of Resize.
func (mr *MockRecorderMockRecorder) Resize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockRecorder)(nil).Resize), arg0, arg1)
}

// SetShell mocks base method.
func (m *MockRecorder) SetShell(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShell", arg0)
}

// SetShell indicates an expected call of SetShell.
func (mr *MockRecorderMockRecorder) SetShell(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShell", reflect.TypeOf((*MockRecorder)(nil).SetShell), arg0)
}

// User mocks base method.
func (m *MockRecorder) User() *schematype.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(*schematype.UserInfo)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRecorderMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRecorder)(nil).User))
}

// Write mocks base method.
func (m *MockRecorder) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockRecorderMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRecorder)(nil).Write), arg0)
}

// MockExecutorManager is a mock of ExecutorManager interface.
type MockExecutorManager struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorManagerMockRecorder
}

// MockExecutorManagerMockRecorder is the mock recorder for MockExecutorManager.
type MockExecutorManagerMockRecorder struct {
	mock *MockExecutorManager
}

// NewMockExecutorManager creates a new mock instance.
func NewMockExecutorManager(ctrl *gomock.Controller) *MockExecutorManager {
	mock := &MockExecutorManager{ctrl: ctrl}
	mock.recorder = &MockExecutorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorManager) EXPECT() *MockExecutorManagerMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockExecutorManager) New() Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(Executor)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockExecutorManagerMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockExecutorManager)(nil).New))
}

// NewFileCopy mocks base method.
func (m *MockExecutorManager) NewFileCopy(arg0 int, arg1 io.Writer) k8s.FileCopy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFileCopy", arg0, arg1)
	ret0, _ := ret[0].(k8s.FileCopy)
	return ret0
}

// NewFileCopy indicates an expected call of NewFileCopy.
func (mr *MockExecutorManagerMockRecorder) NewFileCopy(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFileCopy", reflect.TypeOf((*MockExecutorManager)(nil).NewFileCopy), arg0, arg1)
}

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockExecutor) Execute(arg0 context.Context, arg1 *ExecuteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutorMockRecorder) Execute(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutor)(nil).Execute), arg0, arg1)
}

// WithCommand mocks base method.
func (m *MockExecutor) WithCommand(arg0 []string) Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCommand", arg0)
	ret0, _ := ret[0].(Executor)
	return ret0
}

// WithCommand indicates an expected call of WithCommand.
func (mr *MockExecutorMockRecorder) WithCommand(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCommand", reflect.TypeOf((*MockExecutor)(nil).WithCommand), arg0)
}

// WithContainer mocks base method.
func (m *MockExecutor) WithContainer(arg0, arg1, arg2 string) Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(Executor)
	return ret0
}

// WithContainer indicates an expected call of WithContainer.
func (mr *MockExecutorMockRecorder) WithContainer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContainer", reflect.TypeOf((*MockExecutor)(nil).WithContainer), arg0, arg1, arg2)
}

// WithMethod mocks base method.
func (m *MockExecutor) WithMethod(arg0 string) Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMethod", arg0)
	ret0, _ := ret[0].(Executor)
	return ret0
}

// WithMethod indicates an expected call of WithMethod.
func (mr *MockExecutorMockRecorder) WithMethod(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMethod", reflect.TypeOf((*MockExecutor)(nil).WithMethod), arg0)
}
