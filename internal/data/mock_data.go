// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v5/internal/data (interfaces: Data)
//
// Generated by this command:
//
//	mockgen -destination ./mock_data.go -package data github.com/duc-cnzj/mars/v5/internal/data Data
//

// Package data is a generated GoMock package.
package data

import (
	context "context"
	reflect "reflect"

	config "github.com/duc-cnzj/mars/v5/internal/config"
	ent "github.com/duc-cnzj/mars/v5/internal/ent"
	minio "github.com/minio/minio-go/v7"
	gomock "go.uber.org/mock/gomock"
)

// MockData is a mock of Data interface.
type MockData struct {
	ctrl     *gomock.Controller
	recorder *MockDataMockRecorder
}

// MockDataMockRecorder is the mock recorder for MockData.
type MockDataMockRecorder struct {
	mock *MockData
}

// NewMockData creates a new mock instance.
func NewMockData(ctrl *gomock.Controller) *MockData {
	mock := &MockData{ctrl: ctrl}
	mock.recorder = &MockDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockData) EXPECT() *MockDataMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockData) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockDataMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockData)(nil).Config))
}

// DB mocks base method.
func (m *MockData) DB() *ent.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*ent.Client)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockDataMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockData)(nil).DB))
}

// InitDB mocks base method.
func (m *MockData) InitDB() (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDB")
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitDB indicates an expected call of InitDB.
func (mr *MockDataMockRecorder) InitDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDB", reflect.TypeOf((*MockData)(nil).InitDB))
}

// InitK8s mocks base method.
func (m *MockData) InitK8s(arg0 <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitK8s", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitK8s indicates an expected call of InitK8s.
func (mr *MockDataMockRecorder) InitK8s(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitK8s", reflect.TypeOf((*MockData)(nil).InitK8s), arg0)
}

// InitOidcProvider mocks base method.
func (m *MockData) InitOidcProvider() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitOidcProvider")
}

// InitOidcProvider indicates an expected call of InitOidcProvider.
func (mr *MockDataMockRecorder) InitOidcProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitOidcProvider", reflect.TypeOf((*MockData)(nil).InitOidcProvider))
}

// InitS3 mocks base method.
func (m *MockData) InitS3() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitS3")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitS3 indicates an expected call of InitS3.
func (mr *MockDataMockRecorder) InitS3() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitS3", reflect.TypeOf((*MockData)(nil).InitS3))
}

// K8sClient mocks base method.
func (m *MockData) K8sClient() *K8sClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8sClient")
	ret0, _ := ret[0].(*K8sClient)
	return ret0
}

// K8sClient indicates an expected call of K8sClient.
func (mr *MockDataMockRecorder) K8sClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8sClient", reflect.TypeOf((*MockData)(nil).K8sClient))
}

// MinioCli mocks base method.
func (m *MockData) MinioCli() *minio.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinioCli")
	ret0, _ := ret[0].(*minio.Client)
	return ret0
}

// MinioCli indicates an expected call of MinioCli.
func (mr *MockDataMockRecorder) MinioCli() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinioCli", reflect.TypeOf((*MockData)(nil).MinioCli))
}

// OidcConfig mocks base method.
func (m *MockData) OidcConfig() OidcConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OidcConfig")
	ret0, _ := ret[0].(OidcConfig)
	return ret0
}

// OidcConfig indicates an expected call of OidcConfig.
func (mr *MockDataMockRecorder) OidcConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OidcConfig", reflect.TypeOf((*MockData)(nil).OidcConfig))
}

// WithTx mocks base method.
func (m *MockData) WithTx(arg0 context.Context, arg1 func(*ent.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockDataMockRecorder) WithTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockData)(nil).WithTx), arg0, arg1)
}
