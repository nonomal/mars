/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/access_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AccessToken_List"];
        put?: never;
        post: operations["AccessToken_Grant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/access_tokens/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["AccessToken_Lease"];
        post?: never;
        delete: operations["AccessToken_Revoke"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** sso code 换取 token */
        post: operations["Auth_Exchange"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取当前登录的用户信息 */
        get: operations["Auth_Info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 登录接口 */
        post: operations["Auth_Login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取 sso 配置以及跳转 url */
        get: operations["Auth_Settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/changelogs/find_last_changelogs_by_project_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 查看项目改动日志 */
        post: operations["Changelog_FindLastChangelogsByProjectID"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cluster_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 查看集群信息 */
        get: operations["Cluster_ClusterInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/containers/copy_to_pod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 上传文件到 pod */
        post: operations["Container_CopyToPod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 查看 pod 日志
         * @description ContainerLog 查看 pod 日志
         */
        get: operations["Container_ContainerLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/stream_logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** stream 方式查看 pod 日志 */
        get: operations["Container_StreamContainerLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/containers/pod_exists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** pod 是否存在 */
        post: operations["Container_IsPodExists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/containers/pod_running_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** pod 是否 running */
        post: operations["Container_IsPodRunning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/endpoints/namespaces/{namespaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取名称空间下所有的 endpoints */
        get: operations["Endpoint_InNamespace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/endpoints/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取项目下所有的 endpoints */
        get: operations["Endpoint_InProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 用户操作事件列表 */
        get: operations["Event_List"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 查看事件详情, 包含 old, new */
        get: operations["Event_Show"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 文件列表 */
        get: operations["File_List"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/disk_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 查看文件目录大小 */
        get: operations["File_DiskInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/max_upload_size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取最大上传大小 */
        get: operations["File_MaxUploadSize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 删除文件 */
        delete: operations["File_Delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/git/all_repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取所有 git 仓库列表 */
        get: operations["Git_AllRepos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/git/get_chart_values_yaml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 获取 helm charts 的 values.yaml */
        post: operations["Git_GetChartValuesYaml"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/git/project_options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取项目信息， 用在级联列表 */
        get: operations["Git_ProjectOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/git/projects/{gitProjectId}/branch_options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取分支信息， 用在级联列表 */
        get: operations["Git_BranchOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/git/projects/{gitProjectId}/branches/{branch}/commit_options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取commit信息， 用在级联列表 */
        get: operations["Git_CommitOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/git/projects/{gitProjectId}/branches/{branch}/commits/{commit}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取 commit 详情 */
        get: operations["Git_Commit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/git/projects/{gitProjectId}/branches/{branch}/commits/{commit}/pipeline_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取 pipeline 详情 */
        get: operations["Git_PipelineInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/namespace/{namespaceId}/cpu_memory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 名称空间总共使用的 cpu memory */
        get: operations["Metrics_CpuMemoryInNamespace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/namespace/{namespace}/pods/{pod}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取 pod 的 cpu memory 信息 */
        get: operations["Metrics_TopPod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/namespace/{namespace}/pods/{pod}/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** stream 的方式获取 pod 的 cpu memory 信息 */
        get: operations["Metrics_StreamTopPod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/projects/{projectId}/cpu_memory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 项目空间总共使用的 cpu memory */
        get: operations["Metrics_CpuMemoryInProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 分页获取名称空间 */
        get: operations["Namespace_List"];
        put?: never;
        /** 创建名称空间 */
        post: operations["Namespace_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces/exists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** IsExists 名称空间是否存在 */
        post: operations["Namespace_IsExists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 关注/取消关注 */
        post: operations["Namespace_Favorite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces/sync_members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 修改空间的成员 */
        post: operations["Namespace_SyncMembers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 转让自己的空间给别人 */
        post: operations["Namespace_Transfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces/update_private": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 修改空间的访问权限 */
        post: operations["Namespace_UpdatePrivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 查看名称空间详情 */
        get: operations["Namespace_Show"];
        put?: never;
        post?: never;
        /** 删除名称空间 */
        delete: operations["Namespace_Delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/namespaces/{id}/update_desc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 更新空间描述信息 */
        post: operations["Namespace_UpdateDesc"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picture/background": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Background 获取背景图片 */
        get: operations["Picture_Background"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List 获取项目列表 */
        get: operations["Project_List"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * WebApply 创建/更新/DryRun 项目
         * @description WebApply 创建/更新/DryRun 项目
         */
        post: operations["Project_WebApply"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 项目详情
         * @description Show 项目详情
         */
        get: operations["Project_Show"];
        put?: never;
        post?: never;
        /** @description Delete 删除项目 */
        delete: operations["Project_Delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/containers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description AllContainers 获取项目下的所有 pod */
        get: operations["Project_AllContainers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/memory_cpu_and_endpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 项目的cpu/memory/endpoints */
        get: operations["Project_MemoryCpuAndEndpoints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Version 版本号, 如果不存在则返回 0 */
        get: operations["Project_Version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/record_files/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 文件详情 */
        get: operations["File_ShowRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取 repo 列表 */
        get: operations["Repo_List"];
        put?: never;
        /** 创建 repo */
        post: operations["Repo_Create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repos/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 克隆 repo */
        post: operations["Repo_Clone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repos/toggle_enabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 开启/关闭 repo */
        post: operations["Repo_ToggleEnabled"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/repos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取 repo 详情 */
        get: operations["Repo_Show"];
        /** 更新 repo */
        put: operations["Repo_Update"];
        post?: never;
        /** 删除 repo */
        delete: operations["Repo_Delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Version 获取当前版本信息 */
        get: operations["Version_Version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "auth.ExchangeRequest": {
            code: string;
        };
        "auth.ExchangeResponse": {
            token: string;
            expiresIn: string;
        };
        "auth.InfoResponse": {
            /** Format: int32 */
            id: number;
            avatar: string;
            name: string;
            email: string;
            logoutUrl: string;
            roles: string[];
        };
        "auth.LoginRequest": {
            username: string;
            password: string;
        };
        "auth.LoginResponse": {
            token: string;
            expiresIn: string;
        };
        "auth.SettingsResponse": {
            items: components["schemas"]["auth.SettingsResponse_OidcSetting"][];
        };
        "auth.SettingsResponse_OidcSetting": {
            enabled: boolean;
            name: string;
            url: string;
            endSessionEndpoint: string;
            state: string;
        };
        "changelog.FindLastChangelogsByProjectIDRequest": {
            /** Format: int32 */
            projectId: number;
            onlyChanged?: boolean;
        };
        "changelog.FindLastChangelogsByProjectIDResponse": {
            items: components["schemas"]["types.ChangelogModel"][];
        };
        "cluster.InfoResponse": {
            item: components["schemas"]["websocket.ClusterInfo"];
        };
        "container.CopyToPodRequest": {
            fileId: string;
            namespace: string;
            pod: string;
            container: string;
        };
        "container.CopyToPodResponse": {
            podFilePath: string;
            fileName: string;
        };
        "container.IsPodExistsRequest": {
            namespace: string;
            pod: string;
        };
        "container.IsPodExistsResponse": {
            exists: boolean;
        };
        "container.IsPodRunningRequest": {
            namespace: string;
            pod: string;
        };
        "container.IsPodRunningResponse": {
            running: boolean;
            reason: string;
        };
        "container.LogResponse": {
            namespace: string;
            podName: string;
            containerName: string;
            log: string;
        };
        "endpoint.InNamespaceResponse": {
            items: components["schemas"]["types.ServiceEndpoint"][];
        };
        "endpoint.InProjectResponse": {
            items: components["schemas"]["types.ServiceEndpoint"][];
        };
        "event.ListResponse": {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
            items: components["schemas"]["types.EventModel"][];
        };
        "event.ShowResponse": {
            item: components["schemas"]["types.EventModel"];
        };
        "file.DeleteResponse": Record<string, never>;
        "file.DiskInfoResponse": {
            usage: string;
            humanizeUsage: string;
        };
        "file.ListResponse": {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
            items: components["schemas"]["types.FileModel"][];
            /** Format: int32 */
            count: number;
        };
        "file.MaxUploadSizeResponse": {
            humanizeSize: string;
            /** Format: uint32 */
            bytes: number;
        };
        "file.ShowRecordsResponse": {
            items: string[];
        };
        "git.AllReposResponse": {
            items: components["schemas"]["git.AllReposResponse_Item"][];
        };
        "git.AllReposResponse_Item": {
            /** Format: int32 */
            id: number;
            name: string;
            description: string;
        };
        "git.BranchOptionsResponse": {
            items: components["schemas"]["git.Option"][];
        };
        "git.CommitOptionsResponse": {
            items: components["schemas"]["git.Option"][];
        };
        "git.CommitResponse": {
            id: string;
            shortId: string;
            /** Format: int32 */
            gitProjectId: number;
            label: string;
            title: string;
            branch: string;
            authorName: string;
            authorEmail: string;
            committerName: string;
            committerEmail: string;
            webUrl: string;
            message: string;
            committedDate: string;
            createdAt: string;
        };
        "git.GetChartValuesYamlRequest": {
            /** @description "pid|branch|path" or "path" */
            input: string;
        };
        "git.GetChartValuesYamlResponse": {
            values: string;
        };
        "git.Option": {
            value: string;
            label: string;
            type: string;
            isLeaf: boolean;
            /** Format: int32 */
            gitProjectId: number;
            branch: string;
            needGitRepo: boolean;
            description: string;
        };
        "git.PipelineInfoResponse": {
            status: string;
            webUrl: string;
        };
        "git.ProjectOptionsResponse": {
            items: components["schemas"]["git.Option"][];
        };
        /** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
        "google.protobuf.Any": {
            /** @description The type of the serialized message. */
            "@type": string;
            [key: string]: unknown;
        };
        /** @description The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
        "google.rpc.Status": {
            /**
             * Format: int32
             * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
             */
            code: number;
            /** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
            message: string;
            /** @description A list of messages that carry the error details.  There is a common set of message types for APIs to use. */
            details: components["schemas"]["google.protobuf.Any"][];
        };
        "mars.Config": {
            /** @description config_file 指定项目下的默认配置文件, 也可以是别的项目的文件，格式为 "pid|branch|filename" */
            configFile: string;
            /** @description config_file_values 全局配置文件，如果没有 ConfigFile 则使用这个 */
            configFileValues: string;
            configField: string;
            isSimpleEnv: boolean;
            /** @description config_file_type 配置文件类型，php/env/yaml... */
            configFileType: string;
            /** @description local_chart_path helm charts 目录, 格式为 "pid|branch|path",
             *      v5+ 之后不再支持本地目录 */
            localChartPath: string;
            /** @description branches 启用的分支 */
            branches: string[];
            /** @description values_yaml 和 values.yaml 一样 */
            valuesYaml: string;
            /** @description elements 自定义字段 */
            elements: components["schemas"]["mars.Element"][];
            /** @description 显示的名称 (helm app name), 不填就使用 git server project name
             *      以字母开头结尾，中间可以有 '_' '-'
             *      Deprecated: v5+ 不再使用这个字段 */
            displayName: string;
        };
        "mars.Element": {
            path: string;
            /**
             * Format: enum
             * @enum {string}
             */
            type: MarsElementType;
            default: string;
            description: string;
            selectValues: string[];
            /** Format: uint32 */
            order: number;
        };
        "metrics.CpuMemoryInNamespaceResponse": {
            cpu: string;
            memory: string;
        };
        "metrics.CpuMemoryInProjectResponse": {
            cpu: string;
            memory: string;
        };
        "metrics.TopPodResponse": {
            /** Format: double */
            cpu: number;
            /** Format: double */
            memory: number;
            humanizeCpu: string;
            humanizeMemory: string;
            time: string;
            /** Format: int32 */
            length: number;
        };
        "namespace.CreateRequest": {
            namespace: string;
            /** @description 已存在则忽略，不会报错 */
            ignoreIfExists?: boolean;
            description?: string;
        };
        "namespace.CreateResponse": {
            item: components["schemas"]["types.NamespaceModel"];
            exists: boolean;
        };
        "namespace.DeleteResponse": Record<string, never>;
        "namespace.FavoriteRequest": {
            /** Format: int32 */
            id: number;
            favorite?: boolean;
        };
        "namespace.FavoriteResponse": Record<string, never>;
        "namespace.IsExistsResponse": {
            id: string;
            exists: boolean;
        };
        "namespace.ListResponse": {
            items: components["schemas"]["types.NamespaceModel"][];
            /** Format: int32 */
            count: number;
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
        };
        "namespace.ShowResponse": {
            item: components["schemas"]["types.NamespaceModel"];
        };
        "namespace.SyncMembersRequest": {
            /** Format: int32 */
            id: number;
            emails?: string[];
        };
        "namespace.SyncMembersResponse": {
            item: components["schemas"]["types.NamespaceModel"];
        };
        "namespace.TransferRequest": {
            /** Format: int32 */
            id: number;
            /** @description 新管理员的邮箱 */
            newAdminEmail: string;
        };
        "namespace.TransferResponse": {
            item: components["schemas"]["types.NamespaceModel"];
        };
        "namespace.UpdateDescRequest": {
            /** Format: int32 */
            id: number;
            desc?: string;
        };
        "namespace.UpdateDescResponse": {
            item: components["schemas"]["types.NamespaceModel"];
        };
        "namespace.UpdatePrivateRequest": {
            /** Format: int32 */
            id: number;
            private?: boolean;
        };
        "namespace.UpdatePrivateResponse": {
            item: components["schemas"]["types.NamespaceModel"];
        };
        "picture.BackgroundResponse": {
            url: string;
            copyright: string;
        };
        "project.AllContainersResponse": {
            items: components["schemas"]["types.StateContainer"][];
        };
        "project.DeleteResponse": Record<string, never>;
        "project.ListResponse": {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
            /** Format: int32 */
            count: number;
            items: components["schemas"]["types.ProjectModel"][];
        };
        "project.MemoryCpuAndEndpointsResponse": {
            urls: components["schemas"]["types.ServiceEndpoint"][];
            cpu: string;
            memory: string;
        };
        "project.ShowResponse": {
            item: components["schemas"]["types.ProjectModel"];
        };
        "project.VersionResponse": {
            /** Format: int32 */
            version: number;
        };
        "project.WebApplyRequest": {
            /** Format: int32 */
            namespaceId: number;
            name?: string;
            /** Format: int32 */
            repoId: number;
            gitBranch?: string;
            /** @description git_commit 不传就用最新的 commit */
            gitCommit?: string;
            config?: string;
            extraValues?: components["schemas"]["websocket.ExtraValue"][];
            /**
             * Format: int32
             * @description 版本号, dryRun 时可以不传
             */
            version?: number;
            dryRun?: boolean;
        };
        "project.WebApplyResponse": {
            yamlFiles: string[];
            project: components["schemas"]["types.ProjectModel"];
            dryRun: boolean;
        };
        "repo.CloneRequest": {
            /** Format: int32 */
            id: number;
            name: string;
        };
        "repo.CloneResponse": {
            item: components["schemas"]["types.RepoModel"];
        };
        "repo.CreateRequest": {
            name: string;
            /** Format: int32 */
            gitProjectId?: number;
            marsConfig?: components["schemas"]["mars.Config"];
            needGitRepo?: boolean;
            description?: string;
        };
        "repo.CreateResponse": {
            item: components["schemas"]["types.RepoModel"];
        };
        "repo.DeleteResponse": Record<string, never>;
        "repo.ListResponse": {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
            /** Format: int32 */
            count: number;
            items: components["schemas"]["types.RepoModel"][];
        };
        "repo.ShowResponse": {
            item: components["schemas"]["types.RepoModel"];
        };
        "repo.ToggleEnabledRequest": {
            /** Format: int32 */
            id: number;
            enabled: boolean;
        };
        "repo.ToggleEnabledResponse": {
            item: components["schemas"]["types.RepoModel"];
        };
        "repo.UpdateRequest": {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            gitProjectId?: number;
            marsConfig?: components["schemas"]["mars.Config"];
            needGitRepo?: boolean;
            description?: string;
        };
        "repo.UpdateResponse": {
            item: components["schemas"]["types.RepoModel"];
        };
        "token.GrantRequest": {
            /** Format: int32 */
            expireSeconds: number;
            usage: string;
        };
        "token.GrantResponse": {
            token: components["schemas"]["types.AccessTokenModel"];
        };
        "token.LeaseRequest": {
            token: string;
            /** Format: int32 */
            expireSeconds: number;
        };
        "token.LeaseResponse": {
            token: components["schemas"]["types.AccessTokenModel"];
        };
        "token.ListResponse": {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            pageSize: number;
            items: components["schemas"]["types.AccessTokenModel"][];
            /** Format: int32 */
            count: number;
        };
        "token.RevokeResponse": Record<string, never>;
        "types.AccessTokenModel": {
            token: string;
            email: string;
            expiredAt: string;
            usage: string;
            lastUsedAt: string;
            isDeleted: boolean;
            isExpired: boolean;
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.ChangelogModel": {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            version: number;
            username: string;
            manifest: string[];
            config: string;
            configChanged: boolean;
            projectId: string;
            gitProjectId: string;
            project: components["schemas"]["types.ProjectModel"];
            gitProject: components["schemas"]["types.GitProjectModel"];
            date: string;
            configType: string;
            gitBranch: string;
            gitCommit: string;
            dockerImage: string;
            envValues: components["schemas"]["types.KeyValue"][];
            extraValues: components["schemas"]["websocket.ExtraValue"][];
            finalExtraValues: components["schemas"]["websocket.ExtraValue"][];
            gitCommitWebUrl: string;
            gitCommitTitle: string;
            gitCommitAuthor: string;
            gitCommitDate: string;
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.EventModel": {
            /** Format: int32 */
            id: number;
            /**
             * Format: enum
             * @enum {string}
             */
            action: TypesEventModelAction;
            username: string;
            message: string;
            old: string;
            new: string;
            duration: string;
            /** Format: int32 */
            fileId: number;
            file: components["schemas"]["types.FileModel"];
            eventAt: string;
            hasDiff: boolean;
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.FileModel": {
            /** Format: int32 */
            id: number;
            path: string;
            /** Format: int32 */
            size: number;
            username: string;
            namespace: string;
            pod: string;
            container: string;
            containerPath: string;
            humanizeSize: string;
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.GitProjectModel": {
            /** Format: int32 */
            id: number;
            defaultBranch: string;
            name: string;
            /** Format: int32 */
            gitProjectId: number;
            enabled: boolean;
            globalEnabled: boolean;
            globalConfig: components["schemas"]["mars.Config"];
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.KeyValue": {
            key: string;
            value: string;
        };
        "types.MemberModel": {
            /** Format: int32 */
            id: number;
            email: string;
        };
        "types.NamespaceModel": {
            /** Format: int32 */
            id: number;
            name: string;
            projects: components["schemas"]["types.ProjectModel"][];
            favorite: boolean;
            description: string;
            members: components["schemas"]["types.MemberModel"][];
            private: boolean;
            creatorEmail: string;
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.ProjectModel": {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            gitProjectId: number;
            gitBranch: string;
            gitCommit: string;
            config: string;
            overrideValues: string;
            dockerImage: string[];
            podSelectors: string[];
            /** Format: int32 */
            namespaceId: number;
            atomic: boolean;
            envValues: components["schemas"]["types.KeyValue"][];
            extraValues: components["schemas"]["websocket.ExtraValue"][];
            finalExtraValues: components["schemas"]["websocket.ExtraValue"][];
            /**
             * Format: enum
             * @enum {string}
             */
            deployStatus: TypesProjectModelDeployStatus;
            humanizeCreatedAt: string;
            humanizeUpdatedAt: string;
            configType: string;
            gitCommitWebUrl: string;
            gitCommitTitle: string;
            gitCommitAuthor: string;
            gitCommitDate: string;
            /** Format: int32 */
            version: number;
            /** Format: int32 */
            repoId: number;
            repo: components["schemas"]["types.RepoModel"];
            namespace: components["schemas"]["types.NamespaceModel"];
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.RepoModel": {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            gitProjectId: number;
            gitProjectName: string;
            enabled: boolean;
            marsConfig: components["schemas"]["mars.Config"];
            needGitRepo: boolean;
            description: string;
            createdAt: string;
            updatedAt: string;
            deletedAt: string;
        };
        "types.ServiceEndpoint": {
            name: string;
            url: string;
            portName: string;
        };
        "types.StateContainer": {
            namespace: string;
            pod: string;
            container: string;
            /** @description 在滚动更新的时候会出现新旧 pod，is_old 用来标识旧的即将被删除的 pod */
            isOld: boolean;
            terminating: boolean;
            pending: boolean;
            ready: boolean;
        };
        "version.Response": {
            version: string;
            buildDate: string;
            gitBranch: string;
            gitCommit: string;
            gitTag: string;
            goVersion: string;
            compiler: string;
            platform: string;
            kubectlVersion: string;
            helmVersion: string;
            gitRepo: string;
        };
        "websocket.ClusterInfo": {
            status: string;
            freeMemory: string;
            freeCpu: string;
            freeRequestMemory: string;
            freeRequestCpu: string;
            totalMemory: string;
            totalCpu: string;
            usageMemoryRate: string;
            usageCpuRate: string;
            requestMemoryRate: string;
            requestCpuRate: string;
        };
        "websocket.ExtraValue": {
            path: string;
            value: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AccessToken_List: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["token.ListResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    AccessToken_Grant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["token.GrantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["token.GrantResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    AccessToken_Lease: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["token.LeaseRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["token.LeaseResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    AccessToken_Revoke: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["token.RevokeResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Auth_Exchange: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth.ExchangeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth.ExchangeResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Auth_Info: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth.InfoResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Auth_Login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["auth.LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth.LoginResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Auth_Settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auth.SettingsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Changelog_FindLastChangelogsByProjectID: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["changelog.FindLastChangelogsByProjectIDRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["changelog.FindLastChangelogsByProjectIDResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Cluster_ClusterInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["cluster.InfoResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Container_CopyToPod: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["container.CopyToPodRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["container.CopyToPodResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Container_ContainerLog: {
        parameters: {
            query?: {
                showEvents?: boolean;
            };
            header?: never;
            path: {
                namespace: string;
                pod: string;
                container: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["container.LogResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Container_StreamContainerLog: {
        parameters: {
            query?: {
                showEvents?: boolean;
            };
            header?: never;
            path: {
                namespace: string;
                pod: string;
                container: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["container.LogResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Container_IsPodExists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["container.IsPodExistsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["container.IsPodExistsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Container_IsPodRunning: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["container.IsPodRunningRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["container.IsPodRunningResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Endpoint_InNamespace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespaceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["endpoint.InNamespaceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Endpoint_InProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["endpoint.InProjectResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Event_List: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                actionType?: PathsApiEventsGetParametersQueryActionType;
                /** @description 模糊搜索 message 和 username */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event.ListResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Event_Show: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event.ShowResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    File_List: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                withoutDeleted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file.ListResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    File_DiskInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file.DiskInfoResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    File_MaxUploadSize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file.MaxUploadSizeResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    File_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file.DeleteResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Git_AllRepos: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git.AllReposResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Git_GetChartValuesYaml: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["git.GetChartValuesYamlRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git.GetChartValuesYamlResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Git_ProjectOptions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git.ProjectOptionsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Git_BranchOptions: {
        parameters: {
            query?: {
                /** @description 如果传入 repo_id, 就会根据 mars 配置过滤分支 */
                repoId?: number;
            };
            header?: never;
            path: {
                gitProjectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git.BranchOptionsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Git_CommitOptions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                gitProjectId: number;
                branch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git.CommitOptionsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Git_Commit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                gitProjectId: number;
                branch: string;
                commit: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git.CommitResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Git_PipelineInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                gitProjectId: string;
                branch: string;
                commit: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git.PipelineInfoResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Metrics_CpuMemoryInNamespace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespaceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["metrics.CpuMemoryInNamespaceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Metrics_TopPod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                pod: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["metrics.TopPodResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Metrics_StreamTopPod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                namespace: string;
                pod: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["metrics.TopPodResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Metrics_CpuMemoryInProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["metrics.CpuMemoryInProjectResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_List: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                favorite?: boolean;
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.ListResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["namespace.CreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.CreateResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_IsExists: {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.IsExistsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_Favorite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["namespace.FavoriteRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.FavoriteResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_SyncMembers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["namespace.SyncMembersRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.SyncMembersResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_Transfer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["namespace.TransferRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.TransferResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_UpdatePrivate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["namespace.UpdatePrivateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.UpdatePrivateResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_Show: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.ShowResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.DeleteResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Namespace_UpdateDesc: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["namespace.UpdateDescRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["namespace.UpdateDescResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Picture_Background: {
        parameters: {
            query?: {
                random?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["picture.BackgroundResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Project_List: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project.ListResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Project_WebApply: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["project.WebApplyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project.WebApplyResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Project_Show: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project.ShowResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Project_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project.DeleteResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Project_AllContainers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project.AllContainersResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Project_MemoryCpuAndEndpoints: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project.MemoryCpuAndEndpointsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Project_Version: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project.VersionResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    File_ShowRecords: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file.ShowRecordsResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Repo_List: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                enabled?: boolean;
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repo.ListResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Repo_Create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["repo.CreateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repo.CreateResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Repo_Clone: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["repo.CloneRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repo.CloneResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Repo_ToggleEnabled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["repo.ToggleEnabledRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repo.ToggleEnabledResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Repo_Show: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repo.ShowResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Repo_Update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["repo.UpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repo.UpdateResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Repo_Delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repo.DeleteResponse"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
    Version_Version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["version.Response"];
                };
            };
            /** @description Default error response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["google.rpc.Status"];
                };
            };
        };
    };
}
export enum PathsApiEventsGetParametersQueryActionType {
    Unknown = "Unknown",
    Create = "Create",
    Update = "Update",
    Delete = "Delete",
    Upload = "Upload",
    Download = "Download",
    DryRun = "DryRun",
    Shell = "Shell",
    Login = "Login",
    CancelDeploy = "CancelDeploy",
    Exec = "Exec"
}
export enum MarsElementType {
    ElementTypeUnknown = "ElementTypeUnknown",
    ElementTypeInput = "ElementTypeInput",
    ElementTypeInputNumber = "ElementTypeInputNumber",
    ElementTypeSelect = "ElementTypeSelect",
    ElementTypeRadio = "ElementTypeRadio",
    ElementTypeSwitch = "ElementTypeSwitch",
    ElementTypeTextArea = "ElementTypeTextArea",
    ElementTypeNumberSelect = "ElementTypeNumberSelect",
    ElementTypeNumberRadio = "ElementTypeNumberRadio"
}
export enum TypesEventModelAction {
    Unknown = "Unknown",
    Create = "Create",
    Update = "Update",
    Delete = "Delete",
    Upload = "Upload",
    Download = "Download",
    DryRun = "DryRun",
    Shell = "Shell",
    Login = "Login",
    CancelDeploy = "CancelDeploy",
    Exec = "Exec"
}
export enum TypesProjectModelDeployStatus {
    StatusUnknown = "StatusUnknown",
    StatusDeploying = "StatusDeploying",
    StatusDeployed = "StatusDeployed",
    StatusFailed = "StatusFailed"
}
